$date
	Sat Jun 15 20:46:32 2013
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module CPU $end
$var wire 480 ! CDB_data_addr [479:0] $end
$var wire 480 " CDB_data_data [479:0] $end
$var wire 15 # CDB_data_valid [14:0] $end
$var wire 4 $ CDB_inst_RBindex [3:0] $end
$var wire 4 % CDB_inst_fu [3:0] $end
$var wire 32 & CDB_inst_inst [31:0] $end
$var wire 40 ' FU_RB_index_bus [39:0] $end
$var wire 64 ( FU_addr_bus [63:0] $end
$var wire 320 ) FU_data_bus [319:0] $end
$var wire 10 * FU_valid_bus [9:0] $end
$var wire 10 + busy [9:0] $end
$var wire 5 , numi [4:0] $end
$var wire 5 - numj [4:0] $end
$var wire 5 . numk [4:0] $end
$var wire 4 / qi [3:0] $end
$var wire 4 0 qj [3:0] $end
$var wire 4 1 qk [3:0] $end
$var wire 32 2 vi [31:0] $end
$var wire 32 3 vj [31:0] $end
$var wire 32 4 vk [31:0] $end
$var wire 32 5 wd_dcache [31:0] $end
$var wire 32 6 wd_reg [31:0] $end
$var wire 4 7 wd_status1 [3:0] $end
$var wire 4 8 wd_status2 [3:0] $end
$var wire 1 9 we_dcache $end
$var wire 1 : we_reg $end
$var wire 1 ; we_status1 $end
$var wire 1 < we_status2 $end
$var wire 32 = ws_dcache [31:0] $end
$var wire 5 > ws_reg [4:0] $end
$var wire 5 ? ws_status1 [4:0] $end
$var wire 5 @ ws_status2 [4:0] $end
$var reg 1 A clk $end
$var reg 1 B reset $end
$scope module status $end
$var wire 1 C clk $end
$var wire 5 D get_num1 [4:0] $end
$var wire 5 E get_num2 [4:0] $end
$var wire 5 F get_num3 [4:0] $end
$var wire 1 G reset $end
$var wire 4 H status1 [3:0] $end
$var wire 4 I status2 [3:0] $end
$var wire 4 J status3 [3:0] $end
$var wire 32 K value1 [31:0] $end
$var wire 32 L value2 [31:0] $end
$var wire 32 M value3 [31:0] $end
$var wire 32 N write_reg_data [31:0] $end
$var wire 1 : write_reg_enable $end
$var wire 5 O write_reg_src [4:0] $end
$var wire 1 ; write_rs_enable1 $end
$var wire 1 < write_rs_enable2 $end
$var wire 5 P write_rs_src1 [4:0] $end
$var wire 5 Q write_rs_src2 [4:0] $end
$var wire 4 R write_rs_status1 [3:0] $end
$var wire 4 S write_rs_status2 [3:0] $end
$scope module registers $end
$var wire 1 C clk $end
$var wire 5 T get_num1 [4:0] $end
$var wire 5 U get_num2 [4:0] $end
$var wire 5 V get_num3 [4:0] $end
$var wire 32 W out1 [31:0] $end
$var wire 32 X out2 [31:0] $end
$var wire 32 Y out3 [31:0] $end
$var wire 1 G reset_enable $end
$var wire 1 : set_enable $end
$var wire 5 Z set_num [4:0] $end
$var wire 32 [ set_val [31:0] $end
$var reg 6 \ i [5:0] $end
$upscope $end
$scope begin rs $end
$var reg 32 ] i [31:0] $end
$upscope $end
$upscope $end
$scope module data_ctrl $end
$var wire 40 ^ RB_index_bus [39:0] $end
$var wire 64 _ addr_bus [63:0] $end
$var wire 1 C clk $end
$var wire 320 ` data_bus [319:0] $end
$var wire 1 G reset $end
$var wire 10 a valid_bus [9:0] $end
$var reg 480 b CDB_data_addr [479:0] $end
$var reg 480 c CDB_data_data [479:0] $end
$var reg 15 d CDB_data_valid [14:0] $end
$scope function readData $end
$var reg 320 e data_bus [319:0] $end
$var reg 32 f fuindex [31:0] $end
$var reg 32 g readData [31:0] $end
$upscope $end
$scope function readIndex $end
$var reg 40 h RB_index_bus [39:0] $end
$var reg 32 i fuindex [31:0] $end
$var reg 4 j readIndex [3:0] $end
$upscope $end
$scope function readValid $end
$var reg 32 k fuindex [31:0] $end
$var reg 1 l readValid $end
$var reg 10 m valid_bus [9:0] $end
$upscope $end
$scope begin setCDB $end
$var reg 480 n data [479:0] $end
$var reg 480 o data_each [479:0] $end
$var reg 32 p i [31:0] $end
$var reg 4 q index [3:0] $end
$var reg 15 r valid [14:0] $end
$var reg 15 s valid_each [14:0] $end
$upscope $end
$upscope $end
$scope module RB $end
$var wire 480 t CDB_data_addr [479:0] $end
$var wire 480 u CDB_data_data [479:0] $end
$var wire 15 v CDB_data_valid [14:0] $end
$var wire 10 w busy [9:0] $end
$var wire 1 C clk $end
$var wire 1 x hit $end
$var wire 32 y inst [31:0] $end
$var wire 1 z mem_hit $end
$var wire 4 { qj [3:0] $end
$var wire 4 | qk [3:0] $end
$var wire 1 G reset $end
$var wire 32 } vj [31:0] $end
$var wire 32 ~ vk [31:0] $end
$var reg 4 !" CDB_inst_RBindex [3:0] $end
$var reg 4 "" CDB_inst_fu [3:0] $end
$var reg 32 #" CDB_inst_inst [31:0] $end
$var reg 4 $" RB_index_status_issue [3:0] $end
$var reg 4 %" RB_index_status_wb [3:0] $end
$var reg 5 &" Rdest_status_issue [4:0] $end
$var reg 5 '" Rdest_status_wb [4:0] $end
$var reg 4 (" back [3:0] $end
$var reg 1 )" cache_enable $end
$var reg 32 *" cnt [31:0] $end
$var reg 1 +" cnt_enable $end
$var reg 1 ," free $end
$var reg 4 -" head [3:0] $end
$var reg 5 ." numj [4:0] $end
$var reg 5 /" numk [4:0] $end
$var reg 4 0" op [3:0] $end
$var reg 32 1" pc [31:0] $end
$var reg 4 2" tail [3:0] $end
$var reg 32 3" wd_mem [31:0] $end
$var reg 32 4" wd_reg [31:0] $end
$var reg 1 5" we_mem $end
$var reg 1 6" we_reg $end
$var reg 1 7" we_status_issue $end
$var reg 1 8" we_status_wb $end
$var reg 32 9" ws_mem [31:0] $end
$var reg 5 :" ws_reg [4:0] $end
$scope function getRdest $end
$var reg 5 ;" getRdest [4:0] $end
$var reg 32 <" inst [31:0] $end
$var reg 4 =" op [3:0] $end
$upscope $end
$scope function inc $end
$var reg 4 >" inc [3:0] $end
$var reg 4 ?" ptr [3:0] $end
$upscope $end
$scope function notFull $end
$var reg 4 @" back [3:0] $end
$var reg 4 A" head [3:0] $end
$var reg 1 B" notFull $end
$upscope $end
$scope function readDataBus $end
$var reg 480 C" CDB_data_data [479:0] $end
$var reg 4 D" index [3:0] $end
$var reg 32 E" readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 F" CDB_data_valid [14:0] $end
$var reg 4 G" index [3:0] $end
$var reg 1 H" readValidBus $end
$upscope $end
$scope module icache $end
$var wire 1 I" cache_enable $end
$var wire 1 C clk $end
$var wire 10 J" index [9:0] $end
$var wire 32 K" inst [31:0] $end
$var wire 512 L" inst_block [511:0] $end
$var wire 18 M" inst_tag [17:0] $end
$var wire 4 N" offset [3:0] $end
$var wire 32 O" ptr [31:0] $end
$var reg 1 P" hit $end
$var reg 32 Q" out [31:0] $end
$scope module imemory $end
$var wire 512 R" out_block [511:0] $end
$var wire 32 S" out_inst [31:0] $end
$var wire 32 T" ptr [31:0] $end
$var wire 32 U" ptr_block [31:0] $end
$scope begin init $end
$var reg 32 V" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rst $end
$var reg 32 W" i [31:0] $end
$upscope $end
$scope begin IF $end
$scope begin addInst $end
$upscope $end
$upscope $end
$scope begin issue $end
$var reg 32 X" inst_now [31:0] $end
$scope begin branch $end
$upscope $end
$scope begin issueIfCan $end
$var reg 4 Y" fuend [3:0] $end
$var reg 4 Z" i [3:0] $end
$upscope $end
$upscope $end
$scope begin writeBack $end
$var reg 32 [" i [31:0] $end
$scope begin writeToReg $end
$upscope $end
$scope begin writeToMem $end
$upscope $end
$upscope $end
$scope begin updateRegStatus $end
$upscope $end
$scope task getData $end
$var reg 480 \" CDB_data_data [479:0] $end
$var reg 15 ]" CDB_data_valid [14:0] $end
$var reg 32 ^" V [31:0] $end
$var reg 4 _" q [3:0] $end
$var reg 32 `" v [31:0] $end
$upscope $end
$scope task getFuStartAndNum $end
$var reg 4 a" fu_end [3:0] $end
$var reg 4 b" fu_num [3:0] $end
$var reg 4 c" fu_start [3:0] $end
$var reg 4 d" op [3:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[0] $end
$var wire 480 e" CDB_data_data [479:0] $end
$var wire 15 f" CDB_data_valid [14:0] $end
$var wire 4 g" RB_index [3:0] $end
$var wire 40 h" RB_index_bus [39:0] $end
$var wire 10 i" busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 j" data_bus [319:0] $end
$var wire 4 k" fu [3:0] $end
$var wire 32 l" inst [31:0] $end
$var wire 4 m" qj [3:0] $end
$var wire 4 n" qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 o" valid_bus [9:0] $end
$var wire 32 p" vj [31:0] $end
$var wire 32 q" vk [31:0] $end
$var reg 4 r" Qj [3:0] $end
$var reg 4 s" Qk [3:0] $end
$var reg 32 t" Vj [31:0] $end
$var reg 32 u" Vk [31:0] $end
$var reg 1 v" busy $end
$var reg 4 w" dest [3:0] $end
$var reg 4 x" op [3:0] $end
$var reg 5 y" reg_numj [4:0] $end
$var reg 5 z" reg_numk [4:0] $end
$var reg 32 {" result [31:0] $end
$var reg 1 |" valid $end
$scope function readDataBus $end
$var reg 480 }" CDB_data_data [479:0] $end
$var reg 4 ~" index [3:0] $end
$var reg 32 !# readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 "# CDB_data_valid [14:0] $end
$var reg 4 ## index [3:0] $end
$var reg 1 $# readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 %# ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 &# Q [3:0] $end
$var reg 32 '# V [31:0] $end
$var reg 480 (# dataBus [479:0] $end
$var reg 1 )# ok $end
$var reg 1 *# valid $end
$var reg 15 +# validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 ,# CDB_data_data [479:0] $end
$var reg 15 -# CDB_data_valid [14:0] $end
$var reg 4 .# Q [3:0] $end
$var reg 32 /# V [31:0] $end
$var reg 4 0# q [3:0] $end
$var reg 32 1# v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[1] $end
$var wire 480 2# CDB_data_data [479:0] $end
$var wire 15 3# CDB_data_valid [14:0] $end
$var wire 4 4# RB_index [3:0] $end
$var wire 40 5# RB_index_bus [39:0] $end
$var wire 10 6# busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 7# data_bus [319:0] $end
$var wire 4 8# fu [3:0] $end
$var wire 32 9# inst [31:0] $end
$var wire 4 :# qj [3:0] $end
$var wire 4 ;# qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 <# valid_bus [9:0] $end
$var wire 32 =# vj [31:0] $end
$var wire 32 ># vk [31:0] $end
$var reg 4 ?# Qj [3:0] $end
$var reg 4 @# Qk [3:0] $end
$var reg 32 A# Vj [31:0] $end
$var reg 32 B# Vk [31:0] $end
$var reg 1 C# busy $end
$var reg 4 D# dest [3:0] $end
$var reg 4 E# op [3:0] $end
$var reg 5 F# reg_numj [4:0] $end
$var reg 5 G# reg_numk [4:0] $end
$var reg 32 H# result [31:0] $end
$var reg 1 I# valid $end
$scope function readDataBus $end
$var reg 480 J# CDB_data_data [479:0] $end
$var reg 4 K# index [3:0] $end
$var reg 32 L# readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 M# CDB_data_valid [14:0] $end
$var reg 4 N# index [3:0] $end
$var reg 1 O# readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 P# ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 Q# Q [3:0] $end
$var reg 32 R# V [31:0] $end
$var reg 480 S# dataBus [479:0] $end
$var reg 1 T# ok $end
$var reg 1 U# valid $end
$var reg 15 V# validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 W# CDB_data_data [479:0] $end
$var reg 15 X# CDB_data_valid [14:0] $end
$var reg 4 Y# Q [3:0] $end
$var reg 32 Z# V [31:0] $end
$var reg 4 [# q [3:0] $end
$var reg 32 \# v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[2] $end
$var wire 480 ]# CDB_data_data [479:0] $end
$var wire 15 ^# CDB_data_valid [14:0] $end
$var wire 4 _# RB_index [3:0] $end
$var wire 40 `# RB_index_bus [39:0] $end
$var wire 10 a# busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 b# data_bus [319:0] $end
$var wire 4 c# fu [3:0] $end
$var wire 32 d# inst [31:0] $end
$var wire 4 e# qj [3:0] $end
$var wire 4 f# qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 g# valid_bus [9:0] $end
$var wire 32 h# vj [31:0] $end
$var wire 32 i# vk [31:0] $end
$var reg 4 j# Qj [3:0] $end
$var reg 4 k# Qk [3:0] $end
$var reg 32 l# Vj [31:0] $end
$var reg 32 m# Vk [31:0] $end
$var reg 1 n# busy $end
$var reg 4 o# dest [3:0] $end
$var reg 4 p# op [3:0] $end
$var reg 5 q# reg_numj [4:0] $end
$var reg 5 r# reg_numk [4:0] $end
$var reg 32 s# result [31:0] $end
$var reg 1 t# valid $end
$scope function readDataBus $end
$var reg 480 u# CDB_data_data [479:0] $end
$var reg 4 v# index [3:0] $end
$var reg 32 w# readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 x# CDB_data_valid [14:0] $end
$var reg 4 y# index [3:0] $end
$var reg 1 z# readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 {# ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 |# Q [3:0] $end
$var reg 32 }# V [31:0] $end
$var reg 480 ~# dataBus [479:0] $end
$var reg 1 !$ ok $end
$var reg 1 "$ valid $end
$var reg 15 #$ validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 $$ CDB_data_data [479:0] $end
$var reg 15 %$ CDB_data_valid [14:0] $end
$var reg 4 &$ Q [3:0] $end
$var reg 32 '$ V [31:0] $end
$var reg 4 ($ q [3:0] $end
$var reg 32 )$ v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[3] $end
$var wire 480 *$ CDB_data_data [479:0] $end
$var wire 15 +$ CDB_data_valid [14:0] $end
$var wire 4 ,$ RB_index [3:0] $end
$var wire 40 -$ RB_index_bus [39:0] $end
$var wire 10 .$ busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 /$ data_bus [319:0] $end
$var wire 4 0$ fu [3:0] $end
$var wire 32 1$ inst [31:0] $end
$var wire 4 2$ qj [3:0] $end
$var wire 4 3$ qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 4$ valid_bus [9:0] $end
$var wire 32 5$ vj [31:0] $end
$var wire 32 6$ vk [31:0] $end
$var reg 4 7$ Qj [3:0] $end
$var reg 4 8$ Qk [3:0] $end
$var reg 32 9$ Vj [31:0] $end
$var reg 32 :$ Vk [31:0] $end
$var reg 1 ;$ busy $end
$var reg 4 <$ dest [3:0] $end
$var reg 4 =$ op [3:0] $end
$var reg 5 >$ reg_numj [4:0] $end
$var reg 5 ?$ reg_numk [4:0] $end
$var reg 32 @$ result [31:0] $end
$var reg 1 A$ valid $end
$scope function readDataBus $end
$var reg 480 B$ CDB_data_data [479:0] $end
$var reg 4 C$ index [3:0] $end
$var reg 32 D$ readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 E$ CDB_data_valid [14:0] $end
$var reg 4 F$ index [3:0] $end
$var reg 1 G$ readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 H$ ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 I$ Q [3:0] $end
$var reg 32 J$ V [31:0] $end
$var reg 480 K$ dataBus [479:0] $end
$var reg 1 L$ ok $end
$var reg 1 M$ valid $end
$var reg 15 N$ validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 O$ CDB_data_data [479:0] $end
$var reg 15 P$ CDB_data_valid [14:0] $end
$var reg 4 Q$ Q [3:0] $end
$var reg 32 R$ V [31:0] $end
$var reg 4 S$ q [3:0] $end
$var reg 32 T$ v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[4] $end
$var wire 480 U$ CDB_data_data [479:0] $end
$var wire 15 V$ CDB_data_valid [14:0] $end
$var wire 4 W$ RB_index [3:0] $end
$var wire 40 X$ RB_index_bus [39:0] $end
$var wire 10 Y$ busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 Z$ data_bus [319:0] $end
$var wire 4 [$ fu [3:0] $end
$var wire 32 \$ inst [31:0] $end
$var wire 4 ]$ qj [3:0] $end
$var wire 4 ^$ qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 _$ valid_bus [9:0] $end
$var wire 32 `$ vj [31:0] $end
$var wire 32 a$ vk [31:0] $end
$var reg 4 b$ Qj [3:0] $end
$var reg 4 c$ Qk [3:0] $end
$var reg 32 d$ Vj [31:0] $end
$var reg 32 e$ Vk [31:0] $end
$var reg 1 f$ busy $end
$var reg 4 g$ dest [3:0] $end
$var reg 4 h$ op [3:0] $end
$var reg 5 i$ reg_numj [4:0] $end
$var reg 5 j$ reg_numk [4:0] $end
$var reg 32 k$ result [31:0] $end
$var reg 1 l$ valid $end
$scope function readDataBus $end
$var reg 480 m$ CDB_data_data [479:0] $end
$var reg 4 n$ index [3:0] $end
$var reg 32 o$ readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 p$ CDB_data_valid [14:0] $end
$var reg 4 q$ index [3:0] $end
$var reg 1 r$ readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 s$ ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 t$ Q [3:0] $end
$var reg 32 u$ V [31:0] $end
$var reg 480 v$ dataBus [479:0] $end
$var reg 1 w$ ok $end
$var reg 1 x$ valid $end
$var reg 15 y$ validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 z$ CDB_data_data [479:0] $end
$var reg 15 {$ CDB_data_valid [14:0] $end
$var reg 4 |$ Q [3:0] $end
$var reg 32 }$ V [31:0] $end
$var reg 4 ~$ q [3:0] $end
$var reg 32 !% v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[5] $end
$var wire 480 "% CDB_data_data [479:0] $end
$var wire 15 #% CDB_data_valid [14:0] $end
$var wire 4 $% RB_index [3:0] $end
$var wire 40 %% RB_index_bus [39:0] $end
$var wire 10 &% busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 '% data_bus [319:0] $end
$var wire 4 (% fu [3:0] $end
$var wire 32 )% inst [31:0] $end
$var wire 4 *% qj [3:0] $end
$var wire 4 +% qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 ,% valid_bus [9:0] $end
$var wire 32 -% vj [31:0] $end
$var wire 32 .% vk [31:0] $end
$var reg 4 /% Qj [3:0] $end
$var reg 4 0% Qk [3:0] $end
$var reg 32 1% Vj [31:0] $end
$var reg 32 2% Vk [31:0] $end
$var reg 1 3% busy $end
$var reg 4 4% dest [3:0] $end
$var reg 4 5% op [3:0] $end
$var reg 5 6% reg_numj [4:0] $end
$var reg 5 7% reg_numk [4:0] $end
$var reg 32 8% result [31:0] $end
$var reg 1 9% valid $end
$scope function readDataBus $end
$var reg 480 :% CDB_data_data [479:0] $end
$var reg 4 ;% index [3:0] $end
$var reg 32 <% readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 =% CDB_data_valid [14:0] $end
$var reg 4 >% index [3:0] $end
$var reg 1 ?% readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 @% ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 A% Q [3:0] $end
$var reg 32 B% V [31:0] $end
$var reg 480 C% dataBus [479:0] $end
$var reg 1 D% ok $end
$var reg 1 E% valid $end
$var reg 15 F% validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 G% CDB_data_data [479:0] $end
$var reg 15 H% CDB_data_valid [14:0] $end
$var reg 4 I% Q [3:0] $end
$var reg 32 J% V [31:0] $end
$var reg 4 K% q [3:0] $end
$var reg 32 L% v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[6] $end
$var wire 480 M% CDB_data_data [479:0] $end
$var wire 15 N% CDB_data_valid [14:0] $end
$var wire 4 O% RB_index [3:0] $end
$var wire 40 P% RB_index_bus [39:0] $end
$var wire 10 Q% busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 R% data_bus [319:0] $end
$var wire 4 S% fu [3:0] $end
$var wire 32 T% inst [31:0] $end
$var wire 4 U% qj [3:0] $end
$var wire 4 V% qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 W% valid_bus [9:0] $end
$var wire 32 X% vj [31:0] $end
$var wire 32 Y% vk [31:0] $end
$var reg 4 Z% Qj [3:0] $end
$var reg 4 [% Qk [3:0] $end
$var reg 32 \% Vj [31:0] $end
$var reg 32 ]% Vk [31:0] $end
$var reg 1 ^% busy $end
$var reg 4 _% dest [3:0] $end
$var reg 4 `% op [3:0] $end
$var reg 5 a% reg_numj [4:0] $end
$var reg 5 b% reg_numk [4:0] $end
$var reg 32 c% result [31:0] $end
$var reg 1 d% valid $end
$scope function readDataBus $end
$var reg 480 e% CDB_data_data [479:0] $end
$var reg 4 f% index [3:0] $end
$var reg 32 g% readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 h% CDB_data_valid [14:0] $end
$var reg 4 i% index [3:0] $end
$var reg 1 j% readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 k% ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 l% Q [3:0] $end
$var reg 32 m% V [31:0] $end
$var reg 480 n% dataBus [479:0] $end
$var reg 1 o% ok $end
$var reg 1 p% valid $end
$var reg 15 q% validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 r% CDB_data_data [479:0] $end
$var reg 15 s% CDB_data_valid [14:0] $end
$var reg 4 t% Q [3:0] $end
$var reg 32 u% V [31:0] $end
$var reg 4 v% q [3:0] $end
$var reg 32 w% v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[7] $end
$var wire 480 x% CDB_data_data [479:0] $end
$var wire 15 y% CDB_data_valid [14:0] $end
$var wire 4 z% RB_index [3:0] $end
$var wire 40 {% RB_index_bus [39:0] $end
$var wire 10 |% busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 }% data_bus [319:0] $end
$var wire 4 ~% fu [3:0] $end
$var wire 32 !& inst [31:0] $end
$var wire 4 "& qj [3:0] $end
$var wire 4 #& qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 $& valid_bus [9:0] $end
$var wire 32 %& vj [31:0] $end
$var wire 32 && vk [31:0] $end
$var reg 4 '& Qj [3:0] $end
$var reg 4 (& Qk [3:0] $end
$var reg 32 )& Vj [31:0] $end
$var reg 32 *& Vk [31:0] $end
$var reg 1 +& busy $end
$var reg 4 ,& dest [3:0] $end
$var reg 4 -& op [3:0] $end
$var reg 5 .& reg_numj [4:0] $end
$var reg 5 /& reg_numk [4:0] $end
$var reg 32 0& result [31:0] $end
$var reg 1 1& valid $end
$scope function readDataBus $end
$var reg 480 2& CDB_data_data [479:0] $end
$var reg 4 3& index [3:0] $end
$var reg 32 4& readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 5& CDB_data_valid [14:0] $end
$var reg 4 6& index [3:0] $end
$var reg 1 7& readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 8& ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 9& Q [3:0] $end
$var reg 32 :& V [31:0] $end
$var reg 480 ;& dataBus [479:0] $end
$var reg 1 <& ok $end
$var reg 1 =& valid $end
$var reg 15 >& validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 ?& CDB_data_data [479:0] $end
$var reg 15 @& CDB_data_valid [14:0] $end
$var reg 4 A& Q [3:0] $end
$var reg 32 B& V [31:0] $end
$var reg 4 C& q [3:0] $end
$var reg 32 D& v [31:0] $end
$upscope $end
$upscope $end
$scope module store_rs[0] $end
$var wire 480 E& CDB_data_data [479:0] $end
$var wire 15 F& CDB_data_valid [14:0] $end
$var wire 4 G& RB_index [3:0] $end
$var wire 40 H& RB_index_bus [39:0] $end
$var wire 64 I& addr_bus [63:0] $end
$var wire 10 J& busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 K& data_bus [319:0] $end
$var wire 4 L& fu [3:0] $end
$var wire 32 M& inst [31:0] $end
$var wire 4 N& qi [3:0] $end
$var wire 4 O& qj [3:0] $end
$var wire 4 P& qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 Q& valid_bus [9:0] $end
$var wire 32 R& vi [31:0] $end
$var wire 32 S& vj [31:0] $end
$var wire 32 T& vk [31:0] $end
$var reg 4 U& Qi [3:0] $end
$var reg 4 V& Qj [3:0] $end
$var reg 4 W& Qk [3:0] $end
$var reg 32 X& Vi [31:0] $end
$var reg 32 Y& Vj [31:0] $end
$var reg 32 Z& Vk [31:0] $end
$var reg 1 [& busy $end
$var reg 32 \& data [31:0] $end
$var reg 4 ]& dest [3:0] $end
$var reg 4 ^& op [3:0] $end
$var reg 5 _& reg_numi [4:0] $end
$var reg 5 `& reg_numj [4:0] $end
$var reg 5 a& reg_numk [4:0] $end
$var reg 32 b& result [31:0] $end
$var reg 1 c& valid $end
$scope function readDataBus $end
$var reg 480 d& CDB_data_data [479:0] $end
$var reg 4 e& index [3:0] $end
$var reg 32 f& readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 g& CDB_data_valid [14:0] $end
$var reg 4 h& index [3:0] $end
$var reg 1 i& readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 j& ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 k& Q [3:0] $end
$var reg 32 l& V [31:0] $end
$var reg 480 m& dataBus [479:0] $end
$var reg 1 n& ok $end
$var reg 1 o& valid $end
$var reg 15 p& validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 q& CDB_data_data [479:0] $end
$var reg 15 r& CDB_data_valid [14:0] $end
$var reg 4 s& Q [3:0] $end
$var reg 32 t& V [31:0] $end
$var reg 4 u& q [3:0] $end
$var reg 32 v& v [31:0] $end
$upscope $end
$upscope $end
$scope module store_rs[1] $end
$var wire 480 w& CDB_data_data [479:0] $end
$var wire 15 x& CDB_data_valid [14:0] $end
$var wire 4 y& RB_index [3:0] $end
$var wire 40 z& RB_index_bus [39:0] $end
$var wire 64 {& addr_bus [63:0] $end
$var wire 10 |& busy_out [9:0] $end
$var wire 1 C clk $end
$var wire 320 }& data_bus [319:0] $end
$var wire 4 ~& fu [3:0] $end
$var wire 32 !' inst [31:0] $end
$var wire 4 "' qi [3:0] $end
$var wire 4 #' qj [3:0] $end
$var wire 4 $' qk [3:0] $end
$var wire 1 G reset $end
$var wire 10 %' valid_bus [9:0] $end
$var wire 32 &' vi [31:0] $end
$var wire 32 '' vj [31:0] $end
$var wire 32 (' vk [31:0] $end
$var reg 4 )' Qi [3:0] $end
$var reg 4 *' Qj [3:0] $end
$var reg 4 +' Qk [3:0] $end
$var reg 32 ,' Vi [31:0] $end
$var reg 32 -' Vj [31:0] $end
$var reg 32 .' Vk [31:0] $end
$var reg 1 /' busy $end
$var reg 32 0' data [31:0] $end
$var reg 4 1' dest [3:0] $end
$var reg 4 2' op [3:0] $end
$var reg 5 3' reg_numi [4:0] $end
$var reg 5 4' reg_numj [4:0] $end
$var reg 5 5' reg_numk [4:0] $end
$var reg 32 6' result [31:0] $end
$var reg 1 7' valid $end
$scope function readDataBus $end
$var reg 480 8' CDB_data_data [479:0] $end
$var reg 4 9' index [3:0] $end
$var reg 32 :' readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 ;' CDB_data_valid [14:0] $end
$var reg 4 <' index [3:0] $end
$var reg 1 =' readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 >' ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 ?' Q [3:0] $end
$var reg 32 @' V [31:0] $end
$var reg 480 A' dataBus [479:0] $end
$var reg 1 B' ok $end
$var reg 1 C' valid $end
$var reg 15 D' validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 E' CDB_data_data [479:0] $end
$var reg 15 F' CDB_data_valid [14:0] $end
$var reg 4 G' Q [3:0] $end
$var reg 32 H' V [31:0] $end
$var reg 4 I' q [3:0] $end
$var reg 32 J' v [31:0] $end
$upscope $end
$upscope $end
$scope begin test $end
$upscope $end
$scope task setWrite $end
$var reg 1 K' data $end
$var reg 4 L' fu [3:0] $end
$var reg 10 M' longData [9:0] $end
$var reg 10 N' mask [9:0] $end
$var reg 10 O' write [9:0] $end
$upscope $end
$scope task setWriteBy $end
$var reg 4 P' fu [3:0] $end
$var reg 10 Q' write [9:0] $end
$var reg 4 R' writeFU [3:0] $end
$upscope $end
$upscope $end
$scope module def_param $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx R'
bx Q'
bx P'
bx O'
bx N'
bx M'
bx L'
xK'
bx J'
bx I'
bx H'
bx G'
bx F'
bx E'
bx D'
xC'
xB'
bx A'
bx @'
bx ?'
x>'
x='
bx <'
bx ;'
bx :'
bx 9'
bx 8'
07'
b0 6'
bz 5'
bz 4'
bz 3'
bx 2'
b1111 1'
b0 0'
0/'
bx .'
bx -'
bx ,'
bx +'
bx *'
bx )'
bx ('
bx ''
bx &'
b0 %'
bx $'
bx #'
bx "'
bx !'
b1111 ~&
b0 }&
b0 |&
b0 {&
b1111111111111111111111111111111111111111 z&
bx y&
b0 x&
b0 w&
bx v&
bx u&
bx t&
bx s&
bx r&
bx q&
bx p&
xo&
xn&
bx m&
bx l&
bx k&
xj&
xi&
bx h&
bx g&
bx f&
bx e&
bx d&
0c&
b0 b&
bz a&
bz `&
bz _&
bx ^&
b1111 ]&
b0 \&
0[&
bx Z&
bx Y&
bx X&
bx W&
bx V&
bx U&
bx T&
bx S&
bx R&
b0 Q&
bx P&
bx O&
bx N&
bx M&
b1111 L&
b0 K&
b0 J&
b0 I&
b1111111111111111111111111111111111111111 H&
bx G&
b0 F&
b0 E&
bx D&
bx C&
bx B&
bx A&
bx @&
bx ?&
bx >&
x=&
x<&
bx ;&
bx :&
bx 9&
x8&
x7&
bx 6&
bx 5&
bx 4&
bx 3&
bx 2&
01&
b0 0&
bz /&
bz .&
bx -&
b1111 ,&
0+&
bx *&
bx )&
bx (&
bx '&
bx &&
bx %&
b0 $&
bx #&
bx "&
bx !&
b1111 ~%
b0 }%
b0 |%
b1111111111111111111111111111111111111111 {%
bx z%
b0 y%
b0 x%
bx w%
bx v%
bx u%
bx t%
bx s%
bx r%
bx q%
xp%
xo%
bx n%
bx m%
bx l%
xk%
xj%
bx i%
bx h%
bx g%
bx f%
bx e%
0d%
b0 c%
bz b%
bz a%
bx `%
b1111 _%
0^%
bx ]%
bx \%
bx [%
bx Z%
bx Y%
bx X%
b0 W%
bx V%
bx U%
bx T%
b1111 S%
b0 R%
b0 Q%
b1111111111111111111111111111111111111111 P%
bx O%
b0 N%
b0 M%
bx L%
bx K%
bx J%
bx I%
bx H%
bx G%
bx F%
xE%
xD%
bx C%
bx B%
bx A%
x@%
x?%
bx >%
bx =%
bx <%
bx ;%
bx :%
09%
b0 8%
bz 7%
bz 6%
bx 5%
b1111 4%
03%
bx 2%
bx 1%
bx 0%
bx /%
bx .%
bx -%
b0 ,%
bx +%
bx *%
bx )%
b1111 (%
b0 '%
b0 &%
b1111111111111111111111111111111111111111 %%
bx $%
b0 #%
b0 "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
bx y$
xx$
xw$
bx v$
bx u$
bx t$
xs$
xr$
bx q$
bx p$
bx o$
bx n$
bx m$
0l$
b0 k$
bz j$
bz i$
bx h$
b1111 g$
0f$
bx e$
bx d$
bx c$
bx b$
bx a$
bx `$
b0 _$
bx ^$
bx ]$
bx \$
b1111 [$
b0 Z$
b0 Y$
b1111111111111111111111111111111111111111 X$
bx W$
b0 V$
b0 U$
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
xM$
xL$
bx K$
bx J$
bx I$
xH$
xG$
bx F$
bx E$
bx D$
bx C$
bx B$
0A$
b0 @$
bz ?$
bz >$
bx =$
b1111 <$
0;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
b0 4$
bx 3$
bx 2$
bx 1$
b1111 0$
b0 /$
b0 .$
b1111111111111111111111111111111111111111 -$
bx ,$
b0 +$
b0 *$
bx )$
bx ($
bx '$
bx &$
bx %$
bx $$
bx #$
x"$
x!$
bx ~#
bx }#
bx |#
x{#
xz#
bx y#
bx x#
bx w#
bx v#
bx u#
0t#
b0 s#
bz r#
bz q#
bx p#
b1111 o#
0n#
bx m#
bx l#
bx k#
bx j#
bx i#
bx h#
b0 g#
bx f#
bx e#
bx d#
b1111 c#
b0 b#
b0 a#
b1111111111111111111111111111111111111111 `#
bx _#
b0 ^#
b0 ]#
bx \#
bx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
xU#
xT#
bx S#
bx R#
bx Q#
xP#
xO#
bx N#
bx M#
bx L#
bx K#
bx J#
0I#
b0 H#
bz G#
bz F#
bx E#
b1111 D#
0C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
b0 <#
bx ;#
bx :#
bx 9#
b1111 8#
b0 7#
b0 6#
b1111111111111111111111111111111111111111 5#
bx 4#
b0 3#
b0 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
x*#
x)#
bx (#
bx '#
bx &#
x%#
x$#
bx ##
bx "#
bx !#
bx ~"
bx }"
0|"
b0 {"
bz z"
bz y"
bx x"
b1111 w"
0v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
b0 o"
bx n"
bx m"
bx l"
b1111 k"
b0 j"
b0 i"
b1111111111111111111111111111111111111111 h"
bx g"
b0 f"
b0 e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
b1111 W"
b10000000000 V"
b0 U"
b0 T"
b1011111011101000000000010100100 S"
b
bx Q"
0P"
b0 O"
b0 N"
b0 M"
b
b1011111011101000000000010100100 K"
b0 J"
0I"
xH"
bx G"
bx F"
bx E"
bx D"
bx C"
xB"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
08"
07"
06"
05"
bx 4"
bx 3"
b0 2"
b0 1"
bx 0"
bz /"
bz ."
b0 -"
x,"
0+"
b0 *"
0)"
b0 ("
bx '"
bx &"
bx %"
bx $"
bx #"
b1111 ""
bx !"
bx ~
bx }
bx |
bx {
zz
bx y
0x
b0 w
b0 v
b0 u
b0 t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
xl
bx k
bx j
bx i
bx h
bx g
bx f
bx e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b1111111111111111111111111111111111111111 ^
b100000 ]
b100000 \
bx [
bx Z
bx Y
bx X
bx W
bz V
bz U
bz T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
1G
bz F
bz E
bz D
xC
1B
xA
bx @
bx ?
bx >
bx =
0<
0;
0:
09
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bz .
bz -
bz ,
b0 +
b0 *
b0 )
b0 (
b1111111111111111111111111111111111111111 '
bx &
b1111 %
bx $
b0 #
b0 "
b0 !
$end
#5
b100000 ]
b100000 \
0A
0C
#10
0H"
b0 G"
b0 F"
bx0001 ["
1)"
1I"
1B"
b1 >"
b0 ?"
b0 @"
b0 A"
1A
1C
0B
0G
#11
b1011111011101000000000010100100 Q"
b1011111011101000000000010100100 y
#15
b1111 q
b1111 j
b1001 i
b1111111111111111111111111111111111111111 h
b10 p
b0 r
b0 n
0A
0C
#20
bx0001 ["
1A
1C
#21
1P"
1x
#25
b1001 i
b10 p
0A
0C
#30
bx0001 ["
1A
1C
#35
b1001 i
b10 p
0A
0C
#40
bx0001 ["
1A
1C
#45
b1001 i
b10 p
0A
0C
#50
bx0001 ["
1A
1C
#55
b1001 i
b10 p
0A
0C
#60
bx0001 ["
1A
1C
#65
b1001 i
b10 p
0A
0C
#70
bx0001 ["
1A
1C
#75
b1001 i
b10 p
0A
0C
#80
bx0001 ["
1A
1C
#85
b1001 i
b10 p
0A
0C
#90
bx0001 ["
1A
1C
#95
b1001 i
b10 p
0A
0C
#100
bx0001 ["
1A
1C
#105
b1001 i
b10 p
0A
0C
#110
bx0001 ["
1A
1C
#115
b1001 i
b10 p
0A
0C
#120
bx0001 ["
1A
1C
#125
b1001 i
b10 p
0A
0C
#130
bx0001 ["
1A
1C
#135
b1001 i
b10 p
0A
0C
#140
bx0001 ["
1A
1C
#145
b1001 i
b10 p
0A
0C
#150
bx0001 ["
1A
1C
#155
b1001 i
b10 p
0A
0C
#160
bx0001 ["
1A
1C
#165
b1001 i
b10 p
0A
0C
#170
bx0001 ["
1A
1C
#175
b1001 i
b10 p
0A
0C
#180
bx0001 ["
1A
1C
#185
b1001 i
b10 p
0A
0C
#190
bx0001 ["
1A
1C
#195
b1001 i
b10 p
0A
0C
#200
bx0001 ["
1A
1C
#205
b1001 i
b10 p
0A
0C
#210
bx0001 ["
1A
1C
#215
b1001 i
b10 p
0A
0C
#220
bx0001 ["
1A
1C
#225
b1001 i
b10 p
0A
0C
#230
bx0001 ["
1A
1C
#235
b1001 i
b10 p
0A
0C
#240
bx0001 ["
1A
1C
#245
b1001 i
b10 p
0A
0C
#250
bx0001 ["
1A
1C
#255
b1001 i
b10 p
0A
0C
#260
bx0001 ["
1A
1C
#265
b1001 i
b10 p
0A
0C
#270
bx0001 ["
1A
1C
#275
b1001 i
b10 p
0A
0C
#280
bx0001 ["
1A
1C
#285
b1001 i
b10 p
0A
0C
#290
bx0001 ["
1A
1C
#295
b1001 i
b10 p
0A
0C
#300
bx0001 ["
1A
1C
#305
b1001 i
b10 p
0A
0C
#310
bx0001 ["
1A
1C
#315
b1001 i
b10 p
0A
0C
#320
bx0001 ["
1A
1C
#325
b1001 i
b10 p
0A
0C
#330
bx0001 ["
1A
1C
#335
b1001 i
b10 p
0A
0C
#340
bx0001 ["
1A
1C
#345
b1001 i
b10 p
0A
0C
#350
bx0001 ["
1A
1C
#355
b1001 i
b10 p
0A
0C
#360
bx0001 ["
1A
1C
#365
b1001 i
b10 p
0A
0C
#370
bx0001 ["
1A
1C
#375
b1001 i
b10 p
0A
0C
#380
bx0001 ["
1A
1C
#385
b1001 i
b10 p
0A
0C
#390
bx0001 ["
1A
1C
#395
b1001 i
b10 p
0A
0C
#400
bx0001 ["
1A
1C
#405
b1001 i
b10 p
0A
0C
#410
bx0001 ["
1A
1C
#415
b1001 i
b10 p
0A
0C
#420
bx0001 ["
1A
1C
#425
b1001 i
b10 p
0A
0C
#430
bx0001 ["
1A
1C
#435
b1001 i
b10 p
0A
0C
#440
bx0001 ["
1A
1C
#445
b1001 i
b10 p
0A
0C
#450
bx0001 ["
1A
1C
#455
b1001 i
b10 p
0A
0C
#460
bx0001 ["
1A
1C
#465
b1001 i
b10 p
0A
0C
#470
bx0001 ["
1A
1C
#475
b1001 i
b10 p
0A
0C
#480
bx0001 ["
1A
1C
#485
b1001 i
b10 p
0A
0C
#490
bx0001 ["
1A
1C
#495
b1001 i
b10 p
0A
0C
#500
bx0001 ["
1A
1C
#505
b1001 i
b10 p
0A
0C
#510
bx0001 ["
1A
1C
#515
b1001 i
b10 p
0A
0C
#520
bx0001 ["
1A
1C
#525
b1001 i
b10 p
0A
0C
#530
bx0001 ["
1A
1C
#535
b1001 i
b10 p
0A
0C
#540
bx0001 ["
1A
1C
#545
b1001 i
b10 p
0A
0C
#550
bx0001 ["
1A
1C
#555
b1001 i
b10 p
0A
0C
#560
bx0001 ["
1A
1C
#565
b1001 i
b10 p
0A
0C
#570
bx0001 ["
1A
1C
#575
b1001 i
b10 p
0A
0C
#580
bx0001 ["
1A
1C
#585
b1001 i
b10 p
0A
0C
#590
bx0001 ["
1A
1C
#595
b1001 i
b10 p
0A
0C
#600
bx0001 ["
1A
1C
#605
b1001 i
b10 p
0A
0C
#610
bx0001 ["
1A
1C
#615
b1001 i
b10 p
0A
0C
#620
bx0001 ["
1A
1C
#625
b1001 i
b10 p
0A
0C
#630
bx0001 ["
1A
1C
#635
b1001 i
b10 p
0A
0C
#640
bx0001 ["
1A
1C
#645
b1001 i
b10 p
0A
0C
#650
bx0001 ["
1A
1C
#655
b1001 i
b10 p
0A
0C
#660
bx0001 ["
1A
1C
#665
b1001 i
b10 p
0A
0C
#670
bx0001 ["
1A
1C
#675
b1001 i
b10 p
0A
0C
#680
bx0001 ["
1A
1C
#685
b1001 i
b10 p
0A
0C
#690
bx0001 ["
1A
1C
#695
b1001 i
b10 p
0A
0C
#700
bx0001 ["
1A
1C
#705
b1001 i
b10 p
0A
0C
#710
bx0001 ["
1A
1C
#715
b1001 i
b10 p
0A
0C
#720
bx0001 ["
1A
1C
#725
b1001 i
b10 p
0A
0C
#730
bx0001 ["
1A
1C
#735
b1001 i
b10 p
0A
0C
#740
bx0001 ["
1A
1C
#745
b1001 i
b10 p
0A
0C
#750
bx0001 ["
1A
1C
#755
b1001 i
b10 p
0A
0C
#760
bx0001 ["
1A
1C
#765
b1001 i
b10 p
0A
0C
#770
bx0001 ["
1A
1C
#775
b1001 i
b10 p
0A
0C
#780
bx0001 ["
1A
1C
#785
b1001 i
b10 p
0A
0C
#790
bx0001 ["
1A
1C
#795
b1001 i
b10 p
0A
0C
#800
bx0001 ["
1A
1C
#805
b1001 i
b10 p
0A
0C
#810
bx0001 ["
1A
1C
#815
b1001 i
b10 p
0A
0C
#820
bx0001 ["
1A
1C
#825
b1001 i
b10 p
0A
0C
#830
bx0001 ["
1A
1C
#835
b1001 i
b10 p
0A
0C
#840
bx0001 ["
1A
1C
#845
b1001 i
b10 p
0A
0C
#850
bx0001 ["
1A
1C
#855
b1001 i
b10 p
0A
0C
#860
bx0001 ["
1A
1C
#865
b1001 i
b10 p
0A
0C
#870
bx0001 ["
1A
1C
#875
b1001 i
b10 p
0A
0C
#880
bx0001 ["
1A
1C
#885
b1001 i
b10 p
0A
0C
#890
bx0001 ["
1A
1C
#895
b1001 i
b10 p
0A
0C
#900
bx0001 ["
1A
1C
#905
b1001 i
b10 p
0A
0C
#910
bx0001 ["
1A
1C
#915
b1001 i
b10 p
0A
0C
#920
bx0001 ["
1A
1C
#925
b1001 i
b10 p
0A
0C
#930
bx0001 ["
1A
1C
#935
b1001 i
b10 p
0A
0C
#940
bx0001 ["
1A
1C
#945
b1001 i
b10 p
0A
0C
#950
bx0001 ["
1A
1C
#955
b1001 i
b10 p
0A
0C
#960
bx0001 ["
1A
1C
#965
b1001 i
b10 p
0A
0C
#970
bx0001 ["
1A
1C
#975
b1001 i
b10 p
0A
0C
#980
bx0001 ["
1A
1C
#985
b1001 i
b10 p
0A
0C
#990
bx0001 ["
1A
1C
#995
b1001 i
b10 p
0A
0C
#1000
bx0001 ["
1A
1C
#1005
b1001 i
b10 p
b1 N"
0A
0C
b1 1"
b1 O"
b1 T"
b1100011011110000000000001011000 K"
b1100011011110000000000001011000 S"
b1 ("
#1010
b1 G"
bx0010 ["
b1 $"
b1 7
b1 R
17"
1;
b11110 &"
b11110 ?
b11110 P
b11110 ;"
b101 ="
b1011111011101000000000010100100 <"
b1 !"
b1 $
b1 g"
b1 4#
b1 _#
b1 ,$
b1 W$
b1 $%
b1 O%
b1 z%
b1 G&
b1 y&
b0 ""
b0 %
b0 k"
b0 8#
b0 c#
b0 0$
b0 [$
b0 (%
b0 S%
b0 ~%
b0 L&
b0 ~&
b1011111011101000000000010100100 #"
b1011111011101000000000010100100 &
b1011111011101000000000010100100 l"
b1011111011101000000000010100100 9#
b1011111011101000000000010100100 d#
b1011111011101000000000010100100 1$
b1011111011101000000000010100100 \$
b1011111011101000000000010100100 )%
b1011111011101000000000010100100 T%
b1011111011101000000000010100100 !&
b1011111011101000000000010100100 M&
b1011111011101000000000010100100 !'
b1 2"
1,"
b10 Y"
b1 Z"
b10 a"
b11 b"
b0 c"
b101 d"
b101 0"
b1011111011101000000000010100100 X"
b1 >"
b0 ?"
b1 @"
1A
1C
#1011
b1100011011110000000000001011000 Q"
b1100011011110000000000001011000 y
b1 w"
b1111111111111111111111111111111111110001 '
b1111111111111111111111111111111111110001 ^
b1111111111111111111111111111111111110001 h"
b1111111111111111111111111111111111110001 5#
b1111111111111111111111111111111111110001 `#
b1111111111111111111111111111111111110001 -$
b1111111111111111111111111111111111110001 X$
b1111111111111111111111111111111111110001 %%
b1111111111111111111111111111111111110001 P%
b1111111111111111111111111111111111110001 {%
b1111111111111111111111111111111111110001 H&
b1111111111111111111111111111111111110001 z&
1v"
b1 +
b1 w
b1 i"
b1 6#
b1 a#
b1 .$
b1 Y$
b1 &%
b1 Q%
b1 |%
b1 J&
b1 |&
b1111 s"
b10100100 u"
b1111 r"
b0 t"
b1111 .#
b0 /#
b0 -#
b0 ,#
b1111 0#
b0 1#
b11101 y"
b11101 -
b11101 E
b11101 U
b1111 0
b1111 I
b1111 {
b1111 m"
b1111 :#
b1111 e#
b1111 2$
b1111 ]$
b1111 *%
b1111 U%
b1111 "&
b1111 O&
b1111 #'
b0 3
b0 L
b0 X
b0 }
b0 p"
b0 =#
b0 h#
b0 5$
b0 `$
b0 -%
b0 X%
b0 %&
b0 S&
b0 ''
b101 x"
#1012
bz y"
bz -
bz E
bz U
bx 0
bx I
bx {
bx m"
bx :#
bx e#
bx 2$
bx ]$
bx *%
bx U%
bx "&
bx O&
bx #'
bx 3
bx L
bx X
bx }
bx p"
bx =#
bx h#
bx 5$
bx `$
bx -%
bx X%
bx %&
bx S&
bx ''
#1015
b10 N"
b0 s
0l
b0 k
b0 m
b0 o
b0 g
b0 f
b0 e
b1111 q
b1111 j
b1001 i
b1111111111111111111111111111111111110001 h
b10 p
b10 1"
b10 O"
b10 T"
b1100011111110000000000001110000 K"
b1100011111110000000000001110000 S"
b10 ("
b10 >"
b1 ?"
0A
0C
#1020
b10 G"
bx0011 ["
b10 $"
b10 7
b10 R
b110 &"
b110 ?
b110 P
b110 ;"
b110 ="
b1100011011110000000000001011000 <"
b10 !"
b10 $
b10 g"
b10 4#
b10 _#
b10 ,$
b10 W$
b10 $%
b10 O%
b10 z%
b10 G&
b10 y&
b1 ""
b1 %
b1 k"
b1 8#
b1 c#
b1 0$
b1 [$
b1 (%
b1 S%
b1 ~%
b1 L&
b1 ~&
b1100011011110000000000001011000 #"
b1100011011110000000000001011000 &
b1100011011110000000000001011000 l"
b1100011011110000000000001011000 9#
b1100011011110000000000001011000 d#
b1100011011110000000000001011000 1$
b1100011011110000000000001011000 \$
b1100011011110000000000001011000 )%
b1100011011110000000000001011000 T%
b1100011011110000000000001011000 !&
b1100011011110000000000001011000 M&
b1100011011110000000000001011000 !'
b10 2"
1,"
b10 Z"
b110 d"
b110 0"
b1100011011110000000000001011000 X"
1)#
b0 +#
b0 (#
b10100100 '#
b1111 &#
1%#
b1 >"
b0 ?"
b10 @"
1A
1C
#1021
b1100011111110000000000001110000 Q"
b1100011111110000000000001110000 y
b10 D#
b1111111111111111111111111111111100100001 '
b1111111111111111111111111111111100100001 ^
b1111111111111111111111111111111100100001 h"
b1111111111111111111111111111111100100001 5#
b1111111111111111111111111111111100100001 `#
b1111111111111111111111111111111100100001 -$
b1111111111111111111111111111111100100001 X$
b1111111111111111111111111111111100100001 %%
b1111111111111111111111111111111100100001 P%
b1111111111111111111111111111111100100001 {%
b1111111111111111111111111111111100100001 H&
b1111111111111111111111111111111100100001 z&
1C#
0v"
b10 +
b10 w
b10 i"
b10 6#
b10 a#
b10 .$
b10 Y$
b10 &%
b10 Q%
b10 |%
b10 J&
b10 |&
1|"
b1 *
b1 a
b1 o"
b1 <#
b1 g#
b1 4$
b1 _$
b1 ,%
b1 W%
b1 $&
b1 Q&
b1 %'
b10100100 {"
b10100100 )
b10100100 `
b10100100 j"
b10100100 7#
b10100100 b#
b10100100 /$
b10100100 Z$
b10100100 '%
b10100100 R%
b10100100 }%
b10100100 K&
b10100100 }&
b1111 @#
b1011000 B#
b1 ?#
b1 Y#
0O#
b1 N#
b0 M#
b0 X#
b0 W#
b1 [#
b0 \#
b11110 F#
b11110 -
b11110 E
b11110 U
b1 0
b1 I
b1 {
b1 m"
b1 :#
b1 e#
b1 2$
b1 ]$
b1 *%
b1 U%
b1 "&
b1 O&
b1 #'
b0 3
b0 L
b0 X
b0 }
b0 p"
b0 =#
b0 h#
b0 5$
b0 `$
b0 -%
b0 X%
b0 %&
b0 S&
b0 ''
b110 E#
#1022
bz F#
bz -
bz E
bz U
bx 0
bx I
bx {
bx m"
bx :#
bx e#
bx 2$
bx ]$
bx *%
bx U%
bx "&
bx O&
bx #'
bx 3
bx L
bx X
bx }
bx p"
bx =#
bx h#
bx 5$
bx `$
bx -%
bx X%
bx %&
bx S&
bx ''
#1025
b11 N"
b10 d
b10 #
b10 v
b10 f"
b10 3#
b10 ^#
b10 +$
b10 V$
b10 #%
b10 N%
b10 y%
b10 F&
b10 x&
b1010010000000000000000000000000000000000 c
b1010010000000000000000000000000000000000 "
b1010010000000000000000000000000000000000 u
b1010010000000000000000000000000000000000 e"
b1010010000000000000000000000000000000000 2#
b1010010000000000000000000000000000000000 ]#
b1010010000000000000000000000000000000000 *$
b1010010000000000000000000000000000000000 U$
b1010010000000000000000000000000000000000 "%
b1010010000000000000000000000000000000000 M%
b1010010000000000000000000000000000000000 x%
b1010010000000000000000000000000000000000 E&
b1010010000000000000000000000000000000000 w&
b1 k
b1 f
b10 r
b0 s
0l
b1 m
b0 n
b0 o
b0 g
b10100100 e
b1111 q
b1111 j
b1001 i
b1111111111111111111111111111111100100001 h
b10 p
b11 1"
b11 O"
b11 T"
b1100100011110000000000010001000 K"
b1100100011110000000000010001000 S"
b11 ("
b11 >"
b10 ?"
0A
0C
#1026
b1111 w"
b1111111111111111111111111111111100101111 '
b1111111111111111111111111111111100101111 ^
b1111111111111111111111111111111100101111 h"
b1111111111111111111111111111111100101111 5#
b1111111111111111111111111111111100101111 `#
b1111111111111111111111111111111100101111 -$
b1111111111111111111111111111111100101111 X$
b1111111111111111111111111111111100101111 %%
b1111111111111111111111111111111100101111 P%
b1111111111111111111111111111111100101111 {%
b1111111111111111111111111111111100101111 H&
b1111111111111111111111111111111100101111 z&
#1030
b11110 '"
b11110 @
b11110 Q
b1111 %"
b1111 8
b1111 S
18"
1<
b11110 :"
b11110 >
b11110 O
b11110 Z
b10100100 4"
b10100100 6
b10100100 N
b10100100 [
16"
1:
b1 -"
b10100100 E"
b1 D"
b1010010000000000000000000000000000000000 C"
0H"
b11 G"
b10 F"
bx0100 ["
b11 $"
b11 7
b11 R
b111 &"
b111 ?
b111 P
b111 ;"
b1100011111110000000000001110000 <"
b11 !"
b11 $
b11 g"
b11 4#
b11 _#
b11 ,$
b11 W$
b11 $%
b11 O%
b11 z%
b11 G&
b11 y&
b0 ""
b0 %
b0 k"
b0 8#
b0 c#
b0 0$
b0 [$
b0 (%
b0 S%
b0 ~%
b0 L&
b0 ~&
b1100011111110000000000001110000 #"
b1100011111110000000000001110000 &
b1100011111110000000000001110000 l"
b1100011111110000000000001110000 9#
b1100011111110000000000001110000 d#
b1100011111110000000000001110000 1$
b1100011111110000000000001110000 \$
b1100011111110000000000001110000 )%
b1100011111110000000000001110000 T%
b1100011111110000000000001110000 !&
b1100011111110000000000001110000 M&
b1100011111110000000000001110000 !'
b11 2"
1,"
b1 Z"
b1100011111110000000000001110000 X"
b10100100 A#
b1111 ?#
b1011000 R#
b10100100 L#
b1 K#
b1010010000000000000000000000000000000000 J#
1U#
1O#
b10 M#
1T#
b10 V#
b1010010000000000000000000000000000000000 S#
b1111 Q#
1P#
b1 >"
b0 ?"
b11 @"
1A
1C
#1031
b1100100011110000000000010001000 Q"
b1100100011110000000000010001000 y
b11 w"
b1111111111111111111111111111111100100011 '
b1111111111111111111111111111111100100011 ^
b1111111111111111111111111111111100100011 h"
b1111111111111111111111111111111100100011 5#
b1111111111111111111111111111111100100011 `#
b1111111111111111111111111111111100100011 -$
b1111111111111111111111111111111100100011 X$
b1111111111111111111111111111111100100011 %%
b1111111111111111111111111111111100100011 P%
b1111111111111111111111111111111100100011 {%
b1111111111111111111111111111111100100011 H&
b1111111111111111111111111111111100100011 z&
1v"
0C#
b1 +
b1 w
b1 i"
b1 6#
b1 a#
b1 .$
b1 Y$
b1 &%
b1 Q%
b1 |%
b1 J&
b1 |&
1I#
b11 *
b11 a
b11 o"
b11 <#
b11 g#
b11 4$
b11 _$
b11 ,%
b11 W%
b11 $&
b11 Q&
b11 %'
b1001100 H#
b100110000000000000000000000000010100100 )
b100110000000000000000000000000010100100 `
b100110000000000000000000000000010100100 j"
b100110000000000000000000000000010100100 7#
b100110000000000000000000000000010100100 b#
b100110000000000000000000000000010100100 /$
b100110000000000000000000000000010100100 Z$
b100110000000000000000000000000010100100 '%
b100110000000000000000000000000010100100 R%
b100110000000000000000000000000010100100 }%
b100110000000000000000000000000010100100 K&
b100110000000000000000000000000010100100 }&
b1110000 u"
b10100100 t"
b10100100 /#
b10100100 !#
b1 ~"
b1010010000000000000000000000000000000000 }"
1$#
b1 ##
b10 "#
b10 -#
b1010010000000000000000000000000000000000 ,#
b1 0#
b11110 y"
b11110 -
b11110 E
b11110 U
b1 0
b1 I
b1 {
b1 m"
b1 :#
b1 e#
b1 2$
b1 ]$
b1 *%
b1 U%
b1 "&
b1 O&
b1 #'
b0 3
b0 L
b0 X
b0 }
b0 p"
b0 =#
b0 h#
b0 5$
b0 `$
b0 -%
b0 X%
b0 %&
b0 S&
b0 ''
b110 x"
#1032
0|"
b10 *
b10 a
b10 o"
b10 <#
b10 g#
b10 4$
b10 _$
b10 ,%
b10 W%
b10 $&
b10 Q&
b10 %'
bz y"
bz -
bz E
bz U
bx 0
bx I
bx {
bx m"
bx :#
bx e#
bx 2$
bx ]$
bx *%
bx U%
bx "&
bx O&
bx #'
bx 3
bx L
bx X
bx }
bx p"
bx =#
bx h#
bx 5$
bx `$
bx -%
bx X%
bx %&
bx S&
bx ''
#1035
b100 N"
b100 d
b100 #
b100 v
b100 f"
b100 3#
b100 ^#
b100 +$
b100 V$
b100 #%
b100 N%
b100 y%
b100 F&
b100 x&
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 c
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 "
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 u
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 e"
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 2#
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 ]#
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 *$
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 U$
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 "%
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 M%
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 x%
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 E&
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 w&
b100 s
1l
b1 k
b10 m
b0 n
b10011000000000000000000000000000000000000000000000000000000000000000000 o
b1001100 g
b1 f
b100110000000000000000000000000010100100 e
b1111 q
b1111 j
b1001 i
b1111111111111111111111111111111100100011 h
b10 p
b100 r
b100 1"
b100 O"
b100 T"
b10100100100000000000000000000000 K"
b10100100100000000000000000000000 S"
b100 ("
b100 >"
b11 ?"
0A
0C
#1036
b1111 D#
b1111111111111111111111111111111111110011 '
b1111111111111111111111111111111111110011 ^
b1111111111111111111111111111111111110011 h"
b1111111111111111111111111111111111110011 5#
b1111111111111111111111111111111111110011 `#
b1111111111111111111111111111111111110011 -$
b1111111111111111111111111111111111110011 X$
b1111111111111111111111111111111111110011 %%
b1111111111111111111111111111111111110011 P%
b1111111111111111111111111111111111110011 {%
b1111111111111111111111111111111111110011 H&
b1111111111111111111111111111111111110011 z&
#1040
b1110000 '#
b100 +#
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 (#
b110 '"
b110 @
b110 Q
b110 :"
b110 >
b110 O
b110 Z
b1001100 4"
b1001100 6
b1001100 N
b1001100 [
b10 -"
b1001100 E"
b10 D"
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 C"
0H"
b100 G"
b100 F"
bx0101 ["
b100 $"
b100 7
b100 R
b1000 &"
b1000 ?
b1000 P
b1000 ;"
b1100100011110000000000010001000 <"
b100 !"
b100 $
b100 g"
b100 4#
b100 _#
b100 ,$
b100 W$
b100 $%
b100 O%
b100 z%
b100 G&
b100 y&
b1 ""
b1 %
b1 k"
b1 8#
b1 c#
b1 0$
b1 [$
b1 (%
b1 S%
b1 ~%
b1 L&
b1 ~&
b1100100011110000000000010001000 #"
b1100100011110000000000010001000 &
b1100100011110000000000010001000 l"
b1100100011110000000000010001000 9#
b1100100011110000000000010001000 d#
b1100100011110000000000010001000 1$
b1100100011110000000000010001000 \$
b1100100011110000000000010001000 )%
b1100100011110000000000010001000 T%
b1100100011110000000000010001000 !&
b1100100011110000000000010001000 M&
b1100100011110000000000010001000 !'
b100 2"
1,"
b10 Z"
b1100100011110000000000010001000 X"
b10 >"
b1 ?"
b100 @"
b1 A"
1A
1C
#1041
b10100100100000000000000000000000 Q"
b10100100100000000000000000000000 y
b100 D#
b1111111111111111111111111111111101000011 '
b1111111111111111111111111111111101000011 ^
b1111111111111111111111111111111101000011 h"
b1111111111111111111111111111111101000011 5#
b1111111111111111111111111111111101000011 `#
b1111111111111111111111111111111101000011 -$
b1111111111111111111111111111111101000011 X$
b1111111111111111111111111111111101000011 %%
b1111111111111111111111111111111101000011 P%
b1111111111111111111111111111111101000011 {%
b1111111111111111111111111111111101000011 H&
b1111111111111111111111111111111101000011 z&
1C#
0v"
b10 +
b10 w
b10 i"
b10 6#
b10 a#
b10 .$
b10 Y$
b10 &%
b10 Q%
b10 |%
b10 J&
b10 |&
1|"
b11 *
b11 a
b11 o"
b11 <#
b11 g#
b11 4$
b11 _$
b11 ,%
b11 W%
b11 $&
b11 Q&
b11 %'
b110100 {"
b100110000000000000000000000000000110100 )
b100110000000000000000000000000000110100 `
b100110000000000000000000000000000110100 j"
b100110000000000000000000000000000110100 7#
b100110000000000000000000000000000110100 b#
b100110000000000000000000000000000110100 /$
b100110000000000000000000000000000110100 Z$
b100110000000000000000000000000000110100 '%
b100110000000000000000000000000000110100 R%
b100110000000000000000000000000000110100 }%
b100110000000000000000000000000000110100 K&
b100110000000000000000000000000000110100 }&
b10001000 B#
b1111 Y#
b10100100 Z#
b100 X#
b10100100000000000000000000000000010011000000000000000000000000000000000000000000000000000000000000000000 W#
b1111 [#
b10100100 \#
b11110 F#
b11110 -
b11110 E
b11110 U
b1111 0
b1111 I
b1111 {
b1111 m"
b1111 :#
b1111 e#
b1111 2$
b1111 ]$
b1111 *%
b1111 U%
b1111 "&
b1111 O&
b1111 #'
b10100100 3
b10100100 L
b10100100 X
b10100100 }
b10100100 p"
b10100100 =#
b10100100 h#
b10100100 5$
b10100100 `$
b10100100 -%
b10100100 X%
b10100100 %&
b10100100 S&
b10100100 ''
#1042
0I#
b1 *
b1 a
b1 o"
b1 <#
b1 g#
b1 4$
b1 _$
b1 ,%
b1 W%
b1 $&
b1 Q&
b1 %'
bz F#
bz -
bz E
bz U
bx 0
bx I
bx {
bx m"
bx :#
bx e#
bx 2$
bx ]$
bx *%
bx U%
bx "&
bx O&
bx #'
bx 3
bx L
bx X
bx }
bx p"
bx =#
bx h#
bx 5$
bx `$
bx -%
bx X%
bx %&
bx S&
bx ''
#1045
b101 N"
b1000 d
b1000 #
b1000 v
b1000 f"
b1000 3#
b1000 ^#
b1000 +$
b1000 V$
b1000 #%
b1000 N%
b1000 y%
b1000 F&
b1000 x&
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 c
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 "
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 u
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 e"
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 2#
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ]#
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 *$
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 U$
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 "%
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 M%
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 x%
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 E&
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 w&
0l
b0 s
b1 k
b1 m
b0 n
b100110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 o
b1001100 g
b1 f
b100110000000000000000000000000000110100 e
b1111 q
b1111 j
b1001 i
b1111111111111111111111111111111101000011 h
b10 p
b1000 r
b101 1"
b101 O"
b101 T"
b11010100100000000100000000011111 K"
b11010100100000000100000000011111 S"
b101 ("
b101 >"
b100 ?"
0A
0C
#1046
b1111 w"
b1111111111111111111111111111111101001111 '
b1111111111111111111111111111111101001111 ^
b1111111111111111111111111111111101001111 h"
b1111111111111111111111111111111101001111 5#
b1111111111111111111111111111111101001111 `#
b1111111111111111111111111111111101001111 -$
b1111111111111111111111111111111101001111 X$
b1111111111111111111111111111111101001111 %%
b1111111111111111111111111111111101001111 P%
b1111111111111111111111111111111101001111 {%
b1111111111111111111111111111111101001111 H&
b1111111111111111111111111111111101001111 z&
#1050
b1000 V#
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 S#
b10001000 R#
b111 '"
b111 @
b111 Q
b111 :"
b111 >
b111 O
b111 Z
b110100 4"
b110100 6
b110100 N
b110100 [
b11 -"
b110100 E"
b11 D"
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 C"
0H"
b101 G"
b1000 F"
bx0110 ["
b101 $"
b101 7
b101 R
b0 &"
b0 ?
b0 P
b0 ;"
b1010 ="
b10100100100000000000000000000000 <"
b101 !"
b101 $
b101 g"
b101 4#
b101 _#
b101 ,$
b101 W$
b101 $%
b101 O%
b101 z%
b101 G&
b101 y&
b111 ""
b111 %
b111 k"
b111 8#
b111 c#
b111 0$
b111 [$
b111 (%
b111 S%
b111 ~%
b111 L&
b111 ~&
b10100100100000000000000000000000 #"
b10100100100000000000000000000000 &
b10100100100000000000000000000000 l"
b10100100100000000000000000000000 9#
b10100100100000000000000000000000 d#
b10100100100000000000000000000000 1$
b10100100100000000000000000000000 \$
b10100100100000000000000000000000 )%
b10100100100000000000000000000000 T%
b10100100100000000000000000000000 !&
b10100100100000000000000000000000 M&
b10100100100000000000000000000000 !'
b101 2"
1,"
b1001 Y"
b1000 Z"
b1001 a"
b111 c"
b1010 d"
b1010 0"
b10100100100000000000000000000000 X"
b11 >"
b10 ?"
b101 @"
b10 A"
1A
1C
#1051
b11010100100000000100000000011111 Q"
b11010100100000000100000000011111 y
b101 ,&
b1111111101011111111111111111111101001111 '
b1111111101011111111111111111111101001111 ^
b1111111101011111111111111111111101001111 h"
b1111111101011111111111111111111101001111 5#
b1111111101011111111111111111111101001111 `#
b1111111101011111111111111111111101001111 -$
b1111111101011111111111111111111101001111 X$
b1111111101011111111111111111111101001111 %%
b1111111101011111111111111111111101001111 P%
b1111111101011111111111111111111101001111 {%
b1111111101011111111111111111111101001111 H&
b1111111101011111111111111111111101001111 z&
1+&
0C#
b10000000 +
b10000000 w
b10000000 i"
b10000000 6#
b10000000 a#
b10000000 .$
b10000000 Y$
b10000000 &%
b10000000 Q%
b10000000 |%
b10000000 J&
b10000000 |&
1I#
b11 *
b11 a
b11 o"
b11 <#
b11 g#
b11 4$
b11 _$
b11 ,%
b11 W%
b11 $&
b11 Q&
b11 %'
b11100 H#
b1110000000000000000000000000000110100 )
b1110000000000000000000000000000110100 `
b1110000000000000000000000000000110100 j"
b1110000000000000000000000000000110100 7#
b1110000000000000000000000000000110100 b#
b1110000000000000000000000000000110100 /$
b1110000000000000000000000000000110100 Z$
b1110000000000000000000000000000110100 '%
b1110000000000000000000000000000110100 R%
b1110000000000000000000000000000110100 }%
b1110000000000000000000000000000110100 K&
b1110000000000000000000000000000110100 }&
b1111 (&
b0 *&
b1111 '&
b0 )&
b1111 A&
b0 B&
b1000 @&
b100110000000000000000000000000000110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ?&
b1111 C&
b0 D&
b0 .&
b0 -
b0 E
b0 U
b1111 0
b1111 I
b1111 {
b1111 m"
b1111 :#
b1111 e#
b1111 2$
b1111 ]$
b1111 *%
b1111 U%
b1111 "&
b1111 O&
b1111 #'
b0 3
b0 L
b0 X
b0 }
b0 p"
b0 =#
b0 h#
b0 5$
b0 `$
b0 -%
b0 X%
b0 %&
b0 S&
b0 ''
b1010 -&
#1052
bz .&
bz -
bz E
bz U
bx 0
bx I
bx {
bx m"
bx :#
bx e#
bx 2$
bx ]$
bx *%
bx U%
bx "&
bx O&
bx #'
bx 3
bx L
bx X
bx }
bx p"
bx =#
bx h#
bx 5$
bx `$
bx -%
bx X%
bx %&
bx S&
bx ''
#1054
0|"
b10 *
b10 a
b10 o"
b10 <#
b10 g#
b10 4$
b10 _$
b10 ,%
b10 W%
b10 $&
b10 Q&
b10 %'
#1055
b110 N"
b10000 d
b10000 #
b10000 v
b10000 f"
b10000 3#
b10000 ^#
b10000 +$
b10000 V$
b10000 #%
b10000 N%
b10000 y%
b10000 F&
b10000 x&
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 c
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 "
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 u
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 e"
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 2#
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ]#
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 *$
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 U$
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 "%
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 M%
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 x%
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 E&
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 w&
b111 k
b111 f
b0 s
0l
b10 m
b0 n
b0 o
b0 g
b1110000000000000000000000000000110100 e
b1111 q
b1111 j
b1001 i
b1111111101011111111111111111111101001111 h
b10 p
b10000 r
b110 1"
b110 O"
b110 T"
b10100101000000000000000000000000 K"
b10100101000000000000000000000000 S"
b110 ("
b110 >"
b101 ?"
0A
0C
#1056
b1111 D#
b1111111101011111111111111111111111111111 '
b1111111101011111111111111111111111111111 ^
b1111111101011111111111111111111111111111 h"
b1111111101011111111111111111111111111111 5#
b1111111101011111111111111111111111111111 `#
b1111111101011111111111111111111111111111 -$
b1111111101011111111111111111111111111111 X$
b1111111101011111111111111111111111111111 %%
b1111111101011111111111111111111111111111 P%
b1111111101011111111111111111111111111111 {%
b1111111101011111111111111111111111111111 H&
b1111111101011111111111111111111111111111 z&
#1060
b1000 '"
b1000 @
b1000 Q
b1000 :"
b1000 >
b1000 O
b1000 Z
b11100 4"
b11100 6
b11100 N
b11100 [
b100 -"
b11100 E"
b100 D"
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 C"
0H"
b101 G"
b10000 F"
bx0110 ["
07"
0;
0,"
b1101 0"
b11010100100000000100000000011111 X"
0+&
b0 +
b0 w
b0 i"
b0 6#
b0 a#
b0 .$
b0 Y$
b0 &%
b0 Q%
b0 |%
b0 J&
b0 |&
11&
b10000010 *
b10000010 a
b10000010 o"
b10000010 <#
b10000010 g#
b10000010 4$
b10000010 _$
b10000010 ,%
b10000010 W%
b10000010 $&
b10000010 Q&
b10000010 %'
1<&
b10000 >&
b1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ;&
b0 :&
b1111 9&
18&
b100 >"
b11 ?"
b110 @"
b11 A"
1A
1C
#1061
b10100101000000000000000000000000 Q"
b10100101000000000000000000000000 y
#1064
0I#
b10000000 *
b10000000 a
b10000000 o"
b10000000 <#
b10000000 g#
b10000000 4$
b10000000 _$
b10000000 ,%
b10000000 W%
b10000000 $&
b10000000 Q&
b10000000 %'
#1065
b111 N"
b0 d
b0 #
b0 v
b0 f"
b0 3#
b0 ^#
b0 +$
b0 V$
b0 #%
b0 N%
b0 y%
b0 F&
b0 x&
b0 c
b0 "
b0 u
b0 e"
b0 2#
b0 ]#
b0 *$
b0 U$
b0 "%
b0 M%
b0 x%
b0 E&
b0 w&
b1001 i
b1111111111111111111111111111111111111111 h
b10 p
b0 r
b1111 ,&
b1111111111111111111111111111111111111111 '
b1111111111111111111111111111111111111111 ^
b1111111111111111111111111111111111111111 h"
b1111111111111111111111111111111111111111 5#
b1111111111111111111111111111111111111111 `#
b1111111111111111111111111111111111111111 -$
b1111111111111111111111111111111111111111 X$
b1111111111111111111111111111111111111111 %%
b1111111111111111111111111111111111111111 P%
b1111111111111111111111111111111111111111 {%
b1111111111111111111111111111111111111111 H&
b1111111111111111111111111111111111111111 z&
b111 1"
b111 O"
b111 T"
b11010101000000000110000000011101 K"
b11010101000000000110000000011101 S"
b111 ("
b111 >"
b110 ?"
0A
0C
#1070
08"
0<
06"
0:
b101 G"
b0 F"
bx0110 ["
b101 >"
b100 ?"
b111 @"
b100 A"
1A
1C
#1071
b11010101000000000110000000011101 Q"
b11010101000000000110000000011101 y
b101 ,&
b1111111101011111111111111111111111111111 '
b1111111101011111111111111111111111111111 ^
b1111111101011111111111111111111111111111 h"
b1111111101011111111111111111111111111111 5#
b1111111101011111111111111111111111111111 `#
b1111111101011111111111111111111111111111 -$
b1111111101011111111111111111111111111111 X$
b1111111101011111111111111111111111111111 %%
b1111111101011111111111111111111111111111 P%
b1111111101011111111111111111111111111111 {%
b1111111101011111111111111111111111111111 H&
b1111111101011111111111111111111111111111 z&
1+&
b10000000 +
b10000000 w
b10000000 i"
b10000000 6#
b10000000 a#
b10000000 .$
b10000000 Y$
b10000000 &%
b10000000 Q%
b10000000 |%
b10000000 J&
b10000000 |&
b101 '&
b101 A&
07&
b101 6&
b0 5&
b0 @&
b0 ?&
b101 C&
b0 .&
b0 -
b0 E
b0 U
b101 0
b101 I
b101 {
b101 m"
b101 :#
b101 e#
b101 2$
b101 ]$
b101 *%
b101 U%
b101 "&
b101 O&
b101 #'
b0 3
b0 L
b0 X
b0 }
b0 p"
b0 =#
b0 h#
b0 5$
b0 `$
b0 -%
b0 X%
b0 %&
b0 S&
b0 ''
#1072
01&
b0 *
b0 a
b0 o"
b0 <#
b0 g#
b0 4$
b0 _$
b0 ,%
b0 W%
b0 $&
b0 Q&
b0 %'
bz .&
bz -
bz E
bz U
bx 0
bx I
bx {
bx m"
bx :#
bx e#
bx 2$
bx ]$
bx *%
bx U%
bx "&
bx O&
bx #'
bx 3
bx L
bx X
bx }
bx p"
bx =#
bx h#
bx 5$
bx `$
bx -%
bx X%
bx %&
bx S&
bx ''
#1075
b1000 N"
b0 m
b1111 q
b1111 j
b1001 i
b1111111101011111111111111111111111111111 h
b10 p
b1000 1"
b1000 O"
b1000 T"
b10100101100000000000000000000000 K"
b10100101100000000000000000000000 S"
b1000 ("
b1000 >"
b111 ?"
0A
0C
#1080
08&
0<&
0=&
b0 >&
b0 ;&
b1111 9&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1000 @"
1A
1C
#1081
b10100101100000000000000000000000 Q"
b10100101100000000000000000000000 y
#1085
b1001 N"
b1111 q
b1111 j
b1001 i
b10 p
b1001 1"
b1001 O"
b1001 T"
b11010101100000000100000000011011 K"
b11010101100000000100000000011011 S"
b1001 ("
b1001 >"
b1000 ?"
0A
0C
#1090
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1001 @"
1A
1C
#1091
b11010101100000000100000000011011 Q"
b11010101100000000100000000011011 y
#1095
b1010 N"
b1111 q
b1111 j
b1001 i
b10 p
b1010 1"
b1010 O"
b1010 T"
b1110110001001000000000000001100 K"
b1110110001001000000000000001100 S"
b1010 ("
b1010 >"
b1001 ?"
0A
0C
#1100
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1010 @"
1A
1C
#1101
b1110110001001000000000000001100 Q"
b1110110001001000000000000001100 y
#1105
b1011 N"
b1111 q
b1111 j
b1001 i
b10 p
b1011 1"
b1011 O"
b1011 T"
b10110000110011000000000000000 K"
b10110000110011000000000000000 S"
b1011 ("
b1011 >"
b1010 ?"
0A
0C
#1110
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1011 @"
1A
1C
#1111
b10110000110011000000000000000 Q"
b10110000110011000000000000000 y
#1115
b1100 N"
b1111 q
b1111 j
b1001 i
b10 p
b1100 1"
b1100 O"
b1100 T"
b1110110101010000000000000000100 K"
b1110110101010000000000000000100 S"
b1100 ("
b1100 >"
b1011 ?"
0A
0C
#1120
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1100 @"
1A
1C
#1121
b1110110101010000000000000000100 Q"
b1110110101010000000000000000100 y
#1125
b1101 N"
b1111 q
b1111 j
b1001 i
b10 p
b1101 1"
b1101 O"
b1101 T"
b1110111001010000000000000001000 K"
b1110111001010000000000000001000 S"
b1101 ("
b1101 >"
b1100 ?"
0A
0C
#1130
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1101 @"
1A
1C
#1131
b1110111001010000000000000001000 Q"
b1110111001010000000000000001000 y
#1135
b1110 N"
b1111 q
b1111 j
b1001 i
b10 p
b1110 1"
b1110 O"
b1110 T"
b10111000111011100000000000000 K"
b10111000111011100000000000000 S"
b1110 ("
b1110 >"
b1101 ?"
0A
0C
#1140
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1110 @"
1A
1C
#1141
b10111000111011100000000000000 Q"
b10111000111011100000000000000 y
#1145
b1111 N"
b1111 q
b1111 j
b1001 i
b10 p
b1111 1"
b1111 O"
b1111 T"
b1110111101011000000000000000100 K"
b1110111101011000000000000000100 S"
b0 ("
b0 >"
b1110 ?"
0A
0C
#1150
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b0 @"
1A
1C
#1151
b1110111101011000000000000000100 Q"
b1110111101011000000000000000100 y
#1155
b0 N"
b1 J"
b
b
b10000 U"
b1111 q
b1111 j
b1001 i
b10 p
b10000 1"
b10000 O"
b10000 T"
b111101101110011110000000000000 K"
b111101101110011110000000000000 S"
b1 ("
b1 >"
b0 ?"
0A
0C
#1160
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
b1 @"
1A
1C
#1161
b111101101110011110000000000000 Q"
b111101101110011110000000000000 y
0P"
0x
#1165
b1111 q
b1111 j
b1001 i
b10 p
0A
0C
#1170
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
1A
1C
#1171
1P"
1x
#1175
b1111 q
b1111 j
b1001 i
b10 p
0A
0C
#1180
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
1A
1C
#1185
b1111 q
b1111 j
b1001 i
b10 p
0A
0C
#1190
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
1A
1C
#1195
b1111 q
b1111 j
b1001 i
b10 p
0A
0C
#1200
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
1A
1C
#1205
b1111 q
b1111 j
b1001 i
b10 p
0A
0C
#1210
0<&
b1111 9&
08&
b101 G"
bx0110 ["
b101 >"
b100 ?"
1A
1C
