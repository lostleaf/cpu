$date
	Fri Jun 14 12:24:06 2013
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module CPU $end
$var wire 480 ! CDB_data_addr [479:0] $end
$var wire 480 " CDB_data_data [479:0] $end
$var wire 15 # CDB_data_valid [14:0] $end
$var wire 4 $ CDB_inst_RBindex [3:0] $end
$var wire 4 % CDB_inst_fu [3:0] $end
$var wire 32 & CDB_inst_inst [31:0] $end
$var wire 40 ' FU_RB_index_bus [39:0] $end
$var wire 64 ( FU_addr_bus [63:0] $end
$var wire 320 ) FU_data_bus [319:0] $end
$var wire 10 * FU_valid_bus [9:0] $end
$var wire 10 + busy [9:0] $end
$var wire 32 , inst [31:0] $end
$var wire 5 - numi [4:0] $end
$var wire 5 . numj [4:0] $end
$var wire 5 / numk [4:0] $end
$var wire 4 0 qi [3:0] $end
$var wire 4 1 qj [3:0] $end
$var wire 4 2 qk [3:0] $end
$var wire 32 3 vi [31:0] $end
$var wire 32 4 vj [31:0] $end
$var wire 32 5 vk [31:0] $end
$var reg 4 6 RBindex [3:0] $end
$var reg 1 7 clk $end
$var reg 4 8 fu [3:0] $end
$var reg 4 9 op [3:0] $end
$var reg 5 : rd [4:0] $end
$var reg 1 ; reset $end
$var reg 5 < rs [4:0] $end
$var reg 5 = rt [4:0] $end
$var reg 32 > wd_reg [31:0] $end
$var reg 4 ? wd_status [3:0] $end
$var reg 1 @ we_reg $end
$var reg 1 A we_status $end
$var reg 10 B write [9:0] $end
$var reg 5 C ws_reg [4:0] $end
$var reg 5 D ws_status [4:0] $end
$scope module status $end
$var wire 1 E clk $end
$var wire 5 F get_num1 [4:0] $end
$var wire 5 G get_num2 [4:0] $end
$var wire 5 H get_num3 [4:0] $end
$var wire 1 I reset $end
$var wire 4 J status1 [3:0] $end
$var wire 4 K status2 [3:0] $end
$var wire 4 L status3 [3:0] $end
$var wire 32 M value1 [31:0] $end
$var wire 32 N value2 [31:0] $end
$var wire 32 O value3 [31:0] $end
$var wire 32 P write_reg_data [31:0] $end
$var wire 1 Q write_reg_enable $end
$var wire 5 R write_reg_src [4:0] $end
$var wire 1 S write_rs_enable $end
$var wire 5 T write_rs_src [4:0] $end
$var wire 4 U write_rs_status [3:0] $end
$scope module registers $end
$var wire 1 E clk $end
$var wire 5 V get_num1 [4:0] $end
$var wire 5 W get_num2 [4:0] $end
$var wire 5 X get_num3 [4:0] $end
$var wire 32 Y out1 [31:0] $end
$var wire 32 Z out2 [31:0] $end
$var wire 32 [ out3 [31:0] $end
$var wire 1 I reset_enable $end
$var wire 1 Q set_enable $end
$var wire 5 \ set_num [4:0] $end
$var wire 32 ] set_val [31:0] $end
$var reg 6 ^ i [5:0] $end
$upscope $end
$scope begin rs $end
$var reg 32 _ i [31:0] $end
$upscope $end
$upscope $end
$scope module data_ctrl $end
$var wire 40 ` RB_index_bus [39:0] $end
$var wire 64 a addr_bus [63:0] $end
$var wire 1 E clk $end
$var wire 320 b data_bus [319:0] $end
$var wire 1 I reset $end
$var wire 10 c valid_bus [9:0] $end
$var reg 480 d CDB_data_addr [479:0] $end
$var reg 480 e CDB_data_data [479:0] $end
$var reg 15 f CDB_data_valid [14:0] $end
$scope function readData $end
$var reg 320 g data_bus [319:0] $end
$var reg 32 h fuindex [31:0] $end
$var reg 32 i readData [31:0] $end
$upscope $end
$scope function readIndex $end
$var reg 40 j RB_index_bus [39:0] $end
$var reg 32 k fuindex [31:0] $end
$var reg 4 l readIndex [3:0] $end
$upscope $end
$scope function readValid $end
$var reg 32 m fuindex [31:0] $end
$var reg 1 n readValid $end
$var reg 10 o valid_bus [9:0] $end
$upscope $end
$scope begin setCDB $end
$var reg 480 p data [479:0] $end
$var reg 480 q data_each [479:0] $end
$var reg 32 r i [31:0] $end
$var reg 4 s index [3:0] $end
$var reg 15 t valid [14:0] $end
$var reg 15 u valid_each [14:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[0] $end
$var wire 480 v CDB_data_data [479:0] $end
$var wire 15 w CDB_data_valid [14:0] $end
$var wire 4 x RB_index [3:0] $end
$var wire 40 y RB_index_bus [39:0] $end
$var wire 10 z busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 { data_bus [319:0] $end
$var wire 4 | fu [3:0] $end
$var wire 32 } inst [31:0] $end
$var wire 4 ~ qj [3:0] $end
$var wire 4 !" qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 "" valid_bus [9:0] $end
$var wire 32 #" vj [31:0] $end
$var wire 32 $" vk [31:0] $end
$var reg 4 %" Qj [3:0] $end
$var reg 4 &" Qk [3:0] $end
$var reg 32 '" Vj [31:0] $end
$var reg 32 (" Vk [31:0] $end
$var reg 1 )" busy $end
$var reg 4 *" dest [3:0] $end
$var reg 4 +" op [3:0] $end
$var reg 5 ," reg_numj [4:0] $end
$var reg 5 -" reg_numk [4:0] $end
$var reg 32 ." result [31:0] $end
$var reg 1 /" valid $end
$scope function readDataBus $end
$var reg 480 0" CDB_data_data [479:0] $end
$var reg 4 1" index [3:0] $end
$var reg 32 2" readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 3" CDB_data_valid [14:0] $end
$var reg 4 4" index [3:0] $end
$var reg 1 5" readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 6" ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 7" Q [3:0] $end
$var reg 32 8" V [31:0] $end
$var reg 480 9" dataBus [479:0] $end
$var reg 1 :" ok $end
$var reg 1 ;" valid $end
$var reg 15 <" validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 =" CDB_data_data [479:0] $end
$var reg 15 >" CDB_data_valid [14:0] $end
$var reg 4 ?" Q [3:0] $end
$var reg 32 @" V [31:0] $end
$var reg 4 A" q [3:0] $end
$var reg 32 B" v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[1] $end
$var wire 480 C" CDB_data_data [479:0] $end
$var wire 15 D" CDB_data_valid [14:0] $end
$var wire 4 E" RB_index [3:0] $end
$var wire 40 F" RB_index_bus [39:0] $end
$var wire 10 G" busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 H" data_bus [319:0] $end
$var wire 4 I" fu [3:0] $end
$var wire 32 J" inst [31:0] $end
$var wire 4 K" qj [3:0] $end
$var wire 4 L" qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 M" valid_bus [9:0] $end
$var wire 32 N" vj [31:0] $end
$var wire 32 O" vk [31:0] $end
$var reg 4 P" Qj [3:0] $end
$var reg 4 Q" Qk [3:0] $end
$var reg 32 R" Vj [31:0] $end
$var reg 32 S" Vk [31:0] $end
$var reg 1 T" busy $end
$var reg 4 U" dest [3:0] $end
$var reg 4 V" op [3:0] $end
$var reg 5 W" reg_numj [4:0] $end
$var reg 5 X" reg_numk [4:0] $end
$var reg 32 Y" result [31:0] $end
$var reg 1 Z" valid $end
$scope function readDataBus $end
$var reg 480 [" CDB_data_data [479:0] $end
$var reg 4 \" index [3:0] $end
$var reg 32 ]" readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 ^" CDB_data_valid [14:0] $end
$var reg 4 _" index [3:0] $end
$var reg 1 `" readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 a" ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 b" Q [3:0] $end
$var reg 32 c" V [31:0] $end
$var reg 480 d" dataBus [479:0] $end
$var reg 1 e" ok $end
$var reg 1 f" valid $end
$var reg 15 g" validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 h" CDB_data_data [479:0] $end
$var reg 15 i" CDB_data_valid [14:0] $end
$var reg 4 j" Q [3:0] $end
$var reg 32 k" V [31:0] $end
$var reg 4 l" q [3:0] $end
$var reg 32 m" v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[2] $end
$var wire 480 n" CDB_data_data [479:0] $end
$var wire 15 o" CDB_data_valid [14:0] $end
$var wire 4 p" RB_index [3:0] $end
$var wire 40 q" RB_index_bus [39:0] $end
$var wire 10 r" busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 s" data_bus [319:0] $end
$var wire 4 t" fu [3:0] $end
$var wire 32 u" inst [31:0] $end
$var wire 4 v" qj [3:0] $end
$var wire 4 w" qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 x" valid_bus [9:0] $end
$var wire 32 y" vj [31:0] $end
$var wire 32 z" vk [31:0] $end
$var reg 4 {" Qj [3:0] $end
$var reg 4 |" Qk [3:0] $end
$var reg 32 }" Vj [31:0] $end
$var reg 32 ~" Vk [31:0] $end
$var reg 1 !# busy $end
$var reg 4 "# dest [3:0] $end
$var reg 4 ## op [3:0] $end
$var reg 5 $# reg_numj [4:0] $end
$var reg 5 %# reg_numk [4:0] $end
$var reg 32 &# result [31:0] $end
$var reg 1 '# valid $end
$scope function readDataBus $end
$var reg 480 (# CDB_data_data [479:0] $end
$var reg 4 )# index [3:0] $end
$var reg 32 *# readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 +# CDB_data_valid [14:0] $end
$var reg 4 ,# index [3:0] $end
$var reg 1 -# readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 .# ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 /# Q [3:0] $end
$var reg 32 0# V [31:0] $end
$var reg 480 1# dataBus [479:0] $end
$var reg 1 2# ok $end
$var reg 1 3# valid $end
$var reg 15 4# validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 5# CDB_data_data [479:0] $end
$var reg 15 6# CDB_data_valid [14:0] $end
$var reg 4 7# Q [3:0] $end
$var reg 32 8# V [31:0] $end
$var reg 4 9# q [3:0] $end
$var reg 32 :# v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[3] $end
$var wire 480 ;# CDB_data_data [479:0] $end
$var wire 15 <# CDB_data_valid [14:0] $end
$var wire 4 =# RB_index [3:0] $end
$var wire 40 ># RB_index_bus [39:0] $end
$var wire 10 ?# busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 @# data_bus [319:0] $end
$var wire 4 A# fu [3:0] $end
$var wire 32 B# inst [31:0] $end
$var wire 4 C# qj [3:0] $end
$var wire 4 D# qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 E# valid_bus [9:0] $end
$var wire 32 F# vj [31:0] $end
$var wire 32 G# vk [31:0] $end
$var reg 4 H# Qj [3:0] $end
$var reg 4 I# Qk [3:0] $end
$var reg 32 J# Vj [31:0] $end
$var reg 32 K# Vk [31:0] $end
$var reg 1 L# busy $end
$var reg 4 M# dest [3:0] $end
$var reg 4 N# op [3:0] $end
$var reg 5 O# reg_numj [4:0] $end
$var reg 5 P# reg_numk [4:0] $end
$var reg 32 Q# result [31:0] $end
$var reg 1 R# valid $end
$scope function readDataBus $end
$var reg 480 S# CDB_data_data [479:0] $end
$var reg 4 T# index [3:0] $end
$var reg 32 U# readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 V# CDB_data_valid [14:0] $end
$var reg 4 W# index [3:0] $end
$var reg 1 X# readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 Y# ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 Z# Q [3:0] $end
$var reg 32 [# V [31:0] $end
$var reg 480 \# dataBus [479:0] $end
$var reg 1 ]# ok $end
$var reg 1 ^# valid $end
$var reg 15 _# validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 `# CDB_data_data [479:0] $end
$var reg 15 a# CDB_data_valid [14:0] $end
$var reg 4 b# Q [3:0] $end
$var reg 32 c# V [31:0] $end
$var reg 4 d# q [3:0] $end
$var reg 32 e# v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[4] $end
$var wire 480 f# CDB_data_data [479:0] $end
$var wire 15 g# CDB_data_valid [14:0] $end
$var wire 4 h# RB_index [3:0] $end
$var wire 40 i# RB_index_bus [39:0] $end
$var wire 10 j# busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 k# data_bus [319:0] $end
$var wire 4 l# fu [3:0] $end
$var wire 32 m# inst [31:0] $end
$var wire 4 n# qj [3:0] $end
$var wire 4 o# qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 p# valid_bus [9:0] $end
$var wire 32 q# vj [31:0] $end
$var wire 32 r# vk [31:0] $end
$var reg 4 s# Qj [3:0] $end
$var reg 4 t# Qk [3:0] $end
$var reg 32 u# Vj [31:0] $end
$var reg 32 v# Vk [31:0] $end
$var reg 1 w# busy $end
$var reg 4 x# dest [3:0] $end
$var reg 4 y# op [3:0] $end
$var reg 5 z# reg_numj [4:0] $end
$var reg 5 {# reg_numk [4:0] $end
$var reg 32 |# result [31:0] $end
$var reg 1 }# valid $end
$scope function readDataBus $end
$var reg 480 ~# CDB_data_data [479:0] $end
$var reg 4 !$ index [3:0] $end
$var reg 32 "$ readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 #$ CDB_data_valid [14:0] $end
$var reg 4 $$ index [3:0] $end
$var reg 1 %$ readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 &$ ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 '$ Q [3:0] $end
$var reg 32 ($ V [31:0] $end
$var reg 480 )$ dataBus [479:0] $end
$var reg 1 *$ ok $end
$var reg 1 +$ valid $end
$var reg 15 ,$ validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 -$ CDB_data_data [479:0] $end
$var reg 15 .$ CDB_data_valid [14:0] $end
$var reg 4 /$ Q [3:0] $end
$var reg 32 0$ V [31:0] $end
$var reg 4 1$ q [3:0] $end
$var reg 32 2$ v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[5] $end
$var wire 480 3$ CDB_data_data [479:0] $end
$var wire 15 4$ CDB_data_valid [14:0] $end
$var wire 4 5$ RB_index [3:0] $end
$var wire 40 6$ RB_index_bus [39:0] $end
$var wire 10 7$ busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 8$ data_bus [319:0] $end
$var wire 4 9$ fu [3:0] $end
$var wire 32 :$ inst [31:0] $end
$var wire 4 ;$ qj [3:0] $end
$var wire 4 <$ qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 =$ valid_bus [9:0] $end
$var wire 32 >$ vj [31:0] $end
$var wire 32 ?$ vk [31:0] $end
$var reg 4 @$ Qj [3:0] $end
$var reg 4 A$ Qk [3:0] $end
$var reg 32 B$ Vj [31:0] $end
$var reg 32 C$ Vk [31:0] $end
$var reg 1 D$ busy $end
$var reg 4 E$ dest [3:0] $end
$var reg 4 F$ op [3:0] $end
$var reg 5 G$ reg_numj [4:0] $end
$var reg 5 H$ reg_numk [4:0] $end
$var reg 32 I$ result [31:0] $end
$var reg 1 J$ valid $end
$scope function readDataBus $end
$var reg 480 K$ CDB_data_data [479:0] $end
$var reg 4 L$ index [3:0] $end
$var reg 32 M$ readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 N$ CDB_data_valid [14:0] $end
$var reg 4 O$ index [3:0] $end
$var reg 1 P$ readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 Q$ ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 R$ Q [3:0] $end
$var reg 32 S$ V [31:0] $end
$var reg 480 T$ dataBus [479:0] $end
$var reg 1 U$ ok $end
$var reg 1 V$ valid $end
$var reg 15 W$ validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 X$ CDB_data_data [479:0] $end
$var reg 15 Y$ CDB_data_valid [14:0] $end
$var reg 4 Z$ Q [3:0] $end
$var reg 32 [$ V [31:0] $end
$var reg 4 \$ q [3:0] $end
$var reg 32 ]$ v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[6] $end
$var wire 480 ^$ CDB_data_data [479:0] $end
$var wire 15 _$ CDB_data_valid [14:0] $end
$var wire 4 `$ RB_index [3:0] $end
$var wire 40 a$ RB_index_bus [39:0] $end
$var wire 10 b$ busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 c$ data_bus [319:0] $end
$var wire 4 d$ fu [3:0] $end
$var wire 32 e$ inst [31:0] $end
$var wire 4 f$ qj [3:0] $end
$var wire 4 g$ qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 h$ valid_bus [9:0] $end
$var wire 32 i$ vj [31:0] $end
$var wire 32 j$ vk [31:0] $end
$var reg 4 k$ Qj [3:0] $end
$var reg 4 l$ Qk [3:0] $end
$var reg 32 m$ Vj [31:0] $end
$var reg 32 n$ Vk [31:0] $end
$var reg 1 o$ busy $end
$var reg 4 p$ dest [3:0] $end
$var reg 4 q$ op [3:0] $end
$var reg 5 r$ reg_numj [4:0] $end
$var reg 5 s$ reg_numk [4:0] $end
$var reg 32 t$ result [31:0] $end
$var reg 1 u$ valid $end
$scope function readDataBus $end
$var reg 480 v$ CDB_data_data [479:0] $end
$var reg 4 w$ index [3:0] $end
$var reg 32 x$ readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 y$ CDB_data_valid [14:0] $end
$var reg 4 z$ index [3:0] $end
$var reg 1 {$ readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 |$ ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 }$ Q [3:0] $end
$var reg 32 ~$ V [31:0] $end
$var reg 480 !% dataBus [479:0] $end
$var reg 1 "% ok $end
$var reg 1 #% valid $end
$var reg 15 $% validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 %% CDB_data_data [479:0] $end
$var reg 15 &% CDB_data_valid [14:0] $end
$var reg 4 '% Q [3:0] $end
$var reg 32 (% V [31:0] $end
$var reg 4 )% q [3:0] $end
$var reg 32 *% v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[7] $end
$var wire 480 +% CDB_data_data [479:0] $end
$var wire 15 ,% CDB_data_valid [14:0] $end
$var wire 4 -% RB_index [3:0] $end
$var wire 40 .% RB_index_bus [39:0] $end
$var wire 10 /% busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 0% data_bus [319:0] $end
$var wire 4 1% fu [3:0] $end
$var wire 32 2% inst [31:0] $end
$var wire 4 3% qj [3:0] $end
$var wire 4 4% qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 5% valid_bus [9:0] $end
$var wire 32 6% vj [31:0] $end
$var wire 32 7% vk [31:0] $end
$var reg 4 8% Qj [3:0] $end
$var reg 4 9% Qk [3:0] $end
$var reg 32 :% Vj [31:0] $end
$var reg 32 ;% Vk [31:0] $end
$var reg 1 <% busy $end
$var reg 4 =% dest [3:0] $end
$var reg 4 >% op [3:0] $end
$var reg 5 ?% reg_numj [4:0] $end
$var reg 5 @% reg_numk [4:0] $end
$var reg 32 A% result [31:0] $end
$var reg 1 B% valid $end
$scope function readDataBus $end
$var reg 480 C% CDB_data_data [479:0] $end
$var reg 4 D% index [3:0] $end
$var reg 32 E% readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 F% CDB_data_valid [14:0] $end
$var reg 4 G% index [3:0] $end
$var reg 1 H% readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 I% ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 J% Q [3:0] $end
$var reg 32 K% V [31:0] $end
$var reg 480 L% dataBus [479:0] $end
$var reg 1 M% ok $end
$var reg 1 N% valid $end
$var reg 15 O% validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 P% CDB_data_data [479:0] $end
$var reg 15 Q% CDB_data_valid [14:0] $end
$var reg 4 R% Q [3:0] $end
$var reg 32 S% V [31:0] $end
$var reg 4 T% q [3:0] $end
$var reg 32 U% v [31:0] $end
$upscope $end
$upscope $end
$scope module store_rs[0] $end
$var wire 480 V% CDB_data_data [479:0] $end
$var wire 15 W% CDB_data_valid [14:0] $end
$var wire 4 X% RB_index [3:0] $end
$var wire 40 Y% RB_index_bus [39:0] $end
$var wire 64 Z% addr_bus [63:0] $end
$var wire 10 [% busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 \% data_bus [319:0] $end
$var wire 4 ]% fu [3:0] $end
$var wire 32 ^% inst [31:0] $end
$var wire 4 _% qi [3:0] $end
$var wire 4 `% qj [3:0] $end
$var wire 4 a% qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 b% valid_bus [9:0] $end
$var wire 32 c% vi [31:0] $end
$var wire 32 d% vj [31:0] $end
$var wire 32 e% vk [31:0] $end
$var reg 4 f% Qi [3:0] $end
$var reg 4 g% Qj [3:0] $end
$var reg 4 h% Qk [3:0] $end
$var reg 32 i% Vi [31:0] $end
$var reg 32 j% Vj [31:0] $end
$var reg 32 k% Vk [31:0] $end
$var reg 1 l% busy $end
$var reg 32 m% data [31:0] $end
$var reg 4 n% dest [3:0] $end
$var reg 4 o% op [3:0] $end
$var reg 5 p% reg_numi [4:0] $end
$var reg 5 q% reg_numj [4:0] $end
$var reg 5 r% reg_numk [4:0] $end
$var reg 32 s% result [31:0] $end
$var reg 1 t% valid $end
$scope function readDataBus $end
$var reg 480 u% CDB_data_data [479:0] $end
$var reg 4 v% index [3:0] $end
$var reg 32 w% readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 x% CDB_data_valid [14:0] $end
$var reg 4 y% index [3:0] $end
$var reg 1 z% readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 {% ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 |% Q [3:0] $end
$var reg 32 }% V [31:0] $end
$var reg 480 ~% dataBus [479:0] $end
$var reg 1 !& ok $end
$var reg 1 "& valid $end
$var reg 15 #& validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 $& CDB_data_data [479:0] $end
$var reg 15 %& CDB_data_valid [14:0] $end
$var reg 4 && Q [3:0] $end
$var reg 32 '& V [31:0] $end
$var reg 4 (& q [3:0] $end
$var reg 32 )& v [31:0] $end
$upscope $end
$upscope $end
$scope module store_rs[1] $end
$var wire 480 *& CDB_data_data [479:0] $end
$var wire 15 +& CDB_data_valid [14:0] $end
$var wire 4 ,& RB_index [3:0] $end
$var wire 40 -& RB_index_bus [39:0] $end
$var wire 64 .& addr_bus [63:0] $end
$var wire 10 /& busy_out [9:0] $end
$var wire 1 E clk $end
$var wire 320 0& data_bus [319:0] $end
$var wire 4 1& fu [3:0] $end
$var wire 32 2& inst [31:0] $end
$var wire 4 3& qi [3:0] $end
$var wire 4 4& qj [3:0] $end
$var wire 4 5& qk [3:0] $end
$var wire 1 I reset $end
$var wire 10 6& valid_bus [9:0] $end
$var wire 32 7& vi [31:0] $end
$var wire 32 8& vj [31:0] $end
$var wire 32 9& vk [31:0] $end
$var reg 4 :& Qi [3:0] $end
$var reg 4 ;& Qj [3:0] $end
$var reg 4 <& Qk [3:0] $end
$var reg 32 =& Vi [31:0] $end
$var reg 32 >& Vj [31:0] $end
$var reg 32 ?& Vk [31:0] $end
$var reg 1 @& busy $end
$var reg 32 A& data [31:0] $end
$var reg 4 B& dest [3:0] $end
$var reg 4 C& op [3:0] $end
$var reg 5 D& reg_numi [4:0] $end
$var reg 5 E& reg_numj [4:0] $end
$var reg 5 F& reg_numk [4:0] $end
$var reg 32 G& result [31:0] $end
$var reg 1 H& valid $end
$scope function readDataBus $end
$var reg 480 I& CDB_data_data [479:0] $end
$var reg 4 J& index [3:0] $end
$var reg 32 K& readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 L& CDB_data_valid [14:0] $end
$var reg 4 M& index [3:0] $end
$var reg 1 N& readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 O& ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 P& Q [3:0] $end
$var reg 32 Q& V [31:0] $end
$var reg 480 R& dataBus [479:0] $end
$var reg 1 S& ok $end
$var reg 1 T& valid $end
$var reg 15 U& validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 V& CDB_data_data [479:0] $end
$var reg 15 W& CDB_data_valid [14:0] $end
$var reg 4 X& Q [3:0] $end
$var reg 32 Y& V [31:0] $end
$var reg 4 Z& q [3:0] $end
$var reg 32 [& v [31:0] $end
$upscope $end
$upscope $end
$scope begin test $end
$var reg 32 \& i [31:0] $end
$upscope $end
$scope task setWrite $end
$var reg 1 ]& data $end
$var reg 4 ^& fu [3:0] $end
$var reg 10 _& longData [9:0] $end
$var reg 10 `& mask [9:0] $end
$var reg 10 a& write [9:0] $end
$upscope $end
$scope task setWriteBy $end
$var reg 4 b& fu [3:0] $end
$var reg 10 c& write [9:0] $end
$var reg 4 d& writeFU [3:0] $end
$upscope $end
$upscope $end
$scope module def_param $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx d&
bx c&
bx b&
bx a&
bx `&
bx _&
bx ^&
x]&
b1111 \&
bx [&
bx Z&
bx Y&
bx X&
bx W&
bx V&
bx U&
xT&
xS&
bx R&
bx Q&
bx P&
xO&
xN&
bx M&
bx L&
bx K&
bx J&
bx I&
0H&
b0 G&
bz F&
bz E&
bz D&
bx C&
b1111 B&
b0 A&
0@&
bx ?&
bx >&
bx =&
bx <&
bx ;&
bx :&
bx 9&
bx 8&
bx 7&
b0 6&
bx 5&
bx 4&
bx 3&
b101xxxxxxxxxxxxxxx0000000000000 2&
bx 1&
b0 0&
b0 /&
b0 .&
b1111111111111111111111111111111111111111 -&
bx ,&
b0 +&
b0 *&
bx )&
bx (&
bx '&
bx &&
bx %&
bx $&
bx #&
x"&
x!&
bx ~%
bx }%
bx |%
x{%
xz%
bx y%
bx x%
bx w%
bx v%
bx u%
0t%
b0 s%
bz r%
bz q%
bz p%
bx o%
b1111 n%
b0 m%
0l%
bx k%
bx j%
bx i%
bx h%
bx g%
bx f%
bx e%
bx d%
bx c%
b0 b%
bx a%
bx `%
bx _%
b101xxxxxxxxxxxxxxx0000000000000 ^%
bx ]%
b0 \%
b0 [%
b0 Z%
b1111111111111111111111111111111111111111 Y%
bx X%
b0 W%
b0 V%
bx U%
bx T%
bx S%
bx R%
bx Q%
bx P%
bx O%
xN%
xM%
bx L%
bx K%
bx J%
xI%
xH%
bx G%
bx F%
bx E%
bx D%
bx C%
0B%
b0 A%
bz @%
bz ?%
bx >%
b1111 =%
0<%
bx ;%
bx :%
bx 9%
bx 8%
bx 7%
bx 6%
b0 5%
bx 4%
bx 3%
b101xxxxxxxxxxxxxxx0000000000000 2%
bx 1%
b0 0%
b0 /%
b1111111111111111111111111111111111111111 .%
bx -%
b0 ,%
b0 +%
bx *%
bx )%
bx (%
bx '%
bx &%
bx %%
bx $%
x#%
x"%
bx !%
bx ~$
bx }$
x|$
x{$
bx z$
bx y$
bx x$
bx w$
bx v$
0u$
b0 t$
bz s$
bz r$
bx q$
b1111 p$
0o$
bx n$
bx m$
bx l$
bx k$
bx j$
bx i$
b0 h$
bx g$
bx f$
b101xxxxxxxxxxxxxxx0000000000000 e$
bx d$
b0 c$
b0 b$
b1111111111111111111111111111111111111111 a$
bx `$
b0 _$
b0 ^$
bx ]$
bx \$
bx [$
bx Z$
bx Y$
bx X$
bx W$
xV$
xU$
bx T$
bx S$
bx R$
xQ$
xP$
bx O$
bx N$
bx M$
bx L$
bx K$
0J$
b0 I$
bz H$
bz G$
bx F$
b1111 E$
0D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
b0 =$
bx <$
bx ;$
b101xxxxxxxxxxxxxxx0000000000000 :$
bx 9$
b0 8$
b0 7$
b1111111111111111111111111111111111111111 6$
bx 5$
b0 4$
b0 3$
bx 2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
x+$
x*$
bx )$
bx ($
bx '$
x&$
x%$
bx $$
bx #$
bx "$
bx !$
bx ~#
0}#
b0 |#
bz {#
bz z#
bx y#
b1111 x#
0w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
b0 p#
bx o#
bx n#
b101xxxxxxxxxxxxxxx0000000000000 m#
bx l#
b0 k#
b0 j#
b1111111111111111111111111111111111111111 i#
bx h#
b0 g#
b0 f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
x^#
x]#
bx \#
bx [#
bx Z#
xY#
xX#
bx W#
bx V#
bx U#
bx T#
bx S#
0R#
b0 Q#
bz P#
bz O#
bx N#
b1111 M#
0L#
bx K#
bx J#
bx I#
bx H#
bx G#
bx F#
b0 E#
bx D#
bx C#
b101xxxxxxxxxxxxxxx0000000000000 B#
bx A#
b0 @#
b0 ?#
b1111111111111111111111111111111111111111 >#
bx =#
b0 <#
b0 ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
x3#
x2#
bx 1#
bx 0#
bx /#
x.#
x-#
bx ,#
bx +#
bx *#
bx )#
bx (#
0'#
b0 &#
bz %#
bz $#
bx ##
b1111 "#
0!#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
b0 x"
bx w"
bx v"
b101xxxxxxxxxxxxxxx0000000000000 u"
bx t"
b0 s"
b0 r"
b1111111111111111111111111111111111111111 q"
bx p"
b0 o"
b0 n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
xf"
xe"
bx d"
bx c"
bx b"
xa"
x`"
bx _"
bx ^"
bx ]"
bx \"
bx ["
0Z"
b0 Y"
bz X"
bz W"
bx V"
b1111 U"
0T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
b0 M"
bx L"
bx K"
b101xxxxxxxxxxxxxxx0000000000000 J"
bx I"
b0 H"
b0 G"
b1111111111111111111111111111111111111111 F"
bx E"
b0 D"
b0 C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
x;"
x:"
bx 9"
bx 8"
bx 7"
x6"
x5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
0/"
b0 ."
bz -"
bz ,"
bx +"
b1111 *"
0)"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
b0 ""
bx !"
bx ~
b101xxxxxxxxxxxxxxx0000000000000 }
bx |
b0 {
b0 z
b1111111111111111111111111111111111111111 y
bx x
b0 w
b0 v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
xn
bx m
bx l
bx k
bx j
bx i
bx h
bx g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b1111111111111111111111111111111111111111 `
b100000 _
b100000 ^
bx ]
bx \
bx [
bx Z
bx Y
bz X
bz W
bz V
bx U
bx T
xS
bx R
xQ
bx P
bx O
bx N
bx M
bx L
bx K
bx J
1I
bz H
bz G
bz F
xE
bx D
bx C
b0 B
xA
x@
bx ?
bx >
bx =
bx <
1;
bx :
b101 9
bx 8
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bz /
bz .
bz -
b101xxxxxxxxxxxxxxx0000000000000 ,
b0 +
b0 *
b0 )
b0 (
b1111111111111111111111111111111111111111 '
b101xxxxxxxxxxxxxxx0000000000000 &
bx %
bx $
b0 #
b0 "
b0 !
$end
#5
b100000 ^
07
0E
#10
17
1E
b0 \&
0;
0I
#15
b1111 s
b1111 l
b1001 k
b1111111111111111111111111111111111111111 j
b10 r
b0 t
b0 p
07
0E
#20
17
1E
b1 \&
b0 >
b0 P
b0 ]
b0 C
b0 R
b0 \
1@
1Q
#25
b1001 k
b10 r
07
0E
#30
17
1E
b10 \&
b1 >
b1 P
b1 ]
b1 C
b1 R
b1 \
#35
b1001 k
b10 r
07
0E
#40
17
1E
b11 \&
b10 >
b10 P
b10 ]
b10 C
b10 R
b10 \
#45
b1001 k
b10 r
07
0E
#50
17
1E
b100 \&
b11 >
b11 P
b11 ]
b11 C
b11 R
b11 \
#55
b1001 k
b10 r
07
0E
#60
17
1E
b101 \&
b100 >
b100 P
b100 ]
b100 C
b100 R
b100 \
#65
b1001 k
b10 r
07
0E
#70
17
1E
b110 \&
b101 >
b101 P
b101 ]
b101 C
b101 R
b101 \
#75
b1001 k
b10 r
07
0E
#80
17
1E
b111 \&
b110 >
b110 P
b110 ]
b110 C
b110 R
b110 \
#85
b1001 k
b10 r
07
0E
#90
17
1E
b1000 \&
b111 >
b111 P
b111 ]
b111 C
b111 R
b111 \
#95
b1001 k
b10 r
07
0E
#100
17
1E
b1001 \&
b1000 >
b1000 P
b1000 ]
b1000 C
b1000 R
b1000 \
#105
b1001 k
b10 r
07
0E
#110
17
1E
b1010 \&
b1001 >
b1001 P
b1001 ]
b1001 C
b1001 R
b1001 \
#115
b1001 k
b10 r
07
0E
#120
17
1E
b1011 \&
b1010 >
b1010 P
b1010 ]
b1010 C
b1010 R
b1010 \
#125
b1001 k
b10 r
07
0E
#130
17
1E
b1100 \&
b1011 >
b1011 P
b1011 ]
b1011 C
b1011 R
b1011 \
#135
b1001 k
b10 r
07
0E
#140
17
1E
b1101 \&
b1100 >
b1100 P
b1100 ]
b1100 C
b1100 R
b1100 \
#145
b1001 k
b10 r
07
0E
#150
17
1E
b1110 \&
b1101 >
b1101 P
b1101 ]
b1101 C
b1101 R
b1101 \
#155
b1001 k
b10 r
07
0E
#160
17
1E
b1111 \&
b1110 >
b1110 P
b1110 ]
b1110 C
b1110 R
b1110 \
#165
b1001 k
b10 r
07
0E
#170
17
1E
b10000 \&
b1111 >
b1111 P
b1111 ]
b1111 C
b1111 R
b1111 \
#175
b1001 k
b10 r
07
0E
#180
17
1E
b10001 \&
b10000 >
b10000 P
b10000 ]
b10000 C
b10000 R
b10000 \
#185
b1001 k
b10 r
07
0E
#190
17
1E
b10010 \&
b10001 >
b10001 P
b10001 ]
b10001 C
b10001 R
b10001 \
#195
b1001 k
b10 r
07
0E
#200
17
1E
b10011 \&
b10010 >
b10010 P
b10010 ]
b10010 C
b10010 R
b10010 \
#205
b1001 k
b10 r
07
0E
#210
17
1E
b10100 \&
b10011 >
b10011 P
b10011 ]
b10011 C
b10011 R
b10011 \
#215
b1001 k
b10 r
07
0E
#220
17
1E
b10101 \&
b10100 >
b10100 P
b10100 ]
b10100 C
b10100 R
b10100 \
#225
b1001 k
b10 r
07
0E
#230
17
1E
b10110 \&
b10101 >
b10101 P
b10101 ]
b10101 C
b10101 R
b10101 \
#235
b1001 k
b10 r
07
0E
#240
17
1E
b10111 \&
b10110 >
b10110 P
b10110 ]
b10110 C
b10110 R
b10110 \
#245
b1001 k
b10 r
07
0E
#250
17
1E
b11000 \&
b10111 >
b10111 P
b10111 ]
b10111 C
b10111 R
b10111 \
#255
b1001 k
b10 r
07
0E
#260
17
1E
b11001 \&
b11000 >
b11000 P
b11000 ]
b11000 C
b11000 R
b11000 \
#265
b1001 k
b10 r
07
0E
#270
17
1E
b11010 \&
b11001 >
b11001 P
b11001 ]
b11001 C
b11001 R
b11001 \
#275
b1001 k
b10 r
07
0E
#280
17
1E
b11011 \&
b11010 >
b11010 P
b11010 ]
b11010 C
b11010 R
b11010 \
#285
b1001 k
b10 r
07
0E
#290
17
1E
b11100 \&
b11011 >
b11011 P
b11011 ]
b11011 C
b11011 R
b11011 \
#295
b1001 k
b10 r
07
0E
#300
17
1E
b11101 \&
b11100 >
b11100 P
b11100 ]
b11100 C
b11100 R
b11100 \
#305
b1001 k
b10 r
07
0E
#310
17
1E
b11110 \&
b11101 >
b11101 P
b11101 ]
b11101 C
b11101 R
b11101 \
#315
b1001 k
b10 r
07
0E
#320
17
1E
b11111 \&
b11110 >
b11110 P
b11110 ]
b11110 C
b11110 R
b11110 \
#325
b1001 k
b10 r
07
0E
#330
17
1E
b10 =
b1 :
b0 <
b1010000000001000100000000000000 ,
b1010000000001000100000000000000 &
b1010000000001000100000000000000 }
b1010000000001000100000000000000 J"
b1010000000001000100000000000000 u"
b1010000000001000100000000000000 B#
b1010000000001000100000000000000 m#
b1010000000001000100000000000000 :$
b1010000000001000100000000000000 e$
b1010000000001000100000000000000 2%
b1010000000001000100000000000000 ^%
b1010000000001000100000000000000 2&
b100000 \&
b11111 >
b11111 P
b11111 ]
b11111 C
b11111 R
b11111 \
#335
b1001 k
b10 r
07
0E
#340
17
1E
b11 =
b1 <
b1010000100001000110000000000000 ,
b1010000100001000110000000000000 &
b1010000100001000110000000000000 }
b1010000100001000110000000000000 J"
b1010000100001000110000000000000 u"
b1010000100001000110000000000000 B#
b1010000100001000110000000000000 m#
b1010000100001000110000000000000 :$
b1010000100001000110000000000000 e$
b1010000100001000110000000000000 2%
b1010000100001000110000000000000 ^%
b1010000100001000110000000000000 2&
b0 6
b0 $
b0 x
b0 E"
b0 p"
b0 =#
b0 h#
b0 5$
b0 `$
b0 -%
b0 X%
b0 ,&
b0 8
b0 %
b0 |
b0 I"
b0 t"
b0 A#
b0 l#
b0 9$
b0 d$
b0 1%
b0 ]%
b0 1&
b0 \&
#341
b0 *"
b1111111111111111111111111111111111110000 '
b1111111111111111111111111111111111110000 `
b1111111111111111111111111111111111110000 y
b1111111111111111111111111111111111110000 F"
b1111111111111111111111111111111111110000 q"
b1111111111111111111111111111111111110000 >#
b1111111111111111111111111111111111110000 i#
b1111111111111111111111111111111111110000 6$
b1111111111111111111111111111111111110000 a$
b1111111111111111111111111111111111110000 .%
b1111111111111111111111111111111111110000 Y%
b1111111111111111111111111111111111110000 -&
1)"
b1 +
b1 z
b1 G"
b1 r"
b1 ?#
b1 j#
b1 7$
b1 b$
b1 /%
b1 [%
b1 /&
b1111 &"
b110000000000000 ("
b1111 %"
b1 '"
b1111 ?"
b1 @"
b0 >"
b0 ="
b1111 A"
b1 B"
b1 ,"
b1 .
b1 G
b1 W
b1111 1
b1111 K
b1111 ~
b1111 K"
b1111 v"
b1111 C#
b1111 n#
b1111 ;$
b1111 f$
b1111 3%
b1111 `%
b1111 4&
b1 4
b1 N
b1 Z
b1 #"
b1 N"
b1 y"
b1 F#
b1 q#
b1 >$
b1 i$
b1 6%
b1 d%
b1 8&
b101 +"
#342
bz ,"
bz .
bz G
bz W
bx 1
bx K
bx ~
bx K"
bx v"
bx C#
bx n#
bx ;$
bx f$
bx 3%
bx `%
bx 4&
bx 4
bx N
bx Z
bx #"
bx N"
bx y"
bx F#
bx q#
bx >$
bx i$
bx 6%
bx d%
bx 8&
#345
b0 u
0n
b0 m
b0 o
b0 q
b0 i
b0 h
b0 g
b1111 s
b1111 l
b1001 k
b1111111111111111111111111111111111110000 j
b10 r
07
0E
#350
1:"
b0 <"
b0 9"
b110000000000000 8"
b1111 7"
16"
17
1E
b100 =
b10 <
b1010001000001001000000000000000 ,
b1010001000001001000000000000000 &
b1010001000001001000000000000000 }
b1010001000001001000000000000000 J"
b1010001000001001000000000000000 u"
b1010001000001001000000000000000 B#
b1010001000001001000000000000000 m#
b1010001000001001000000000000000 :$
b1010001000001001000000000000000 e$
b1010001000001001000000000000000 2%
b1010001000001001000000000000000 ^%
b1010001000001001000000000000000 2&
b1 6
b1 $
b1 x
b1 E"
b1 p"
b1 =#
b1 h#
b1 5$
b1 `$
b1 -%
b1 X%
b1 ,&
b1 8
b1 %
b1 |
b1 I"
b1 t"
b1 A#
b1 l#
b1 9$
b1 d$
b1 1%
b1 ]%
b1 1&
b1 \&
#351
b1 U"
b1111111111111111111111111111111100010000 '
b1111111111111111111111111111111100010000 `
b1111111111111111111111111111111100010000 y
b1111111111111111111111111111111100010000 F"
b1111111111111111111111111111111100010000 q"
b1111111111111111111111111111111100010000 >#
b1111111111111111111111111111111100010000 i#
b1111111111111111111111111111111100010000 6$
b1111111111111111111111111111111100010000 a$
b1111111111111111111111111111111100010000 .%
b1111111111111111111111111111111100010000 Y%
b1111111111111111111111111111111100010000 -&
1T"
0)"
b10 +
b10 z
b10 G"
b10 r"
b10 ?#
b10 j#
b10 7$
b10 b$
b10 /%
b10 [%
b10 /&
1/"
b1 *
b1 c
b1 ""
b1 M"
b1 x"
b1 E#
b1 p#
b1 =$
b1 h$
b1 5%
b1 b%
b1 6&
b110000000000001 ."
b110000000000001 )
b110000000000001 b
b110000000000001 {
b110000000000001 H"
b110000000000001 s"
b110000000000001 @#
b110000000000001 k#
b110000000000001 8$
b110000000000001 c$
b110000000000001 0%
b110000000000001 \%
b110000000000001 0&
b1111 Q"
b1000000000000000 S"
b1111 P"
b10 R"
b1111 j"
b10 k"
b0 i"
b0 h"
b1111 l"
b10 m"
b10 W"
b10 .
b10 G
b10 W
b1111 1
b1111 K
b1111 ~
b1111 K"
b1111 v"
b1111 C#
b1111 n#
b1111 ;$
b1111 f$
b1111 3%
b1111 `%
b1111 4&
b10 4
b10 N
b10 Z
b10 #"
b10 N"
b10 y"
b10 F#
b10 q#
b10 >$
b10 i$
b10 6%
b10 d%
b10 8&
b101 V"
#352
bz W"
bz .
bz G
bz W
bx 1
bx K
bx ~
bx K"
bx v"
bx C#
bx n#
bx ;$
bx f$
bx 3%
bx `%
bx 4&
bx 4
bx N
bx Z
bx #"
bx N"
bx y"
bx F#
bx q#
bx >$
bx i$
bx 6%
bx d%
bx 8&
#355
b1 f
b1 #
b1 w
b1 D"
b1 o"
b1 <#
b1 g#
b1 4$
b1 _$
b1 ,%
b1 W%
b1 +&
b110000000000001 e
b110000000000001 "
b110000000000001 v
b110000000000001 C"
b110000000000001 n"
b110000000000001 ;#
b110000000000001 f#
b110000000000001 3$
b110000000000001 ^$
b110000000000001 +%
b110000000000001 V%
b110000000000001 *&
b1 m
b1 h
b1 t
b0 u
0n
b1 o
b0 p
b0 q
b0 i
b110000000000001 g
b1111 s
b1111 l
b1001 k
b1111111111111111111111111111111100010000 j
b10 r
07
0E
#360
1e"
b1 g"
b110000000000001 d"
b1000000000000000 c"
b1111 b"
1a"
17
1E
b101 =
b11 <
b1010001100001001010000000000000 ,
b1010001100001001010000000000000 &
b1010001100001001010000000000000 }
b1010001100001001010000000000000 J"
b1010001100001001010000000000000 u"
b1010001100001001010000000000000 B#
b1010001100001001010000000000000 m#
b1010001100001001010000000000000 :$
b1010001100001001010000000000000 e$
b1010001100001001010000000000000 2%
b1010001100001001010000000000000 ^%
b1010001100001001010000000000000 2&
b10 6
b10 $
b10 x
b10 E"
b10 p"
b10 =#
b10 h#
b10 5$
b10 `$
b10 -%
b10 X%
b10 ,&
b10 8
b10 %
b10 |
b10 I"
b10 t"
b10 A#
b10 l#
b10 9$
b10 d$
b10 1%
b10 ]%
b10 1&
b10 \&
#361
b10 "#
b1111111111111111111111111111001000010000 '
b1111111111111111111111111111001000010000 `
b1111111111111111111111111111001000010000 y
b1111111111111111111111111111001000010000 F"
b1111111111111111111111111111001000010000 q"
b1111111111111111111111111111001000010000 >#
b1111111111111111111111111111001000010000 i#
b1111111111111111111111111111001000010000 6$
b1111111111111111111111111111001000010000 a$
b1111111111111111111111111111001000010000 .%
b1111111111111111111111111111001000010000 Y%
b1111111111111111111111111111001000010000 -&
1!#
0T"
b100 +
b100 z
b100 G"
b100 r"
b100 ?#
b100 j#
b100 7$
b100 b$
b100 /%
b100 [%
b100 /&
1Z"
b11 *
b11 c
b11 ""
b11 M"
b11 x"
b11 E#
b11 p#
b11 =$
b11 h$
b11 5%
b11 b%
b11 6&
b1000000000000010 Y"
b100000000000001000000000000000000110000000000001 )
b100000000000001000000000000000000110000000000001 b
b100000000000001000000000000000000110000000000001 {
b100000000000001000000000000000000110000000000001 H"
b100000000000001000000000000000000110000000000001 s"
b100000000000001000000000000000000110000000000001 @#
b100000000000001000000000000000000110000000000001 k#
b100000000000001000000000000000000110000000000001 8$
b100000000000001000000000000000000110000000000001 c$
b100000000000001000000000000000000110000000000001 0%
b100000000000001000000000000000000110000000000001 \%
b100000000000001000000000000000000110000000000001 0&
b1111 |"
b1010000000000000 ~"
b1111 {"
b11 }"
b1111 7#
b11 8#
b1 6#
b110000000000001 5#
b1111 9#
b11 :#
b11 $#
b11 .
b11 G
b11 W
b1111 1
b1111 K
b1111 ~
b1111 K"
b1111 v"
b1111 C#
b1111 n#
b1111 ;$
b1111 f$
b1111 3%
b1111 `%
b1111 4&
b11 4
b11 N
b11 Z
b11 #"
b11 N"
b11 y"
b11 F#
b11 q#
b11 >$
b11 i$
b11 6%
b11 d%
b11 8&
b101 ##
#362
bz $#
bz .
bz G
bz W
bx 1
bx K
bx ~
bx K"
bx v"
bx C#
bx n#
bx ;$
bx f$
bx 3%
bx `%
bx 4&
bx 4
bx N
bx Z
bx #"
bx N"
bx y"
bx F#
bx q#
bx >$
bx i$
bx 6%
bx d%
bx 8&
#364
b1111 *"
b1111111111111111111111111111001000011111 '
b1111111111111111111111111111001000011111 `
b1111111111111111111111111111001000011111 y
b1111111111111111111111111111001000011111 F"
b1111111111111111111111111111001000011111 q"
b1111111111111111111111111111001000011111 >#
b1111111111111111111111111111001000011111 i#
b1111111111111111111111111111001000011111 6$
b1111111111111111111111111111001000011111 a$
b1111111111111111111111111111001000011111 .%
b1111111111111111111111111111001000011111 Y%
b1111111111111111111111111111001000011111 -&
0/"
b10 *
b10 c
b10 ""
b10 M"
b10 x"
b10 E#
b10 p#
b10 =$
b10 h$
b10 5%
b10 b%
b10 6&
#365
b10 f
b10 #
b10 w
b10 D"
b10 o"
b10 <#
b10 g#
b10 4$
b10 _$
b10 ,%
b10 W%
b10 +&
b100000000000001000000000000000000000000000000000 e
b100000000000001000000000000000000000000000000000 "
b100000000000001000000000000000000000000000000000 v
b100000000000001000000000000000000000000000000000 C"
b100000000000001000000000000000000000000000000000 n"
b100000000000001000000000000000000000000000000000 ;#
b100000000000001000000000000000000000000000000000 f#
b100000000000001000000000000000000000000000000000 3$
b100000000000001000000000000000000000000000000000 ^$
b100000000000001000000000000000000000000000000000 +%
b100000000000001000000000000000000000000000000000 V%
b100000000000001000000000000000000000000000000000 *&
b10 m
b10 h
b0 u
0n
b10 o
b0 p
b0 q
b0 i
b100000000000001000000000000000000110000000000001 g
b1111 s
b1111 l
b1001 k
b1111111111111111111111111111001000011111 j
b10 r
b10 t
07
0E
#370
12#
b10 4#
b100000000000001000000000000000000000000000000000 1#
b1010000000000000 0#
b1111 /#
1.#
17
1E
b11 \&
#371
0!#
b0 +
b0 z
b0 G"
b0 r"
b0 ?#
b0 j#
b0 7$
b0 b$
b0 /%
b0 [%
b0 /&
1'#
b110 *
b110 c
b110 ""
b110 M"
b110 x"
b110 E#
b110 p#
b110 =$
b110 h$
b110 5%
b110 b%
b110 6&
b1010000000000011 &#
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 )
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 b
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 {
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 H"
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 s"
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 @#
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 k#
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 8$
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 c$
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 0%
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 \%
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 0&
#374
b1111 U"
b1111111111111111111111111111001011111111 '
b1111111111111111111111111111001011111111 `
b1111111111111111111111111111001011111111 y
b1111111111111111111111111111001011111111 F"
b1111111111111111111111111111001011111111 q"
b1111111111111111111111111111001011111111 >#
b1111111111111111111111111111001011111111 i#
b1111111111111111111111111111001011111111 6$
b1111111111111111111111111111001011111111 a$
b1111111111111111111111111111001011111111 .%
b1111111111111111111111111111001011111111 Y%
b1111111111111111111111111111001011111111 -&
0Z"
b100 *
b100 c
b100 ""
b100 M"
b100 x"
b100 E#
b100 p#
b100 =$
b100 h$
b100 5%
b100 b%
b100 6&
#375
b100 f
b100 #
b100 w
b100 D"
b100 o"
b100 <#
b100 g#
b100 4$
b100 _$
b100 ,%
b100 W%
b100 +&
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 e
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 "
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 v
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 C"
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 n"
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 ;#
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 f#
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 3$
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 ^$
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 +%
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 V%
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 *&
b100 u
1n
b100 o
b0 p
b10100000000000110000000000000000000000000000000000000000000000000000000000000000 q
b1010000000000011 i
b10100000000000110000000000000000100000000000001000000000000000000110000000000001 g
b1111 s
b1111 l
b1001 k
b1111111111111111111111111111001011111111 j
b10 r
b100 t
07
0E
#380
17
1E
b1111 8
b1111 %
b1111 |
b1111 I"
b1111 t"
b1111 A#
b1111 l#
b1111 9$
b1111 d$
b1111 1%
b1111 ]%
b1111 1&
#384
b1111 "#
b1111111111111111111111111111111111111111 '
b1111111111111111111111111111111111111111 `
b1111111111111111111111111111111111111111 y
b1111111111111111111111111111111111111111 F"
b1111111111111111111111111111111111111111 q"
b1111111111111111111111111111111111111111 >#
b1111111111111111111111111111111111111111 i#
b1111111111111111111111111111111111111111 6$
b1111111111111111111111111111111111111111 a$
b1111111111111111111111111111111111111111 .%
b1111111111111111111111111111111111111111 Y%
b1111111111111111111111111111111111111111 -&
0'#
b0 *
b0 c
b0 ""
b0 M"
b0 x"
b0 E#
b0 p#
b0 =$
b0 h$
b0 5%
b0 b%
b0 6&
#385
b0 f
b0 #
b0 w
b0 D"
b0 o"
b0 <#
b0 g#
b0 4$
b0 _$
b0 ,%
b0 W%
b0 +&
b0 e
b0 "
b0 v
b0 C"
b0 n"
b0 ;#
b0 f#
b0 3$
b0 ^$
b0 +%
b0 V%
b0 *&
b1001 k
b1111111111111111111111111111111111111111 j
b10 r
b0 t
07
0E
#390
17
1E
#395
b1001 k
b10 r
07
0E
#400
17
1E
#405
b1001 k
b10 r
07
0E
#410
17
1E
#415
b1001 k
b10 r
07
0E
#420
17
1E
#425
b1001 k
b10 r
07
0E
#430
17
1E
