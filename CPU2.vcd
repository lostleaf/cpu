$date
	Fri Jun 14 20:59:33 2013
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module CPU $end
$var wire 480 ! CDB_data_addr [479:0] $end
$var wire 480 " CDB_data_data [479:0] $end
$var wire 15 # CDB_data_valid [14:0] $end
$var wire 4 $ CDB_inst_RBindex [3:0] $end
$var wire 4 % CDB_inst_fu [3:0] $end
$var wire 32 & CDB_inst_inst [31:0] $end
$var wire 40 ' FU_RB_index_bus [39:0] $end
$var wire 64 ( FU_addr_bus [63:0] $end
$var wire 320 ) FU_data_bus [319:0] $end
$var wire 10 * FU_valid_bus [9:0] $end
$var wire 10 + busy [9:0] $end
$var wire 5 , numi [4:0] $end
$var wire 5 - numj [4:0] $end
$var wire 5 . numk [4:0] $end
$var wire 4 / qi [3:0] $end
$var wire 4 0 qj [3:0] $end
$var wire 4 1 qk [3:0] $end
$var wire 32 2 vi [31:0] $end
$var wire 32 3 vj [31:0] $end
$var wire 32 4 vk [31:0] $end
$var wire 32 5 wd_dcache [31:0] $end
$var wire 32 6 wd_reg [31:0] $end
$var wire 4 7 wd_status [3:0] $end
$var wire 1 8 we_dcache $end
$var wire 1 9 we_reg $end
$var wire 1 : we_status $end
$var wire 32 ; ws_dcache [31:0] $end
$var wire 5 < ws_reg [4:0] $end
$var wire 5 = ws_status [4:0] $end
$var reg 1 > clk $end
$var reg 1 ? reset $end
$scope module status $end
$var wire 1 @ clk $end
$var wire 5 A get_num1 [4:0] $end
$var wire 5 B get_num2 [4:0] $end
$var wire 5 C get_num3 [4:0] $end
$var wire 1 D reset $end
$var wire 4 E status1 [3:0] $end
$var wire 4 F status2 [3:0] $end
$var wire 4 G status3 [3:0] $end
$var wire 32 H value1 [31:0] $end
$var wire 32 I value2 [31:0] $end
$var wire 32 J value3 [31:0] $end
$var wire 32 K write_reg_data [31:0] $end
$var wire 1 9 write_reg_enable $end
$var wire 5 L write_reg_src [4:0] $end
$var wire 1 : write_rs_enable $end
$var wire 5 M write_rs_src [4:0] $end
$var wire 4 N write_rs_status [3:0] $end
$scope module registers $end
$var wire 1 @ clk $end
$var wire 5 O get_num1 [4:0] $end
$var wire 5 P get_num2 [4:0] $end
$var wire 5 Q get_num3 [4:0] $end
$var wire 32 R out1 [31:0] $end
$var wire 32 S out2 [31:0] $end
$var wire 32 T out3 [31:0] $end
$var wire 1 D reset_enable $end
$var wire 1 9 set_enable $end
$var wire 5 U set_num [4:0] $end
$var wire 32 V set_val [31:0] $end
$var reg 6 W i [5:0] $end
$upscope $end
$scope begin rs $end
$var reg 32 X i [31:0] $end
$upscope $end
$upscope $end
$scope module data_ctrl $end
$var wire 40 Y RB_index_bus [39:0] $end
$var wire 64 Z addr_bus [63:0] $end
$var wire 1 @ clk $end
$var wire 320 [ data_bus [319:0] $end
$var wire 1 D reset $end
$var wire 10 \ valid_bus [9:0] $end
$var reg 480 ] CDB_data_addr [479:0] $end
$var reg 480 ^ CDB_data_data [479:0] $end
$var reg 15 _ CDB_data_valid [14:0] $end
$scope function readData $end
$var reg 320 ` data_bus [319:0] $end
$var reg 32 a fuindex [31:0] $end
$var reg 32 b readData [31:0] $end
$upscope $end
$scope function readIndex $end
$var reg 40 c RB_index_bus [39:0] $end
$var reg 32 d fuindex [31:0] $end
$var reg 4 e readIndex [3:0] $end
$upscope $end
$scope function readValid $end
$var reg 32 f fuindex [31:0] $end
$var reg 1 g readValid $end
$var reg 10 h valid_bus [9:0] $end
$upscope $end
$scope begin setCDB $end
$var reg 480 i data [479:0] $end
$var reg 480 j data_each [479:0] $end
$var reg 32 k i [31:0] $end
$var reg 4 l index [3:0] $end
$var reg 15 m valid [14:0] $end
$var reg 15 n valid_each [14:0] $end
$upscope $end
$upscope $end
$scope module RB $end
$var wire 480 o CDB_data_addr [479:0] $end
$var wire 480 p CDB_data_data [479:0] $end
$var wire 15 q CDB_data_valid [14:0] $end
$var wire 10 r busy [9:0] $end
$var wire 1 @ clk $end
$var wire 1 s hit $end
$var wire 32 t inst [31:0] $end
$var wire 4 u qj [3:0] $end
$var wire 4 v qk [3:0] $end
$var wire 1 D reset $end
$var wire 32 w vj [31:0] $end
$var wire 32 x vk [31:0] $end
$var reg 4 y CDB_inst_RBindex [3:0] $end
$var reg 4 z CDB_inst_fu [3:0] $end
$var reg 32 { CDB_inst_inst [31:0] $end
$var reg 4 | RB_index_status [3:0] $end
$var reg 5 } Rdest_status [4:0] $end
$var reg 4 ~ back [3:0] $end
$var reg 1 !" cache_enable $end
$var reg 4 "" head [3:0] $end
$var reg 5 #" numj [4:0] $end
$var reg 5 $" numk [4:0] $end
$var reg 32 %" pc [31:0] $end
$var reg 4 &" tail [3:0] $end
$var reg 32 '" wd_mem [31:0] $end
$var reg 32 (" wd_reg [31:0] $end
$var reg 1 )" we_mem $end
$var reg 1 *" we_reg $end
$var reg 1 +" we_status $end
$var reg 32 ," ws_mem [31:0] $end
$var reg 5 -" ws_reg [4:0] $end
$scope function getRdest $end
$var reg 5 ." getRdest [4:0] $end
$var reg 32 /" inst [31:0] $end
$var reg 4 0" op [3:0] $end
$upscope $end
$scope function inc $end
$var reg 4 1" inc [3:0] $end
$var reg 4 2" ptr [3:0] $end
$upscope $end
$scope function notFull $end
$var reg 4 3" back [3:0] $end
$var reg 4 4" head [3:0] $end
$var reg 1 5" notFull $end
$upscope $end
$scope module icache $end
$var wire 1 6" cache_enable $end
$var wire 1 @ clk $end
$var wire 10 7" index [9:0] $end
$var wire 32 8" inst [31:0] $end
$var wire 512 9" inst_block [511:0] $end
$var wire 18 :" inst_tag [17:0] $end
$var wire 4 ;" offset [3:0] $end
$var wire 32 <" ptr [31:0] $end
$var reg 1 =" hit $end
$var reg 32 >" out [31:0] $end
$scope module imemory $end
$var wire 512 ?" out_block [511:0] $end
$var wire 32 @" out_inst [31:0] $end
$var wire 32 A" ptr [31:0] $end
$var wire 32 B" ptr_block [31:0] $end
$scope begin init $end
$var reg 32 C" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rst $end
$var reg 32 D" i [31:0] $end
$upscope $end
$scope begin IF $end
$scope begin addInst $end
$upscope $end
$upscope $end
$scope begin issue $end
$var reg 32 E" inst_now [31:0] $end
$var reg 4 F" op [3:0] $end
$scope begin issueIfCan $end
$var reg 1 G" free $end
$var reg 4 H" fuend [3:0] $end
$var reg 4 I" i [3:0] $end
$scope begin updateRegStatus $end
$upscope $end
$upscope $end
$upscope $end
$scope task getFuStartAndNum $end
$var reg 4 J" fu_end [3:0] $end
$var reg 4 K" fu_num [3:0] $end
$var reg 4 L" fu_start [3:0] $end
$var reg 4 M" op [3:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[0] $end
$var wire 480 N" CDB_data_data [479:0] $end
$var wire 15 O" CDB_data_valid [14:0] $end
$var wire 4 P" RB_index [3:0] $end
$var wire 40 Q" RB_index_bus [39:0] $end
$var wire 10 R" busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 S" data_bus [319:0] $end
$var wire 4 T" fu [3:0] $end
$var wire 32 U" inst [31:0] $end
$var wire 4 V" qj [3:0] $end
$var wire 4 W" qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 X" valid_bus [9:0] $end
$var wire 32 Y" vj [31:0] $end
$var wire 32 Z" vk [31:0] $end
$var reg 4 [" Qj [3:0] $end
$var reg 4 \" Qk [3:0] $end
$var reg 32 ]" Vj [31:0] $end
$var reg 32 ^" Vk [31:0] $end
$var reg 1 _" busy $end
$var reg 4 `" dest [3:0] $end
$var reg 4 a" op [3:0] $end
$var reg 5 b" reg_numj [4:0] $end
$var reg 5 c" reg_numk [4:0] $end
$var reg 32 d" result [31:0] $end
$var reg 1 e" valid $end
$scope function readDataBus $end
$var reg 480 f" CDB_data_data [479:0] $end
$var reg 4 g" index [3:0] $end
$var reg 32 h" readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 i" CDB_data_valid [14:0] $end
$var reg 4 j" index [3:0] $end
$var reg 1 k" readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 l" ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 m" Q [3:0] $end
$var reg 32 n" V [31:0] $end
$var reg 480 o" dataBus [479:0] $end
$var reg 1 p" ok $end
$var reg 1 q" valid $end
$var reg 15 r" validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 s" CDB_data_data [479:0] $end
$var reg 15 t" CDB_data_valid [14:0] $end
$var reg 4 u" Q [3:0] $end
$var reg 32 v" V [31:0] $end
$var reg 4 w" q [3:0] $end
$var reg 32 x" v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[1] $end
$var wire 480 y" CDB_data_data [479:0] $end
$var wire 15 z" CDB_data_valid [14:0] $end
$var wire 4 {" RB_index [3:0] $end
$var wire 40 |" RB_index_bus [39:0] $end
$var wire 10 }" busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 ~" data_bus [319:0] $end
$var wire 4 !# fu [3:0] $end
$var wire 32 "# inst [31:0] $end
$var wire 4 ## qj [3:0] $end
$var wire 4 $# qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 %# valid_bus [9:0] $end
$var wire 32 &# vj [31:0] $end
$var wire 32 '# vk [31:0] $end
$var reg 4 (# Qj [3:0] $end
$var reg 4 )# Qk [3:0] $end
$var reg 32 *# Vj [31:0] $end
$var reg 32 +# Vk [31:0] $end
$var reg 1 ,# busy $end
$var reg 4 -# dest [3:0] $end
$var reg 4 .# op [3:0] $end
$var reg 5 /# reg_numj [4:0] $end
$var reg 5 0# reg_numk [4:0] $end
$var reg 32 1# result [31:0] $end
$var reg 1 2# valid $end
$scope function readDataBus $end
$var reg 480 3# CDB_data_data [479:0] $end
$var reg 4 4# index [3:0] $end
$var reg 32 5# readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 6# CDB_data_valid [14:0] $end
$var reg 4 7# index [3:0] $end
$var reg 1 8# readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 9# ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 :# Q [3:0] $end
$var reg 32 ;# V [31:0] $end
$var reg 480 <# dataBus [479:0] $end
$var reg 1 =# ok $end
$var reg 1 ># valid $end
$var reg 15 ?# validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 @# CDB_data_data [479:0] $end
$var reg 15 A# CDB_data_valid [14:0] $end
$var reg 4 B# Q [3:0] $end
$var reg 32 C# V [31:0] $end
$var reg 4 D# q [3:0] $end
$var reg 32 E# v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[2] $end
$var wire 480 F# CDB_data_data [479:0] $end
$var wire 15 G# CDB_data_valid [14:0] $end
$var wire 4 H# RB_index [3:0] $end
$var wire 40 I# RB_index_bus [39:0] $end
$var wire 10 J# busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 K# data_bus [319:0] $end
$var wire 4 L# fu [3:0] $end
$var wire 32 M# inst [31:0] $end
$var wire 4 N# qj [3:0] $end
$var wire 4 O# qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 P# valid_bus [9:0] $end
$var wire 32 Q# vj [31:0] $end
$var wire 32 R# vk [31:0] $end
$var reg 4 S# Qj [3:0] $end
$var reg 4 T# Qk [3:0] $end
$var reg 32 U# Vj [31:0] $end
$var reg 32 V# Vk [31:0] $end
$var reg 1 W# busy $end
$var reg 4 X# dest [3:0] $end
$var reg 4 Y# op [3:0] $end
$var reg 5 Z# reg_numj [4:0] $end
$var reg 5 [# reg_numk [4:0] $end
$var reg 32 \# result [31:0] $end
$var reg 1 ]# valid $end
$scope function readDataBus $end
$var reg 480 ^# CDB_data_data [479:0] $end
$var reg 4 _# index [3:0] $end
$var reg 32 `# readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 a# CDB_data_valid [14:0] $end
$var reg 4 b# index [3:0] $end
$var reg 1 c# readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 d# ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 e# Q [3:0] $end
$var reg 32 f# V [31:0] $end
$var reg 480 g# dataBus [479:0] $end
$var reg 1 h# ok $end
$var reg 1 i# valid $end
$var reg 15 j# validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 k# CDB_data_data [479:0] $end
$var reg 15 l# CDB_data_valid [14:0] $end
$var reg 4 m# Q [3:0] $end
$var reg 32 n# V [31:0] $end
$var reg 4 o# q [3:0] $end
$var reg 32 p# v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[3] $end
$var wire 480 q# CDB_data_data [479:0] $end
$var wire 15 r# CDB_data_valid [14:0] $end
$var wire 4 s# RB_index [3:0] $end
$var wire 40 t# RB_index_bus [39:0] $end
$var wire 10 u# busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 v# data_bus [319:0] $end
$var wire 4 w# fu [3:0] $end
$var wire 32 x# inst [31:0] $end
$var wire 4 y# qj [3:0] $end
$var wire 4 z# qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 {# valid_bus [9:0] $end
$var wire 32 |# vj [31:0] $end
$var wire 32 }# vk [31:0] $end
$var reg 4 ~# Qj [3:0] $end
$var reg 4 !$ Qk [3:0] $end
$var reg 32 "$ Vj [31:0] $end
$var reg 32 #$ Vk [31:0] $end
$var reg 1 $$ busy $end
$var reg 4 %$ dest [3:0] $end
$var reg 4 &$ op [3:0] $end
$var reg 5 '$ reg_numj [4:0] $end
$var reg 5 ($ reg_numk [4:0] $end
$var reg 32 )$ result [31:0] $end
$var reg 1 *$ valid $end
$scope function readDataBus $end
$var reg 480 +$ CDB_data_data [479:0] $end
$var reg 4 ,$ index [3:0] $end
$var reg 32 -$ readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 .$ CDB_data_valid [14:0] $end
$var reg 4 /$ index [3:0] $end
$var reg 1 0$ readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 1$ ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 2$ Q [3:0] $end
$var reg 32 3$ V [31:0] $end
$var reg 480 4$ dataBus [479:0] $end
$var reg 1 5$ ok $end
$var reg 1 6$ valid $end
$var reg 15 7$ validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 8$ CDB_data_data [479:0] $end
$var reg 15 9$ CDB_data_valid [14:0] $end
$var reg 4 :$ Q [3:0] $end
$var reg 32 ;$ V [31:0] $end
$var reg 4 <$ q [3:0] $end
$var reg 32 =$ v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[4] $end
$var wire 480 >$ CDB_data_data [479:0] $end
$var wire 15 ?$ CDB_data_valid [14:0] $end
$var wire 4 @$ RB_index [3:0] $end
$var wire 40 A$ RB_index_bus [39:0] $end
$var wire 10 B$ busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 C$ data_bus [319:0] $end
$var wire 4 D$ fu [3:0] $end
$var wire 32 E$ inst [31:0] $end
$var wire 4 F$ qj [3:0] $end
$var wire 4 G$ qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 H$ valid_bus [9:0] $end
$var wire 32 I$ vj [31:0] $end
$var wire 32 J$ vk [31:0] $end
$var reg 4 K$ Qj [3:0] $end
$var reg 4 L$ Qk [3:0] $end
$var reg 32 M$ Vj [31:0] $end
$var reg 32 N$ Vk [31:0] $end
$var reg 1 O$ busy $end
$var reg 4 P$ dest [3:0] $end
$var reg 4 Q$ op [3:0] $end
$var reg 5 R$ reg_numj [4:0] $end
$var reg 5 S$ reg_numk [4:0] $end
$var reg 32 T$ result [31:0] $end
$var reg 1 U$ valid $end
$scope function readDataBus $end
$var reg 480 V$ CDB_data_data [479:0] $end
$var reg 4 W$ index [3:0] $end
$var reg 32 X$ readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 Y$ CDB_data_valid [14:0] $end
$var reg 4 Z$ index [3:0] $end
$var reg 1 [$ readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 \$ ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 ]$ Q [3:0] $end
$var reg 32 ^$ V [31:0] $end
$var reg 480 _$ dataBus [479:0] $end
$var reg 1 `$ ok $end
$var reg 1 a$ valid $end
$var reg 15 b$ validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 c$ CDB_data_data [479:0] $end
$var reg 15 d$ CDB_data_valid [14:0] $end
$var reg 4 e$ Q [3:0] $end
$var reg 32 f$ V [31:0] $end
$var reg 4 g$ q [3:0] $end
$var reg 32 h$ v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[5] $end
$var wire 480 i$ CDB_data_data [479:0] $end
$var wire 15 j$ CDB_data_valid [14:0] $end
$var wire 4 k$ RB_index [3:0] $end
$var wire 40 l$ RB_index_bus [39:0] $end
$var wire 10 m$ busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 n$ data_bus [319:0] $end
$var wire 4 o$ fu [3:0] $end
$var wire 32 p$ inst [31:0] $end
$var wire 4 q$ qj [3:0] $end
$var wire 4 r$ qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 s$ valid_bus [9:0] $end
$var wire 32 t$ vj [31:0] $end
$var wire 32 u$ vk [31:0] $end
$var reg 4 v$ Qj [3:0] $end
$var reg 4 w$ Qk [3:0] $end
$var reg 32 x$ Vj [31:0] $end
$var reg 32 y$ Vk [31:0] $end
$var reg 1 z$ busy $end
$var reg 4 {$ dest [3:0] $end
$var reg 4 |$ op [3:0] $end
$var reg 5 }$ reg_numj [4:0] $end
$var reg 5 ~$ reg_numk [4:0] $end
$var reg 32 !% result [31:0] $end
$var reg 1 "% valid $end
$scope function readDataBus $end
$var reg 480 #% CDB_data_data [479:0] $end
$var reg 4 $% index [3:0] $end
$var reg 32 %% readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 &% CDB_data_valid [14:0] $end
$var reg 4 '% index [3:0] $end
$var reg 1 (% readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 )% ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 *% Q [3:0] $end
$var reg 32 +% V [31:0] $end
$var reg 480 ,% dataBus [479:0] $end
$var reg 1 -% ok $end
$var reg 1 .% valid $end
$var reg 15 /% validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 0% CDB_data_data [479:0] $end
$var reg 15 1% CDB_data_valid [14:0] $end
$var reg 4 2% Q [3:0] $end
$var reg 32 3% V [31:0] $end
$var reg 4 4% q [3:0] $end
$var reg 32 5% v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[6] $end
$var wire 480 6% CDB_data_data [479:0] $end
$var wire 15 7% CDB_data_valid [14:0] $end
$var wire 4 8% RB_index [3:0] $end
$var wire 40 9% RB_index_bus [39:0] $end
$var wire 10 :% busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 ;% data_bus [319:0] $end
$var wire 4 <% fu [3:0] $end
$var wire 32 =% inst [31:0] $end
$var wire 4 >% qj [3:0] $end
$var wire 4 ?% qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 @% valid_bus [9:0] $end
$var wire 32 A% vj [31:0] $end
$var wire 32 B% vk [31:0] $end
$var reg 4 C% Qj [3:0] $end
$var reg 4 D% Qk [3:0] $end
$var reg 32 E% Vj [31:0] $end
$var reg 32 F% Vk [31:0] $end
$var reg 1 G% busy $end
$var reg 4 H% dest [3:0] $end
$var reg 4 I% op [3:0] $end
$var reg 5 J% reg_numj [4:0] $end
$var reg 5 K% reg_numk [4:0] $end
$var reg 32 L% result [31:0] $end
$var reg 1 M% valid $end
$scope function readDataBus $end
$var reg 480 N% CDB_data_data [479:0] $end
$var reg 4 O% index [3:0] $end
$var reg 32 P% readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 Q% CDB_data_valid [14:0] $end
$var reg 4 R% index [3:0] $end
$var reg 1 S% readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 T% ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 U% Q [3:0] $end
$var reg 32 V% V [31:0] $end
$var reg 480 W% dataBus [479:0] $end
$var reg 1 X% ok $end
$var reg 1 Y% valid $end
$var reg 15 Z% validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 [% CDB_data_data [479:0] $end
$var reg 15 \% CDB_data_valid [14:0] $end
$var reg 4 ]% Q [3:0] $end
$var reg 32 ^% V [31:0] $end
$var reg 4 _% q [3:0] $end
$var reg 32 `% v [31:0] $end
$upscope $end
$upscope $end
$scope module alu_rs[7] $end
$var wire 480 a% CDB_data_data [479:0] $end
$var wire 15 b% CDB_data_valid [14:0] $end
$var wire 4 c% RB_index [3:0] $end
$var wire 40 d% RB_index_bus [39:0] $end
$var wire 10 e% busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 f% data_bus [319:0] $end
$var wire 4 g% fu [3:0] $end
$var wire 32 h% inst [31:0] $end
$var wire 4 i% qj [3:0] $end
$var wire 4 j% qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 k% valid_bus [9:0] $end
$var wire 32 l% vj [31:0] $end
$var wire 32 m% vk [31:0] $end
$var reg 4 n% Qj [3:0] $end
$var reg 4 o% Qk [3:0] $end
$var reg 32 p% Vj [31:0] $end
$var reg 32 q% Vk [31:0] $end
$var reg 1 r% busy $end
$var reg 4 s% dest [3:0] $end
$var reg 4 t% op [3:0] $end
$var reg 5 u% reg_numj [4:0] $end
$var reg 5 v% reg_numk [4:0] $end
$var reg 32 w% result [31:0] $end
$var reg 1 x% valid $end
$scope function readDataBus $end
$var reg 480 y% CDB_data_data [479:0] $end
$var reg 4 z% index [3:0] $end
$var reg 32 {% readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 |% CDB_data_valid [14:0] $end
$var reg 4 }% index [3:0] $end
$var reg 1 ~% readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 !& ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 "& Q [3:0] $end
$var reg 32 #& V [31:0] $end
$var reg 480 $& dataBus [479:0] $end
$var reg 1 %& ok $end
$var reg 1 && valid $end
$var reg 15 '& validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 (& CDB_data_data [479:0] $end
$var reg 15 )& CDB_data_valid [14:0] $end
$var reg 4 *& Q [3:0] $end
$var reg 32 +& V [31:0] $end
$var reg 4 ,& q [3:0] $end
$var reg 32 -& v [31:0] $end
$upscope $end
$upscope $end
$scope module store_rs[0] $end
$var wire 480 .& CDB_data_data [479:0] $end
$var wire 15 /& CDB_data_valid [14:0] $end
$var wire 4 0& RB_index [3:0] $end
$var wire 40 1& RB_index_bus [39:0] $end
$var wire 64 2& addr_bus [63:0] $end
$var wire 10 3& busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 4& data_bus [319:0] $end
$var wire 4 5& fu [3:0] $end
$var wire 32 6& inst [31:0] $end
$var wire 4 7& qi [3:0] $end
$var wire 4 8& qj [3:0] $end
$var wire 4 9& qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 :& valid_bus [9:0] $end
$var wire 32 ;& vi [31:0] $end
$var wire 32 <& vj [31:0] $end
$var wire 32 =& vk [31:0] $end
$var reg 4 >& Qi [3:0] $end
$var reg 4 ?& Qj [3:0] $end
$var reg 4 @& Qk [3:0] $end
$var reg 32 A& Vi [31:0] $end
$var reg 32 B& Vj [31:0] $end
$var reg 32 C& Vk [31:0] $end
$var reg 1 D& busy $end
$var reg 32 E& data [31:0] $end
$var reg 4 F& dest [3:0] $end
$var reg 4 G& op [3:0] $end
$var reg 5 H& reg_numi [4:0] $end
$var reg 5 I& reg_numj [4:0] $end
$var reg 5 J& reg_numk [4:0] $end
$var reg 32 K& result [31:0] $end
$var reg 1 L& valid $end
$scope function readDataBus $end
$var reg 480 M& CDB_data_data [479:0] $end
$var reg 4 N& index [3:0] $end
$var reg 32 O& readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 P& CDB_data_valid [14:0] $end
$var reg 4 Q& index [3:0] $end
$var reg 1 R& readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 S& ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 T& Q [3:0] $end
$var reg 32 U& V [31:0] $end
$var reg 480 V& dataBus [479:0] $end
$var reg 1 W& ok $end
$var reg 1 X& valid $end
$var reg 15 Y& validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 Z& CDB_data_data [479:0] $end
$var reg 15 [& CDB_data_valid [14:0] $end
$var reg 4 \& Q [3:0] $end
$var reg 32 ]& V [31:0] $end
$var reg 4 ^& q [3:0] $end
$var reg 32 _& v [31:0] $end
$upscope $end
$upscope $end
$scope module store_rs[1] $end
$var wire 480 `& CDB_data_data [479:0] $end
$var wire 15 a& CDB_data_valid [14:0] $end
$var wire 4 b& RB_index [3:0] $end
$var wire 40 c& RB_index_bus [39:0] $end
$var wire 64 d& addr_bus [63:0] $end
$var wire 10 e& busy_out [9:0] $end
$var wire 1 @ clk $end
$var wire 320 f& data_bus [319:0] $end
$var wire 4 g& fu [3:0] $end
$var wire 32 h& inst [31:0] $end
$var wire 4 i& qi [3:0] $end
$var wire 4 j& qj [3:0] $end
$var wire 4 k& qk [3:0] $end
$var wire 1 D reset $end
$var wire 10 l& valid_bus [9:0] $end
$var wire 32 m& vi [31:0] $end
$var wire 32 n& vj [31:0] $end
$var wire 32 o& vk [31:0] $end
$var reg 4 p& Qi [3:0] $end
$var reg 4 q& Qj [3:0] $end
$var reg 4 r& Qk [3:0] $end
$var reg 32 s& Vi [31:0] $end
$var reg 32 t& Vj [31:0] $end
$var reg 32 u& Vk [31:0] $end
$var reg 1 v& busy $end
$var reg 32 w& data [31:0] $end
$var reg 4 x& dest [3:0] $end
$var reg 4 y& op [3:0] $end
$var reg 5 z& reg_numi [4:0] $end
$var reg 5 {& reg_numj [4:0] $end
$var reg 5 |& reg_numk [4:0] $end
$var reg 32 }& result [31:0] $end
$var reg 1 ~& valid $end
$scope function readDataBus $end
$var reg 480 !' CDB_data_data [479:0] $end
$var reg 4 "' index [3:0] $end
$var reg 32 #' readDataBus [31:0] $end
$upscope $end
$scope function readValidBus $end
$var reg 15 $' CDB_data_valid [14:0] $end
$var reg 4 %' index [3:0] $end
$var reg 1 &' readValidBus $end
$upscope $end
$scope begin checkIssue $end
$upscope $end
$scope begin execute $end
$var reg 1 '' ok $end
$upscope $end
$scope task checkAndGetData $end
$var reg 4 (' Q [3:0] $end
$var reg 32 )' V [31:0] $end
$var reg 480 *' dataBus [479:0] $end
$var reg 1 +' ok $end
$var reg 1 ,' valid $end
$var reg 15 -' validBus [14:0] $end
$upscope $end
$scope task getData $end
$var reg 480 .' CDB_data_data [479:0] $end
$var reg 15 /' CDB_data_valid [14:0] $end
$var reg 4 0' Q [3:0] $end
$var reg 32 1' V [31:0] $end
$var reg 4 2' q [3:0] $end
$var reg 32 3' v [31:0] $end
$upscope $end
$upscope $end
$scope begin test $end
$upscope $end
$scope task setWrite $end
$var reg 1 4' data $end
$var reg 4 5' fu [3:0] $end
$var reg 10 6' longData [9:0] $end
$var reg 10 7' mask [9:0] $end
$var reg 10 8' write [9:0] $end
$upscope $end
$scope task setWriteBy $end
$var reg 4 9' fu [3:0] $end
$var reg 10 :' write [9:0] $end
$var reg 4 ;' writeFU [3:0] $end
$upscope $end
$upscope $end
$scope module def_param $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ;'
bx :'
bx 9'
bx 8'
bx 7'
bx 6'
bx 5'
x4'
bx 3'
bx 2'
bx 1'
bx 0'
bx /'
bx .'
bx -'
x,'
x+'
bx *'
bx )'
bx ('
x''
x&'
bx %'
bx $'
bx #'
bx "'
bx !'
0~&
b0 }&
bz |&
bz {&
bz z&
bx y&
b1111 x&
b0 w&
0v&
bx u&
bx t&
bx s&
bx r&
bx q&
bx p&
bx o&
bx n&
bx m&
b0 l&
bx k&
bx j&
bx i&
bx h&
b1111 g&
b0 f&
b0 e&
b0 d&
b1111111111111111111111111111111111111111 c&
bx b&
b0 a&
b0 `&
bx _&
bx ^&
bx ]&
bx \&
bx [&
bx Z&
bx Y&
xX&
xW&
bx V&
bx U&
bx T&
xS&
xR&
bx Q&
bx P&
bx O&
bx N&
bx M&
0L&
b0 K&
bz J&
bz I&
bz H&
bx G&
b1111 F&
b0 E&
0D&
bx C&
bx B&
bx A&
bx @&
bx ?&
bx >&
bx =&
bx <&
bx ;&
b0 :&
bx 9&
bx 8&
bx 7&
bx 6&
b1111 5&
b0 4&
b0 3&
b0 2&
b1111111111111111111111111111111111111111 1&
bx 0&
b0 /&
b0 .&
bx -&
bx ,&
bx +&
bx *&
bx )&
bx (&
bx '&
x&&
x%&
bx $&
bx #&
bx "&
x!&
x~%
bx }%
bx |%
bx {%
bx z%
bx y%
0x%
b0 w%
bz v%
bz u%
bx t%
b1111 s%
0r%
bx q%
bx p%
bx o%
bx n%
bx m%
bx l%
b0 k%
bx j%
bx i%
bx h%
b1111 g%
b0 f%
b0 e%
b1111111111111111111111111111111111111111 d%
bx c%
b0 b%
b0 a%
bx `%
bx _%
bx ^%
bx ]%
bx \%
bx [%
bx Z%
xY%
xX%
bx W%
bx V%
bx U%
xT%
xS%
bx R%
bx Q%
bx P%
bx O%
bx N%
0M%
b0 L%
bz K%
bz J%
bx I%
b1111 H%
0G%
bx F%
bx E%
bx D%
bx C%
bx B%
bx A%
b0 @%
bx ?%
bx >%
bx =%
b1111 <%
b0 ;%
b0 :%
b1111111111111111111111111111111111111111 9%
bx 8%
b0 7%
b0 6%
bx 5%
bx 4%
bx 3%
bx 2%
bx 1%
bx 0%
bx /%
x.%
x-%
bx ,%
bx +%
bx *%
x)%
x(%
bx '%
bx &%
bx %%
bx $%
bx #%
0"%
b0 !%
bz ~$
bz }$
bx |$
b1111 {$
0z$
bx y$
bx x$
bx w$
bx v$
bx u$
bx t$
b0 s$
bx r$
bx q$
bx p$
b1111 o$
b0 n$
b0 m$
b1111111111111111111111111111111111111111 l$
bx k$
b0 j$
b0 i$
bx h$
bx g$
bx f$
bx e$
bx d$
bx c$
bx b$
xa$
x`$
bx _$
bx ^$
bx ]$
x\$
x[$
bx Z$
bx Y$
bx X$
bx W$
bx V$
0U$
b0 T$
bz S$
bz R$
bx Q$
b1111 P$
0O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
b0 H$
bx G$
bx F$
bx E$
b1111 D$
b0 C$
b0 B$
b1111111111111111111111111111111111111111 A$
bx @$
b0 ?$
b0 >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
x6$
x5$
bx 4$
bx 3$
bx 2$
x1$
x0$
bx /$
bx .$
bx -$
bx ,$
bx +$
0*$
b0 )$
bz ($
bz '$
bx &$
b1111 %$
0$$
bx #$
bx "$
bx !$
bx ~#
bx }#
bx |#
b0 {#
bx z#
bx y#
bx x#
b1111 w#
b0 v#
b0 u#
b1111111111111111111111111111111111111111 t#
bx s#
b0 r#
b0 q#
bx p#
bx o#
bx n#
bx m#
bx l#
bx k#
bx j#
xi#
xh#
bx g#
bx f#
bx e#
xd#
xc#
bx b#
bx a#
bx `#
bx _#
bx ^#
0]#
b0 \#
bz [#
bz Z#
bx Y#
b1111 X#
0W#
bx V#
bx U#
bx T#
bx S#
bx R#
bx Q#
b0 P#
bx O#
bx N#
bx M#
b1111 L#
b0 K#
b0 J#
b1111111111111111111111111111111111111111 I#
bx H#
b0 G#
b0 F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
x>#
x=#
bx <#
bx ;#
bx :#
x9#
x8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
02#
b0 1#
bz 0#
bz /#
bx .#
b1111 -#
0,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
b0 %#
bx $#
bx ##
bx "#
b1111 !#
b0 ~"
b0 }"
b1111111111111111111111111111111111111111 |"
bx {"
b0 z"
b0 y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
xq"
xp"
bx o"
bx n"
bx m"
xl"
xk"
bx j"
bx i"
bx h"
bx g"
bx f"
0e"
b0 d"
bz c"
bz b"
bx a"
b1111 `"
0_"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
b0 X"
bx W"
bx V"
bx U"
b1111 T"
b0 S"
b0 R"
b1111111111111111111111111111111111111111 Q"
bx P"
b0 O"
b0 N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
xG"
bx F"
bx E"
b1111 D"
b10000000000 C"
b0 B"
b0 A"
b1011111011101000000000010100100 @"
b1011111011101000000000010100100011000110111100000000000010110000110001111111000000000000111000001100100011110000000000010001000101001001000000000000000000000001101010010000000010000000001111110100101000000000000000000000000110101010000000001100000000111011010010110000000000000000000000011010101100000000100000000011011011101100010010000000000000011000001011000011001100000000000000001110110101010000000000000000100011101110010100000000000000010000001011100011101110000000000000001110111101011000000000000000100 ?"
bx >"
0="
b0 <"
b0 ;"
b0 :"
b1011111011101000000000010100100011000110111100000000000010110000110001111111000000000000111000001100100011110000000000010001000101001001000000000000000000000001101010010000000010000000001111110100101000000000000000000000000110101010000000001100000000111011010010110000000000000000000000011010101100000000100000000011011011101100010010000000000000011000001011000011001100000000000000001110110101010000000000000000100011101110010100000000000000010000001011100011101110000000000000001110111101011000000000000000100 9"
b1011111011101000000000010100100 8"
b0 7"
06"
x5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
0+"
0*"
0)"
bx ("
bx '"
b0 &"
b0 %"
bz $"
bz #"
b0 ""
0!"
b0 ~
bx }
bx |
bx {
b1111 z
bx y
bx x
bx w
bx v
bx u
bx t
0s
b0 r
b0 q
b0 p
b0 o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
xg
bx f
bx e
bx d
bx c
bx b
bx a
bx `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b1111111111111111111111111111111111111111 Y
b100000 X
b100000 W
bx V
bx U
bx T
bx S
bx R
bz Q
bz P
bz O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
1D
bz C
bz B
bz A
x@
1?
x>
bx =
bx <
bx ;
0:
09
08
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bz .
bz -
bz ,
b0 +
b0 *
b0 )
b0 (
b1111111111111111111111111111111111111111 '
bx &
b1111 %
bx $
b0 #
b0 "
b0 !
$end
#5
b100000 W
0>
0@
#10
1!"
16"
15"
b0 3"
b0 4"
b1 1"
b0 2"
1>
1@
0?
0D
#15
b1111 l
b1111 e
b1001 d
b1111111111111111111111111111111111111111 c
b10 k
b0 m
b0 i
0>
0@
#20
1>
1@
#21
b1011111011101000000000010100100 >"
b1011111011101000000000010100100 t
#25
b1001 d
b10 k
0>
0@
#30
1>
1@
#31
1="
1s
#35
b1001 d
b10 k
0>
0@
#40
1>
1@
#45
b1001 d
b10 k
0>
0@
#50
1>
1@
#55
b1001 d
b10 k
0>
0@
#60
1>
1@
#65
b1001 d
b10 k
0>
0@
#70
1>
1@
#75
b1001 d
b10 k
0>
0@
#80
1>
1@
#85
b1001 d
b10 k
0>
0@
#90
1>
1@
#95
b1001 d
b10 k
0>
0@
#100
1>
1@
#105
b1001 d
b10 k
0>
0@
#110
1>
1@
#115
b1001 d
b10 k
0>
0@
#120
1>
1@
#125
b1001 d
b10 k
0>
0@
#130
1>
1@
#135
b1001 d
b10 k
0>
0@
#140
1>
1@
#145
b1001 d
b10 k
0>
0@
#150
1>
1@
#155
b1001 d
b10 k
0>
0@
#160
1>
1@
#165
b1001 d
b10 k
0>
0@
#170
1>
1@
#175
b1001 d
b10 k
0>
0@
#180
1>
1@
#185
b1001 d
b10 k
0>
0@
#190
1>
1@
#195
b1001 d
b10 k
0>
0@
#200
1>
1@
#205
b1001 d
b10 k
0>
0@
#210
1>
1@
#215
b1001 d
b10 k
0>
0@
#220
1>
1@
#225
b1001 d
b10 k
0>
0@
#230
1>
1@
#235
b1001 d
b10 k
0>
0@
#240
1>
1@
#245
b1001 d
b10 k
0>
0@
#250
1>
1@
#255
b1001 d
b10 k
0>
0@
#260
1>
1@
#265
b1001 d
b10 k
0>
0@
#270
1>
1@
#275
b1001 d
b10 k
0>
0@
#280
1>
1@
#285
b1001 d
b10 k
0>
0@
#290
1>
1@
#295
b1001 d
b10 k
0>
0@
#300
1>
1@
#305
b1001 d
b10 k
0>
0@
#310
1>
1@
#315
b1001 d
b10 k
0>
0@
#320
1>
1@
#325
b1001 d
b10 k
0>
0@
#330
1>
1@
#335
b1001 d
b10 k
0>
0@
#340
1>
1@
#345
b1001 d
b10 k
0>
0@
#350
1>
1@
#355
b1001 d
b10 k
0>
0@
#360
1>
1@
#365
b1001 d
b10 k
0>
0@
#370
1>
1@
#375
b1001 d
b10 k
0>
0@
#380
1>
1@
#385
b1001 d
b10 k
0>
0@
#390
1>
1@
#395
b1001 d
b10 k
0>
0@
#400
1>
1@
#405
b1001 d
b10 k
0>
0@
#410
1>
1@
#415
b1001 d
b10 k
0>
0@
#420
1>
1@
#425
b1001 d
b10 k
0>
0@
#430
1>
1@
#435
b1001 d
b10 k
0>
0@
#440
1>
1@
#445
b1001 d
b10 k
0>
0@
#450
1>
1@
#455
b1001 d
b10 k
0>
0@
#460
1>
1@
#465
b1001 d
b10 k
0>
0@
#470
1>
1@
#475
b1001 d
b10 k
0>
0@
#480
1>
1@
#485
b1001 d
b10 k
0>
0@
#490
1>
1@
#495
b1001 d
b10 k
0>
0@
#500
1>
1@
#505
b1001 d
b10 k
0>
0@
#510
1>
1@
#515
b1001 d
b10 k
0>
0@
#520
1>
1@
#525
b1001 d
b10 k
0>
0@
#530
1>
1@
#535
b1001 d
b10 k
0>
0@
#540
1>
1@
#545
b1001 d
b10 k
0>
0@
#550
1>
1@
#555
b1001 d
b10 k
0>
0@
#560
1>
1@
#565
b1001 d
b10 k
0>
0@
#570
1>
1@
#575
b1001 d
b10 k
0>
0@
#580
1>
1@
#585
b1001 d
b10 k
0>
0@
#590
1>
1@
#595
b1001 d
b10 k
0>
0@
#600
1>
1@
#605
b1001 d
b10 k
0>
0@
#610
1>
1@
#615
b1001 d
b10 k
0>
0@
#620
1>
1@
#625
b1001 d
b10 k
0>
0@
#630
1>
1@
#635
b1001 d
b10 k
0>
0@
#640
1>
1@
#645
b1001 d
b10 k
0>
0@
#650
1>
1@
#655
b1001 d
b10 k
0>
0@
#660
1>
1@
#665
b1001 d
b10 k
0>
0@
#670
1>
1@
#675
b1001 d
b10 k
0>
0@
#680
1>
1@
#685
b1001 d
b10 k
0>
0@
#690
1>
1@
#695
b1001 d
b10 k
0>
0@
#700
1>
1@
#705
b1001 d
b10 k
0>
0@
#710
1>
1@
#715
b1001 d
b10 k
0>
0@
#720
1>
1@
#725
b1001 d
b10 k
0>
0@
#730
1>
1@
#735
b1001 d
b10 k
0>
0@
#740
1>
1@
#745
b1001 d
b10 k
0>
0@
#750
1>
1@
#755
b1001 d
b10 k
0>
0@
#760
1>
1@
#765
b1001 d
b10 k
0>
0@
#770
1>
1@
#775
b1001 d
b10 k
0>
0@
#780
1>
1@
#785
b1001 d
b10 k
0>
0@
#790
1>
1@
#795
b1001 d
b10 k
0>
0@
#800
1>
1@
#805
b1001 d
b10 k
0>
0@
#810
1>
1@
#815
b1001 d
b10 k
0>
0@
#820
1>
1@
#825
b1001 d
b10 k
0>
0@
#830
1>
1@
#835
b1001 d
b10 k
0>
0@
#840
1>
1@
#845
b1001 d
b10 k
0>
0@
#850
1>
1@
#855
b1001 d
b10 k
0>
0@
#860
1>
1@
#865
b1001 d
b10 k
0>
0@
#870
1>
1@
#875
b1001 d
b10 k
0>
0@
#880
1>
1@
#885
b1001 d
b10 k
0>
0@
#890
1>
1@
#895
b1001 d
b10 k
0>
0@
#900
1>
1@
#905
b1001 d
b10 k
0>
0@
#910
1>
1@
#915
b1001 d
b10 k
0>
0@
#920
1>
1@
#925
b1001 d
b10 k
0>
0@
#930
1>
1@
#935
b1001 d
b10 k
0>
0@
#940
1>
1@
#945
b1001 d
b10 k
0>
0@
#950
1>
1@
#955
b1001 d
b10 k
0>
0@
#960
1>
1@
#965
b1001 d
b10 k
0>
0@
#970
1>
1@
#975
b1001 d
b10 k
0>
0@
#980
1>
1@
#985
b1001 d
b10 k
0>
0@
#990
1>
1@
#995
b1001 d
b10 k
0>
0@
#1000
1>
1@
#1005
b1001 d
b10 k
b1 ;"
0>
0@
b1 %"
b1 <"
b1 A"
b1100011011110000000000001011000 8"
b1100011011110000000000001011000 @"
b1 ~
#1010
b10 1"
b1 2"
b1 3"
b1 y
b1 $
b1 P"
b1 {"
b1 H#
b1 s#
b1 @$
b1 k$
b1 8%
b1 c%
b1 0&
b1 b&
b0 z
b0 %
b0 T"
b0 !#
b0 L#
b0 w#
b0 D$
b0 o$
b0 <%
b0 g%
b0 5&
b0 g&
b1011111011101000000000010100100 {
b1011111011101000000000010100100 &
b1011111011101000000000010100100 U"
b1011111011101000000000010100100 "#
b1011111011101000000000010100100 M#
b1011111011101000000000010100100 x#
b1011111011101000000000010100100 E$
b1011111011101000000000010100100 p$
b1011111011101000000000010100100 =%
b1011111011101000000000010100100 h%
b1011111011101000000000010100100 6&
b1011111011101000000000010100100 h&
b1 &"
1G"
b10 H"
b1 I"
b10 J"
b11 K"
b0 L"
b101 M"
b101 F"
b1011111011101000000000010100100 E"
1>
1@
#1011
b1 `"
b1111111111111111111111111111111111110001 '
b1111111111111111111111111111111111110001 Y
b1111111111111111111111111111111111110001 Q"
b1111111111111111111111111111111111110001 |"
b1111111111111111111111111111111111110001 I#
b1111111111111111111111111111111111110001 t#
b1111111111111111111111111111111111110001 A$
b1111111111111111111111111111111111110001 l$
b1111111111111111111111111111111111110001 9%
b1111111111111111111111111111111111110001 d%
b1111111111111111111111111111111111110001 1&
b1111111111111111111111111111111111110001 c&
1_"
b1 +
b1 r
b1 R"
b1 }"
b1 J#
b1 u#
b1 B$
b1 m$
b1 :%
b1 e%
b1 3&
b1 e&
b1100011011110000000000001011000 >"
b1100011011110000000000001011000 t
b1111 \"
b10100100 ^"
b1111 ["
b0 ]"
b1111 u"
b0 v"
b0 t"
b0 s"
b1111 w"
b0 x"
b11101 b"
b11101 -
b11101 B
b11101 P
b1111 0
b1111 F
b1111 u
b1111 V"
b1111 ##
b1111 N#
b1111 y#
b1111 F$
b1111 q$
b1111 >%
b1111 i%
b1111 8&
b1111 j&
b0 3
b0 I
b0 S
b0 w
b0 Y"
b0 &#
b0 Q#
b0 |#
b0 I$
b0 t$
b0 A%
b0 l%
b0 <&
b0 n&
b101 a"
#1012
bz b"
bz -
bz B
bz P
bx 0
bx F
bx u
bx V"
bx ##
bx N#
bx y#
bx F$
bx q$
bx >%
bx i%
bx 8&
bx j&
bx 3
bx I
bx S
bx w
bx Y"
bx &#
bx Q#
bx |#
bx I$
bx t$
bx A%
bx l%
bx <&
bx n&
#1015
b10 ;"
b0 n
0g
b0 f
b0 h
b0 j
b0 b
b0 a
b0 `
b1111 l
b1111 e
b1001 d
b1111111111111111111111111111111111110001 c
b10 k
b10 %"
b10 <"
b10 A"
b1100011111110000000000001110000 8"
b1100011111110000000000001110000 @"
b10 ~
b1 |
b1 7
b1 N
1+"
1:
b11110 }
b11110 =
b11110 M
b11110 ."
b101 0"
b1011111011101000000000010100100 /"
0>
0@
#1020
1p"
b0 r"
b0 o"
b10100100 n"
b1111 m"
1l"
b11 1"
b10 2"
b10 3"
b10 y
b10 $
b10 P"
b10 {"
b10 H#
b10 s#
b10 @$
b10 k$
b10 8%
b10 c%
b10 0&
b10 b&
b1 z
b1 %
b1 T"
b1 !#
b1 L#
b1 w#
b1 D$
b1 o$
b1 <%
b1 g%
b1 5&
b1 g&
b1100011011110000000000001011000 {
b1100011011110000000000001011000 &
b1100011011110000000000001011000 U"
b1100011011110000000000001011000 "#
b1100011011110000000000001011000 M#
b1100011011110000000000001011000 x#
b1100011011110000000000001011000 E$
b1100011011110000000000001011000 p$
b1100011011110000000000001011000 =%
b1100011011110000000000001011000 h%
b1100011011110000000000001011000 6&
b1100011011110000000000001011000 h&
b10 &"
1G"
b10 I"
b110 M"
b110 F"
b1100011011110000000000001011000 E"
1>
1@
#1021
b10 -#
b1111111111111111111111111111111100100001 '
b1111111111111111111111111111111100100001 Y
b1111111111111111111111111111111100100001 Q"
b1111111111111111111111111111111100100001 |"
b1111111111111111111111111111111100100001 I#
b1111111111111111111111111111111100100001 t#
b1111111111111111111111111111111100100001 A$
b1111111111111111111111111111111100100001 l$
b1111111111111111111111111111111100100001 9%
b1111111111111111111111111111111100100001 d%
b1111111111111111111111111111111100100001 1&
b1111111111111111111111111111111100100001 c&
1,#
b1100011111110000000000001110000 >"
b1100011111110000000000001110000 t
0_"
b10 +
b10 r
b10 R"
b10 }"
b10 J#
b10 u#
b10 B$
b10 m$
b10 :%
b10 e%
b10 3&
b10 e&
1e"
b1 *
b1 \
b1 X"
b1 %#
b1 P#
b1 {#
b1 H$
b1 s$
b1 @%
b1 k%
b1 :&
b1 l&
b10100100 d"
b10100100 )
b10100100 [
b10100100 S"
b10100100 ~"
b10100100 K#
b10100100 v#
b10100100 C$
b10100100 n$
b10100100 ;%
b10100100 f%
b10100100 4&
b10100100 f&
b1111 )#
b1011000 +#
b1 (#
b1 B#
08#
b1 7#
b0 6#
b0 A#
b0 @#
b1 D#
b0 E#
b11110 /#
b11110 -
b11110 B
b11110 P
b1 0
b1 F
b1 u
b1 V"
b1 ##
b1 N#
b1 y#
b1 F$
b1 q$
b1 >%
b1 i%
b1 8&
b1 j&
b0 3
b0 I
b0 S
b0 w
b0 Y"
b0 &#
b0 Q#
b0 |#
b0 I$
b0 t$
b0 A%
b0 l%
b0 <&
b0 n&
b110 .#
#1022
bz /#
bz -
bz B
bz P
bx 0
bx F
bx u
bx V"
bx ##
bx N#
bx y#
bx F$
bx q$
bx >%
bx i%
bx 8&
bx j&
bx 3
bx I
bx S
bx w
bx Y"
bx &#
bx Q#
bx |#
bx I$
bx t$
bx A%
bx l%
bx <&
bx n&
#1025
b11 ;"
b10 _
b10 #
b10 q
b10 O"
b10 z"
b10 G#
b10 r#
b10 ?$
b10 j$
b10 7%
b10 b%
b10 /&
b10 a&
b1010010000000000000000000000000000000000 ^
b1010010000000000000000000000000000000000 "
b1010010000000000000000000000000000000000 p
b1010010000000000000000000000000000000000 N"
b1010010000000000000000000000000000000000 y"
b1010010000000000000000000000000000000000 F#
b1010010000000000000000000000000000000000 q#
b1010010000000000000000000000000000000000 >$
b1010010000000000000000000000000000000000 i$
b1010010000000000000000000000000000000000 6%
b1010010000000000000000000000000000000000 a%
b1010010000000000000000000000000000000000 .&
b1010010000000000000000000000000000000000 `&
b1 f
b1 a
b10 m
b0 n
0g
b1 h
b0 i
b0 j
b0 b
b10100100 `
b1111 l
b1111 e
b1001 d
b1111111111111111111111111111111100100001 c
b10 k
b11 %"
b11 <"
b11 A"
b1100100011110000000000010001000 8"
b1100100011110000000000010001000 @"
b11 ~
b10 |
b10 7
b10 N
b110 }
b110 =
b110 M
b110 ."
b110 0"
b1100011011110000000000001011000 /"
0>
0@
#1030
b10100100 *#
b1111 (#
b1011000 ;#
b10100100 5#
b1 4#
b1010010000000000000000000000000000000000 3#
1>#
18#
b10 6#
1=#
b10 ?#
b1010010000000000000000000000000000000000 <#
b1111 :#
19#
b100 1"
b11 2"
b11 3"
b11 y
b11 $
b11 P"
b11 {"
b11 H#
b11 s#
b11 @$
b11 k$
b11 8%
b11 c%
b11 0&
b11 b&
b0 z
b0 %
b0 T"
b0 !#
b0 L#
b0 w#
b0 D$
b0 o$
b0 <%
b0 g%
b0 5&
b0 g&
b1100011111110000000000001110000 {
b1100011111110000000000001110000 &
b1100011111110000000000001110000 U"
b1100011111110000000000001110000 "#
b1100011111110000000000001110000 M#
b1100011111110000000000001110000 x#
b1100011111110000000000001110000 E$
b1100011111110000000000001110000 p$
b1100011111110000000000001110000 =%
b1100011111110000000000001110000 h%
b1100011111110000000000001110000 6&
b1100011111110000000000001110000 h&
b11 &"
1G"
b1 I"
b1100011111110000000000001110000 E"
1>
1@
#1031
b1100100011110000000000010001000 >"
b1100100011110000000000010001000 t
0,#
b0 +
b0 r
b0 R"
b0 }"
b0 J#
b0 u#
b0 B$
b0 m$
b0 :%
b0 e%
b0 3&
b0 e&
12#
b11 *
b11 \
b11 X"
b11 %#
b11 P#
b11 {#
b11 H$
b11 s$
b11 @%
b11 k%
b11 :&
b11 l&
b1001100 1#
b100110000000000000000000000000010100100 )
b100110000000000000000000000000010100100 [
b100110000000000000000000000000010100100 S"
b100110000000000000000000000000010100100 ~"
b100110000000000000000000000000010100100 K#
b100110000000000000000000000000010100100 v#
b100110000000000000000000000000010100100 C$
b100110000000000000000000000000010100100 n$
b100110000000000000000000000000010100100 ;%
b100110000000000000000000000000010100100 f%
b100110000000000000000000000000010100100 4&
b100110000000000000000000000000010100100 f&
#1034
b1111 `"
b1111111111111111111111111111111100101111 '
b1111111111111111111111111111111100101111 Y
b1111111111111111111111111111111100101111 Q"
b1111111111111111111111111111111100101111 |"
b1111111111111111111111111111111100101111 I#
b1111111111111111111111111111111100101111 t#
b1111111111111111111111111111111100101111 A$
b1111111111111111111111111111111100101111 l$
b1111111111111111111111111111111100101111 9%
b1111111111111111111111111111111100101111 d%
b1111111111111111111111111111111100101111 1&
b1111111111111111111111111111111100101111 c&
0e"
b10 *
b10 \
b10 X"
b10 %#
b10 P#
b10 {#
b10 H$
b10 s$
b10 @%
b10 k%
b10 :&
b10 l&
#1035
b100 ;"
b100 _
b100 #
b100 q
b100 O"
b100 z"
b100 G#
b100 r#
b100 ?$
b100 j$
b100 7%
b100 b%
b100 /&
b100 a&
b10011000000000000000000000000000000000000000000000000000000000000000000 ^
b10011000000000000000000000000000000000000000000000000000000000000000000 "
b10011000000000000000000000000000000000000000000000000000000000000000000 p
b10011000000000000000000000000000000000000000000000000000000000000000000 N"
b10011000000000000000000000000000000000000000000000000000000000000000000 y"
b10011000000000000000000000000000000000000000000000000000000000000000000 F#
b10011000000000000000000000000000000000000000000000000000000000000000000 q#
b10011000000000000000000000000000000000000000000000000000000000000000000 >$
b10011000000000000000000000000000000000000000000000000000000000000000000 i$
b10011000000000000000000000000000000000000000000000000000000000000000000 6%
b10011000000000000000000000000000000000000000000000000000000000000000000 a%
b10011000000000000000000000000000000000000000000000000000000000000000000 .&
b10011000000000000000000000000000000000000000000000000000000000000000000 `&
b100 n
1g
b10 h
b0 i
b10011000000000000000000000000000000000000000000000000000000000000000000 j
b1001100 b
b100110000000000000000000000000010100100 `
b1111 l
b1111 e
b1001 d
b1111111111111111111111111111111100101111 c
b10 k
b100 m
b100 %"
b100 <"
b100 A"
b10100100100000000000000000000000 8"
b10100100100000000000000000000000 @"
b100 ~
b11 |
b11 7
b11 N
b111 }
b111 =
b111 M
b111 ."
b1100011111110000000000001110000 /"
0>
0@
#1040
b101 1"
b100 2"
b100 3"
b100 y
b100 $
b100 P"
b100 {"
b100 H#
b100 s#
b100 @$
b100 k$
b100 8%
b100 c%
b100 0&
b100 b&
b1100100011110000000000010001000 {
b1100100011110000000000010001000 &
b1100100011110000000000010001000 U"
b1100100011110000000000010001000 "#
b1100100011110000000000010001000 M#
b1100100011110000000000010001000 x#
b1100100011110000000000010001000 E$
b1100100011110000000000010001000 p$
b1100100011110000000000010001000 =%
b1100100011110000000000010001000 h%
b1100100011110000000000010001000 6&
b1100100011110000000000010001000 h&
b100 &"
1G"
b1 I"
b1100100011110000000000010001000 E"
1>
1@
#1041
b100 `"
b1111111111111111111111111111111100100100 '
b1111111111111111111111111111111100100100 Y
b1111111111111111111111111111111100100100 Q"
b1111111111111111111111111111111100100100 |"
b1111111111111111111111111111111100100100 I#
b1111111111111111111111111111111100100100 t#
b1111111111111111111111111111111100100100 A$
b1111111111111111111111111111111100100100 l$
b1111111111111111111111111111111100100100 9%
b1111111111111111111111111111111100100100 d%
b1111111111111111111111111111111100100100 1&
b1111111111111111111111111111111100100100 c&
1_"
b1 +
b1 r
b1 R"
b1 }"
b1 J#
b1 u#
b1 B$
b1 m$
b1 :%
b1 e%
b1 3&
b1 e&
b10100100100000000000000000000000 >"
b10100100100000000000000000000000 t
b10001000 ^"
b1 ["
b1 u"
0k"
b1 j"
b100 i"
b100 t"
b10011000000000000000000000000000000000000000000000000000000000000000000 s"
b1 w"
b11110 b"
b11110 -
b11110 B
b11110 P
b1 0
b1 F
b1 u
b1 V"
b1 ##
b1 N#
b1 y#
b1 F$
b1 q$
b1 >%
b1 i%
b1 8&
b1 j&
b0 3
b0 I
b0 S
b0 w
b0 Y"
b0 &#
b0 Q#
b0 |#
b0 I$
b0 t$
b0 A%
b0 l%
b0 <&
b0 n&
b110 a"
#1042
bz b"
bz -
bz B
bz P
bx 0
bx F
bx u
bx V"
bx ##
bx N#
bx y#
bx F$
bx q$
bx >%
bx i%
bx 8&
bx j&
bx 3
bx I
bx S
bx w
bx Y"
bx &#
bx Q#
bx |#
bx I$
bx t$
bx A%
bx l%
bx <&
bx n&
#1044
b1111 -#
b1111111111111111111111111111111111110100 '
b1111111111111111111111111111111111110100 Y
b1111111111111111111111111111111111110100 Q"
b1111111111111111111111111111111111110100 |"
b1111111111111111111111111111111111110100 I#
b1111111111111111111111111111111111110100 t#
b1111111111111111111111111111111111110100 A$
b1111111111111111111111111111111111110100 l$
b1111111111111111111111111111111111110100 9%
b1111111111111111111111111111111111110100 d%
b1111111111111111111111111111111111110100 1&
b1111111111111111111111111111111111110100 c&
02#
b0 *
b0 \
b0 X"
b0 %#
b0 P#
b0 {#
b0 H$
b0 s$
b0 @%
b0 k%
b0 :&
b0 l&
#1045
b101 ;"
b0 _
b0 #
b0 q
b0 O"
b0 z"
b0 G#
b0 r#
b0 ?$
b0 j$
b0 7%
b0 b%
b0 /&
b0 a&
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ^
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 "
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 p
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 N"
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 y"
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 F#
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 q#
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 >$
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 i$
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 6%
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 a%
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 .&
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 `&
b0 n
0g
b0 f
b0 h
b0 i
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 j
b10100100 b
b0 a
b1111 l
b1111 e
b1001 d
b1111111111111111111111111111111111110100 c
b10 k
b0 m
b101 %"
b101 <"
b101 A"
b11010100100000000100000000011111 8"
b11010100100000000100000000011111 @"
b101 ~
b100 |
b100 7
b100 N
b1000 }
b1000 =
b1000 M
b1000 ."
b1100100011110000000000010001000 /"
0>
0@
#1050
0l"
0p"
0q"
b0 i"
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 o"
b10001000 n"
b1111 m"
b110 1"
b101 2"
b101 3"
b101 y
b101 $
b101 P"
b101 {"
b101 H#
b101 s#
b101 @$
b101 k$
b101 8%
b101 c%
b101 0&
b101 b&
b111 z
b111 %
b111 T"
b111 !#
b111 L#
b111 w#
b111 D$
b111 o$
b111 <%
b111 g%
b111 5&
b111 g&
b10100100100000000000000000000000 {
b10100100100000000000000000000000 &
b10100100100000000000000000000000 U"
b10100100100000000000000000000000 "#
b10100100100000000000000000000000 M#
b10100100100000000000000000000000 x#
b10100100100000000000000000000000 E$
b10100100100000000000000000000000 p$
b10100100100000000000000000000000 =%
b10100100100000000000000000000000 h%
b10100100100000000000000000000000 6&
b10100100100000000000000000000000 h&
b101 &"
1G"
b1001 H"
b1000 I"
b1001 J"
b111 L"
b1010 M"
b1010 F"
b10100100100000000000000000000000 E"
1>
1@
#1051
b101 s%
b1111111101011111111111111111111111110100 '
b1111111101011111111111111111111111110100 Y
b1111111101011111111111111111111111110100 Q"
b1111111101011111111111111111111111110100 |"
b1111111101011111111111111111111111110100 I#
b1111111101011111111111111111111111110100 t#
b1111111101011111111111111111111111110100 A$
b1111111101011111111111111111111111110100 l$
b1111111101011111111111111111111111110100 9%
b1111111101011111111111111111111111110100 d%
b1111111101011111111111111111111111110100 1&
b1111111101011111111111111111111111110100 c&
1r%
b10000001 +
b10000001 r
b10000001 R"
b10000001 }"
b10000001 J#
b10000001 u#
b10000001 B$
b10000001 m$
b10000001 :%
b10000001 e%
b10000001 3&
b10000001 e&
b11010100100000000100000000011111 >"
b11010100100000000100000000011111 t
b1111 o%
b0 q%
b1111 n%
b0 p%
b1111 *&
b0 +&
b0 )&
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (&
b1111 ,&
b0 -&
b0 u%
b0 -
b0 B
b0 P
b1111 0
b1111 F
b1111 u
b1111 V"
b1111 ##
b1111 N#
b1111 y#
b1111 F$
b1111 q$
b1111 >%
b1111 i%
b1111 8&
b1111 j&
b0 3
b0 I
b0 S
b0 w
b0 Y"
b0 &#
b0 Q#
b0 |#
b0 I$
b0 t$
b0 A%
b0 l%
b0 <&
b0 n&
b1010 t%
#1052
bz u%
bz -
bz B
bz P
bx 0
bx F
bx u
bx V"
bx ##
bx N#
bx y#
bx F$
bx q$
bx >%
bx i%
bx 8&
bx j&
bx 3
bx I
bx S
bx w
bx Y"
bx &#
bx Q#
bx |#
bx I$
bx t$
bx A%
bx l%
bx <&
bx n&
#1055
b110 ;"
b111 f
b0 b
b111 a
b0 i
b0 j
b1111 l
b1111 e
b1001 d
b1111111101011111111111111111111111110100 c
b10 k
b110 %"
b110 <"
b110 A"
b10100101000000000000000000000000 8"
b10100101000000000000000000000000 @"
b110 ~
b101 |
b101 7
b101 N
b0 }
b0 =
b0 M
b0 ."
b1010 0"
b10100100100000000000000000000000 /"
0>
0@
#1060
0r%
b1 +
b1 r
b1 R"
b1 }"
b1 J#
b1 u#
b1 B$
b1 m$
b1 :%
b1 e%
b1 3&
b1 e&
1x%
b10000000 *
b10000000 \
b10000000 X"
b10000000 %#
b10000000 P#
b10000000 {#
b10000000 H$
b10000000 s$
b10000000 @%
b10000000 k%
b10000000 :&
b10000000 l&
1%&
b0 '&
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 $&
b0 #&
b1111 "&
1!&
0p"
b10001000 n"
b1111 m"
0l"
b111 1"
b110 2"
b110 3"
0+"
0:
b1101 F"
b11010100100000000100000000011111 E"
1>
1@
#1061
b10100101000000000000000000000000 >"
b10100101000000000000000000000000 t
#1065
b111 ;"
b100000 _
b100000 #
b100000 q
b100000 O"
b100000 z"
b100000 G#
b100000 r#
b100000 ?$
b100000 j$
b100000 7%
b100000 b%
b100000 /&
b100000 a&
b100000 m
b100000 n
1g
b111 f
b10000000 h
b0 i
b0 j
b0 b
b111 a
b1111 l
b1111 e
b1001 d
b10 k
b111 %"
b111 <"
b111 A"
b11010101000000000110000000011101 8"
b11010101000000000110000000011101 @"
b111 ~
0>
0@
#1070
b100000 i"
0p"
b100000 r"
b10001000 n"
b1111 m"
0l"
b111 3"
b1000 1"
b111 2"
1>
1@
#1071
b11010101000000000110000000011101 >"
b11010101000000000110000000011101 t
#1073
b1111 s%
b1111111111111111111111111111111111110100 '
b1111111111111111111111111111111111110100 Y
b1111111111111111111111111111111111110100 Q"
b1111111111111111111111111111111111110100 |"
b1111111111111111111111111111111111110100 I#
b1111111111111111111111111111111111110100 t#
b1111111111111111111111111111111111110100 A$
b1111111111111111111111111111111111110100 l$
b1111111111111111111111111111111111110100 9%
b1111111111111111111111111111111111110100 d%
b1111111111111111111111111111111111110100 1&
b1111111111111111111111111111111111110100 c&
0x%
b0 *
b0 \
b0 X"
b0 %#
b0 P#
b0 {#
b0 H$
b0 s$
b0 @%
b0 k%
b0 :&
b0 l&
#1075
b1000 ;"
b0 _
b0 #
b0 q
b0 O"
b0 z"
b0 G#
b0 r#
b0 ?$
b0 j$
b0 7%
b0 b%
b0 /&
b0 a&
b0 n
0g
b0 f
b0 h
b0 i
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 j
b10100100 b
b0 a
b1111 l
b1111 e
b1001 d
b1111111111111111111111111111111111110100 c
b10 k
b0 m
b1000 %"
b1000 <"
b1000 A"
b10100101100000000000000000000000 8"
b10100101100000000000000000000000 @"
b1000 ~
0>
0@
#1080
b0 i"
0p"
b0 r"
b10001000 n"
b1111 m"
0l"
b1000 3"
b1001 1"
b1000 2"
1>
1@
#1081
b101 s%
b1111111101011111111111111111111111110100 '
b1111111101011111111111111111111111110100 Y
b1111111101011111111111111111111111110100 Q"
b1111111101011111111111111111111111110100 |"
b1111111101011111111111111111111111110100 I#
b1111111101011111111111111111111111110100 t#
b1111111101011111111111111111111111110100 A$
b1111111101011111111111111111111111110100 l$
b1111111101011111111111111111111111110100 9%
b1111111101011111111111111111111111110100 d%
b1111111101011111111111111111111111110100 1&
b1111111101011111111111111111111111110100 c&
1r%
b10000001 +
b10000001 r
b10000001 R"
b10000001 }"
b10000001 J#
b10000001 u#
b10000001 B$
b10000001 m$
b10000001 :%
b10000001 e%
b10000001 3&
b10000001 e&
b10100101100000000000000000000000 >"
b10100101100000000000000000000000 t
b0 u%
b0 -
b0 B
b0 P
b1111 0
b1111 F
b1111 u
b1111 V"
b1111 ##
b1111 N#
b1111 y#
b1111 F$
b1111 q$
b1111 >%
b1111 i%
b1111 8&
b1111 j&
b0 3
b0 I
b0 S
b0 w
b0 Y"
b0 &#
b0 Q#
b0 |#
b0 I$
b0 t$
b0 A%
b0 l%
b0 <&
b0 n&
#1082
bz u%
bz -
bz B
bz P
bx 0
bx F
bx u
bx V"
bx ##
bx N#
bx y#
bx F$
bx q$
bx >%
bx i%
bx 8&
bx j&
bx 3
bx I
bx S
bx w
bx Y"
bx &#
bx Q#
bx |#
bx I$
bx t$
bx A%
bx l%
bx <&
bx n&
#1085
b1001 ;"
b111 f
b0 b
b111 a
b0 i
b0 j
b1111 l
b1111 e
b1001 d
b1111111101011111111111111111111111110100 c
b10 k
b1001 %"
b1001 <"
b1001 A"
b11010101100000000100000000011011 8"
b11010101100000000100000000011011 @"
b1001 ~
0>
0@
#1090
0r%
b1 +
b1 r
b1 R"
b1 }"
b1 J#
b1 u#
b1 B$
b1 m$
b1 :%
b1 e%
b1 3&
b1 e&
1x%
b10000000 *
b10000000 \
b10000000 X"
b10000000 %#
b10000000 P#
b10000000 {#
b10000000 H$
b10000000 s$
b10000000 @%
b10000000 k%
b10000000 :&
b10000000 l&
0p"
b10001000 n"
b1111 m"
0l"
b1001 3"
b1010 1"
b1001 2"
1>
1@
#1091
b11010101100000000100000000011011 >"
b11010101100000000100000000011011 t
#1095
b1010 ;"
b100000 _
b100000 #
b100000 q
b100000 O"
b100000 z"
b100000 G#
b100000 r#
b100000 ?$
b100000 j$
b100000 7%
b100000 b%
b100000 /&
b100000 a&
b100000 m
b100000 n
1g
b111 f
b10000000 h
b0 i
b0 j
b0 b
b111 a
b1111 l
b1111 e
b1001 d
b10 k
b1010 %"
b1010 <"
b1010 A"
b1110110001001000000000000001100 8"
b1110110001001000000000000001100 @"
b1010 ~
0>
0@
#1100
b100000 i"
0p"
b100000 r"
b10001000 n"
b1111 m"
0l"
b1010 3"
b1011 1"
b1010 2"
1>
1@
#1101
b1110110001001000000000000001100 >"
b1110110001001000000000000001100 t
#1103
b1111 s%
b1111111111111111111111111111111111110100 '
b1111111111111111111111111111111111110100 Y
b1111111111111111111111111111111111110100 Q"
b1111111111111111111111111111111111110100 |"
b1111111111111111111111111111111111110100 I#
b1111111111111111111111111111111111110100 t#
b1111111111111111111111111111111111110100 A$
b1111111111111111111111111111111111110100 l$
b1111111111111111111111111111111111110100 9%
b1111111111111111111111111111111111110100 d%
b1111111111111111111111111111111111110100 1&
b1111111111111111111111111111111111110100 c&
0x%
b0 *
b0 \
b0 X"
b0 %#
b0 P#
b0 {#
b0 H$
b0 s$
b0 @%
b0 k%
b0 :&
b0 l&
#1105
b1011 ;"
b0 _
b0 #
b0 q
b0 O"
b0 z"
b0 G#
b0 r#
b0 ?$
b0 j$
b0 7%
b0 b%
b0 /&
b0 a&
b0 n
0g
b0 f
b0 h
b0 i
b1010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 j
b10100100 b
b0 a
b1111 l
b1111 e
b1001 d
b1111111111111111111111111111111111110100 c
b10 k
b0 m
b1011 %"
b1011 <"
b1011 A"
b10110000110011000000000000000 8"
b10110000110011000000000000000 @"
b1011 ~
0>
0@
#1110
b0 i"
0p"
b0 r"
b10001000 n"
b1111 m"
0l"
b1011 3"
b1100 1"
b1011 2"
1>
1@
