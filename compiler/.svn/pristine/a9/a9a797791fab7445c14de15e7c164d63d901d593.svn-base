
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 19 22:00:19 CST 2013
//----------------------------------------------------

package roxanne.syntactic;

import java.io.*;
import roxanne.ast.*;
import roxanne.ast.Character;
import roxanne.ast.Void;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 19 22:00:19 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\004\000\002\015\004\000\002\016\006" +
    "\000\002\016\004\000\002\016\005\000\002\017\007\000" +
    "\002\017\010\000\002\020\003\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\022\004\000\002\023" +
    "\003\000\002\023\005\000\002\024\003\000\002\024\005" +
    "\000\002\025\003\000\002\025\005\000\002\013\003\000" +
    "\002\013\005\000\002\026\005\000\002\026\006\000\002" +
    "\026\003\000\002\026\003\000\002\027\006\000\002\027" +
    "\006\000\002\030\003\000\002\030\004\000\002\010\004" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\006\000\002\011\007\000\002" +
    "\011\004\000\002\043\003\000\002\043\003\000\002\044" +
    "\005\000\002\044\006\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\003\000\002\033\004\000\002" +
    "\037\005\000\002\037\004\000\002\037\005\000\002\037" +
    "\006\000\002\040\003\000\002\040\004\000\002\041\003" +
    "\000\002\041\004\000\002\034\007\000\002\034\013\000" +
    "\002\014\003\000\002\014\002\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\005\000\002\036" +
    "\011\000\002\036\003\000\002\042\007\000\002\042\011" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\003\000\002\004\003\000\002\004\006\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\006\000\002\005\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\006\000\002\005\005\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\007\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\005\000\002\012\003\000\002" +
    "\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\016\004\013\005\011\006\016\007\004\010" +
    "\010\011\006\001\002\000\012\023\uffde\030\uffde\036\uffde" +
    "\103\uffde\001\002\000\006\024\355\103\354\001\002\000" +
    "\006\024\uffd9\103\uffd9\001\002\000\020\002\000\004\013" +
    "\005\011\006\016\007\004\010\010\011\006\001\002\000" +
    "\006\024\uffda\103\uffda\001\002\000\012\023\uffe0\030\uffe0" +
    "\036\uffe0\103\uffe0\001\002\000\004\002\352\001\002\000" +
    "\014\005\011\006\016\007\004\010\010\011\006\001\002" +
    "\000\010\030\021\036\027\103\020\001\002\000\020\002" +
    "\uffff\004\013\005\011\006\016\007\004\010\010\011\006" +
    "\001\002\000\012\023\uffdf\030\uffdf\036\uffdf\103\uffdf\001" +
    "\002\000\004\002\ufffd\001\002\000\016\022\uffe4\023\uffe4" +
    "\026\uffe4\030\uffe4\031\uffe4\067\uffe4\001\002\000\076\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\024\ufffb\025\ufffb\030\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\041\ufffb\042\ufffb\052\ufffb\053\ufffb\054\ufffb\102" +
    "\ufffb\103\ufffb\104\ufffb\105\ufffb\001\002\000\004\030\343" +
    "\001\002\000\014\023\uffe7\026\340\030\uffe7\031\uffe7\067" +
    "\uffe7\001\002\000\006\030\ufff0\031\336\001\002\000\014" +
    "\022\221\026\222\030\uffe8\031\uffe8\067\uffe8\001\002\000" +
    "\010\030\uffee\031\uffee\067\031\001\002\000\006\036\027" +
    "\103\020\001\002\000\016\022\uffe3\023\uffe3\026\uffe3\030" +
    "\uffe3\031\uffe3\067\uffe3\001\002\000\040\021\034\022\044" +
    "\024\043\034\037\035\056\036\032\041\052\042\055\052" +
    "\033\053\041\054\042\102\047\103\046\104\040\105\054" +
    "\001\002\000\036\021\034\022\044\034\037\035\056\036" +
    "\032\041\052\042\055\052\033\053\041\054\042\102\047" +
    "\103\046\104\040\105\054\001\002\000\036\021\034\022" +
    "\044\034\037\035\056\036\032\041\052\042\055\052\033" +
    "\053\041\054\042\102\047\103\046\104\040\105\054\001" +
    "\002\000\036\021\034\022\213\034\037\035\056\036\032" +
    "\041\052\042\055\052\033\053\041\054\042\102\047\103" +
    "\046\104\040\105\054\001\002\000\062\023\uff9d\025\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\050\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\067\uff9d\001\002\000\054\030\uffec\031\uffec" +
    "\034\074\035\105\036\066\037\102\040\070\050\076\051" +
    "\110\052\067\055\075\056\071\057\111\060\103\061\107" +
    "\062\073\063\077\064\072\065\104\066\100\067\106\001" +
    "\002\000\036\021\034\022\044\034\037\035\056\036\032" +
    "\041\052\042\055\052\033\053\041\054\042\102\047\103" +
    "\046\104\040\105\054\001\002\000\122\022\uff85\023\uff85" +
    "\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\047\uff85\050\uff85\051\uff85\052\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85" +
    "\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074" +
    "\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\001\002" +
    "\000\036\021\034\022\044\034\037\035\056\036\032\041" +
    "\052\042\055\052\033\053\041\054\042\102\047\103\046" +
    "\104\040\105\054\001\002\000\036\021\034\022\044\034" +
    "\037\035\056\036\032\041\052\042\055\052\033\053\041" +
    "\054\042\102\047\103\046\104\040\105\054\001\002\000" +
    "\036\021\034\022\044\034\037\035\056\036\032\041\052" +
    "\042\055\052\033\053\041\054\042\102\047\103\046\104" +
    "\040\105\054\001\002\000\050\005\011\006\016\007\004" +
    "\010\010\011\006\021\034\022\044\034\037\035\056\036" +
    "\032\041\052\042\055\052\033\053\041\054\042\102\047" +
    "\103\046\104\040\105\054\001\002\000\040\021\034\022" +
    "\044\023\175\034\037\035\056\036\032\041\052\042\055" +
    "\052\033\053\041\054\042\102\047\103\046\104\040\105" +
    "\054\001\002\000\122\022\uff86\023\uff86\025\uff86\026\uff86" +
    "\027\uff86\030\uff86\031\uff86\032\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\047\uff86\050\uff86" +
    "\051\uff86\052\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076" +
    "\uff86\077\uff86\100\uff86\101\uff86\001\002\000\122\022\uff84" +
    "\023\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84" +
    "\042\uff84\047\uff84\050\uff84\051\uff84\052\uff84\055\uff84\056" +
    "\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073" +
    "\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84" +
    "\001\002\000\106\023\uff9c\025\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\150\071\155\072\156\073\153\074\151\075\154\076" +
    "\160\077\147\100\157\101\152\001\002\000\006\030\uffed" +
    "\031\uffed\001\002\000\036\021\034\022\140\034\037\035" +
    "\056\036\032\041\052\042\055\052\033\053\041\054\042" +
    "\102\047\103\046\104\040\105\054\001\002\000\122\022" +
    "\uff8f\023\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\144\042\145\047\uff8f\050\uff8f\051\uff8f\052\uff8f\055\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064" +
    "\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f" +
    "\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101" +
    "\uff8f\001\002\000\122\022\uff83\023\uff83\025\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\034\uff83\035\uff83\036" +
    "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076" +
    "\uff83\077\uff83\100\uff83\101\uff83\001\002\000\036\021\034" +
    "\022\140\034\037\035\056\036\032\041\052\042\055\052" +
    "\033\053\041\054\042\102\047\103\046\104\040\105\054" +
    "\001\002\000\036\021\034\022\044\034\037\035\056\036" +
    "\032\041\052\042\055\052\033\053\041\054\042\102\047" +
    "\103\046\104\040\105\054\001\002\000\116\022\061\023" +
    "\uff9a\025\uff9a\026\062\027\uff9a\030\uff9a\031\uff9a\032\063" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\047\060\050" +
    "\uff9a\051\uff9a\052\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\100\uff9a\101\uff9a\001\002\000\004\103" +
    "\135\001\002\000\040\021\uff87\022\uff87\023\uff87\034\uff87" +
    "\035\uff87\036\uff87\041\uff87\042\uff87\052\uff87\053\uff87\054" +
    "\uff87\102\uff87\103\uff87\104\uff87\105\uff87\001\002\000\036" +
    "\021\034\022\044\034\037\035\056\036\032\041\052\042" +
    "\055\052\033\053\041\054\042\102\047\103\046\104\040" +
    "\105\054\001\002\000\004\103\064\001\002\000\116\022" +
    "\uff88\023\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\032\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\001\002\000" +
    "\052\027\101\034\074\035\105\036\066\037\102\040\070" +
    "\050\076\051\110\052\067\055\075\056\071\057\111\060" +
    "\103\061\107\062\073\063\077\064\072\065\104\066\100" +
    "\067\106\001\002\000\036\021\034\022\044\034\037\035" +
    "\056\036\032\041\052\042\055\052\033\053\041\054\042" +
    "\102\047\103\046\104\040\105\054\001\002\000\036\021" +
    "\034\022\044\034\037\035\056\036\032\041\052\042\055" +
    "\052\033\053\041\054\042\102\047\103\046\104\040\105" +
    "\054\001\002\000\036\021\034\022\044\034\037\035\056" +
    "\036\032\041\052\042\055\052\033\053\041\054\042\102" +
    "\047\103\046\104\040\105\054\001\002\000\036\021\034" +
    "\022\044\034\037\035\056\036\032\041\052\042\055\052" +
    "\033\053\041\054\042\102\047\103\046\104\040\105\054" +
    "\001\002\000\036\021\034\022\044\034\037\035\056\036" +
    "\032\041\052\042\055\052\033\053\041\054\042\102\047" +
    "\103\046\104\040\105\054\001\002\000\036\021\034\022" +
    "\044\034\037\035\056\036\032\041\052\042\055\052\033" +
    "\053\041\054\042\102\047\103\046\104\040\105\054\001" +
    "\002\000\036\021\034\022\044\034\037\035\056\036\032" +
    "\041\052\042\055\052\033\053\041\054\042\102\047\103" +
    "\046\104\040\105\054\001\002\000\036\021\034\022\044" +
    "\034\037\035\056\036\032\041\052\042\055\052\033\053" +
    "\041\054\042\102\047\103\046\104\040\105\054\001\002" +
    "\000\036\021\034\022\044\034\037\035\056\036\032\041" +
    "\052\042\055\052\033\053\041\054\042\102\047\103\046" +
    "\104\040\105\054\001\002\000\036\021\034\022\044\034" +
    "\037\035\056\036\032\041\052\042\055\052\033\053\041" +
    "\054\042\102\047\103\046\104\040\105\054\001\002\000" +
    "\036\021\034\022\044\034\037\035\056\036\032\041\052" +
    "\042\055\052\033\053\041\054\042\102\047\103\046\104" +
    "\040\105\054\001\002\000\116\022\uff8c\023\uff8c\025\uff8c" +
    "\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\034\uff8c\035" +
    "\uff8c\036\uff8c\037\uff8c\040\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c" +
    "\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077" +
    "\uff8c\100\uff8c\101\uff8c\001\002\000\036\021\034\022\044" +
    "\034\037\035\056\036\032\041\052\042\055\052\033\053" +
    "\041\054\042\102\047\103\046\104\040\105\054\001\002" +
    "\000\036\021\034\022\044\034\037\035\056\036\032\041" +
    "\052\042\055\052\033\053\041\054\042\102\047\103\046" +
    "\104\040\105\054\001\002\000\036\021\034\022\044\034" +
    "\037\035\056\036\032\041\052\042\055\052\033\053\041" +
    "\054\042\102\047\103\046\104\040\105\054\001\002\000" +
    "\036\021\034\022\044\034\037\035\056\036\032\041\052" +
    "\042\055\052\033\053\041\054\042\102\047\103\046\104" +
    "\040\105\054\001\002\000\036\021\034\022\044\034\037" +
    "\035\056\036\032\041\052\042\055\052\033\053\041\054" +
    "\042\102\047\103\046\104\040\105\054\001\002\000\036" +
    "\021\034\022\044\034\037\035\056\036\032\041\052\042" +
    "\055\052\033\053\041\054\042\102\047\103\046\104\040" +
    "\105\054\001\002\000\036\021\034\022\044\034\037\035" +
    "\056\036\032\041\052\042\055\052\033\053\041\054\042" +
    "\102\047\103\046\104\040\105\054\001\002\000\036\021" +
    "\034\022\044\034\037\035\056\036\032\041\052\042\055" +
    "\052\033\053\041\054\042\102\047\103\046\104\040\105" +
    "\054\001\002\000\062\023\uffaa\025\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffaa\051\uffaa\052\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\001\002\000\062\023\uffb1\025\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffb1\051\uffb1\052\067\055\uffb1\056\uffb1\057\111\060\103" +
    "\061\107\062\073\063\077\064\072\065\104\066\100\067" +
    "\uffb1\001\002\000\062\023\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffb0\051\uffb0\052\uffb0\055\uffb0\056\uffb0\057\111\060\103" +
    "\061\uffb0\062\uffb0\063\077\064\072\065\104\066\100\067" +
    "\uffb0\001\002\000\062\023\uffa8\025\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\034\074\035\105\036\066\037\102\040\070\050" +
    "\076\051\110\052\067\055\075\056\071\057\111\060\103" +
    "\061\107\062\073\063\077\064\072\065\104\066\100\067" +
    "\106\001\002\000\062\023\uffb9\025\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\034\uffb9\035\uffb9\036\066\037\102\040\070\050" +
    "\uffb9\051\uffb9\052\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067" +
    "\uffb9\001\002\000\062\023\uffae\025\uffae\027\uffae\030\uffae" +
    "\031\uffae\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffae\051\uffae\052\uffae\055\uffae\056\uffae\057\111\060\103" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067" +
    "\uffae\001\002\000\062\023\uffa9\025\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffa9\051\uffa9\052\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\001\002\000\062\023\uffb7\025\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\001\002\000\062\023\uffad\025\uffad\027\uffad\030\uffad" +
    "\031\uffad\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffad\051\uffad\052\uffad\055\uffad\056\uffad\057\111\060\103" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\001\002\000\062\023\uffac\025\uffac\027\uffac\030\uffac" +
    "\031\uffac\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffac\051\uffac\052\uffac\055\uffac\056\uffac\057\111\060\103" +
    "\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\001\002\000\062\023\uffb3\025\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffb3\051\110\052\067\055\uffb3\056\uffb3\057\111\060\103" +
    "\061\107\062\073\063\077\064\072\065\104\066\100\067" +
    "\uffb3\001\002\000\062\023\uffb5\025\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\034\074\035\105\036\066\037\102\040\070\050" +
    "\076\051\110\052\067\055\uffb5\056\071\057\111\060\103" +
    "\061\107\062\073\063\077\064\072\065\104\066\100\067" +
    "\uffb5\001\002\000\062\023\uffba\025\uffba\027\uffba\030\uffba" +
    "\031\uffba\034\uffba\035\uffba\036\066\037\102\040\070\050" +
    "\uffba\051\uffba\052\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067" +
    "\uffba\001\002\000\062\023\uffaf\025\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffaf\051\uffaf\052\uffaf\055\uffaf\056\uffaf\057\111\060\103" +
    "\061\uffaf\062\uffaf\063\077\064\072\065\104\066\100\067" +
    "\uffaf\001\002\000\062\023\uffab\025\uffab\027\uffab\030\uffab" +
    "\031\uffab\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffab\051\uffab\052\uffab\055\uffab\056\uffab\057\111\060\103" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067" +
    "\uffab\001\002\000\062\023\uffb4\025\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\034\074\035\105\036\066\037\102\040\070\050" +
    "\076\051\110\052\067\055\uffb4\056\uffb4\057\111\060\103" +
    "\061\107\062\073\063\077\064\072\065\104\066\100\067" +
    "\uffb4\001\002\000\062\023\uffb6\025\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067" +
    "\uffb6\001\002\000\062\023\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\034\074\035\105\036\066\037\102\040\070\050" +
    "\uffb2\051\uffb2\052\uffb2\055\uffb2\056\uffb2\057\111\060\103" +
    "\061\107\062\073\063\077\064\072\065\104\066\100\067" +
    "\uffb2\001\002\000\062\023\uffb8\025\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\001\002\000\116\022\uff89\023\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\034\uff89\035\uff89\036" +
    "\uff89\037\uff89\040\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89" +
    "\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100" +
    "\uff89\101\uff89\001\002\000\106\023\uff95\025\uff95\027\uff95" +
    "\030\uff95\031\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\050\uff95\051\uff95\052\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95" +
    "\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95\001\002\000" +
    "\106\023\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c" +
    "\100\uff9c\101\uff9c\001\002\000\036\021\034\022\044\034" +
    "\037\035\056\036\032\041\052\042\055\052\033\053\041" +
    "\054\042\102\047\103\046\104\040\105\054\001\002\000" +
    "\106\023\uff98\025\uff98\027\uff98\030\uff98\031\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\050\uff98\051\uff98\052" +
    "\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98" +
    "\100\uff98\101\uff98\001\002\000\052\023\143\034\074\035" +
    "\105\036\066\037\102\040\070\050\076\051\110\052\067" +
    "\055\075\056\071\057\111\060\103\061\107\062\073\063" +
    "\077\064\072\065\104\066\100\067\106\001\002\000\122" +
    "\022\uff82\023\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82" +
    "\041\uff82\042\uff82\047\uff82\050\uff82\051\uff82\052\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072" +
    "\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82\100\uff82" +
    "\101\uff82\001\002\000\116\022\uff8e\023\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\047\uff8e\050\uff8e\051\uff8e\052" +
    "\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071" +
    "\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e" +
    "\100\uff8e\101\uff8e\001\002\000\116\022\uff8d\023\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\040\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d" +
    "\077\uff8d\100\uff8d\101\uff8d\001\002\000\106\023\uff99\025" +
    "\uff99\027\uff99\030\uff99\031\uff99\034\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\050\uff99\051\uff99\052\uff99\055\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99" +
    "\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99" +
    "\001\002\000\036\021\034\022\044\034\037\035\056\036" +
    "\032\041\052\042\055\052\033\053\041\054\042\102\047" +
    "\103\046\104\040\105\054\001\002\000\036\021\034\022" +
    "\044\034\037\035\056\036\032\041\052\042\055\052\033" +
    "\053\041\054\042\102\047\103\046\104\040\105\054\001" +
    "\002\000\036\021\034\022\044\034\037\035\056\036\032" +
    "\041\052\042\055\052\033\053\041\054\042\102\047\103" +
    "\046\104\040\105\054\001\002\000\036\021\034\022\044" +
    "\034\037\035\056\036\032\041\052\042\055\052\033\053" +
    "\041\054\042\102\047\103\046\104\040\105\054\001\002" +
    "\000\036\021\034\022\044\034\037\035\056\036\032\041" +
    "\052\042\055\052\033\053\041\054\042\102\047\103\046" +
    "\104\040\105\054\001\002\000\036\021\034\022\044\034" +
    "\037\035\056\036\032\041\052\042\055\052\033\053\041" +
    "\054\042\102\047\103\046\104\040\105\054\001\002\000" +
    "\036\021\034\022\044\034\037\035\056\036\032\041\052" +
    "\042\055\052\033\053\041\054\042\102\047\103\046\104" +
    "\040\105\054\001\002\000\036\021\034\022\044\034\037" +
    "\035\056\036\032\041\052\042\055\052\033\053\041\054" +
    "\042\102\047\103\046\104\040\105\054\001\002\000\036" +
    "\021\034\022\044\034\037\035\056\036\032\041\052\042" +
    "\055\052\033\053\041\054\042\102\047\103\046\104\040" +
    "\105\054\001\002\000\036\021\034\022\044\034\037\035" +
    "\056\036\032\041\052\042\055\052\033\053\041\054\042" +
    "\102\047\103\046\104\040\105\054\001\002\000\062\023" +
    "\uffa1\025\uffa1\027\uffa1\030\uffa1\031\uffa1\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\062\023" +
    "\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\034\074\035\105" +
    "\036\066\037\102\040\070\050\076\051\110\052\067\055" +
    "\075\056\071\057\111\060\103\061\107\062\073\063\077" +
    "\064\072\065\104\066\100\067\106\001\002\000\004\023" +
    "\200\001\002\000\060\023\uff81\025\uff81\030\uff81\031\176" +
    "\034\074\035\105\036\066\037\102\040\070\050\076\051" +
    "\110\052\067\055\075\056\071\057\111\060\103\061\107" +
    "\062\073\063\077\064\072\065\104\066\100\067\106\001" +
    "\002\000\116\022\uff8a\023\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\034\uff8a\035\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a" +
    "\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101" +
    "\uff8a\001\002\000\036\021\034\022\044\034\037\035\056" +
    "\036\032\041\052\042\055\052\033\053\041\054\042\102" +
    "\047\103\046\104\040\105\054\001\002\000\010\023\uff80" +
    "\025\uff80\030\uff80\001\002\000\116\022\uff8b\023\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\047\uff8b\050\uff8b\051" +
    "\uff8b\052\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070" +
    "\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b" +
    "\077\uff8b\100\uff8b\101\uff8b\001\002\000\006\023\uffe1\036" +
    "\uffe1\001\002\000\006\023\203\036\204\001\002\000\036" +
    "\021\034\022\044\034\037\035\056\036\032\041\052\042" +
    "\055\052\033\053\041\054\042\102\047\103\046\104\040" +
    "\105\054\001\002\000\006\023\uffe2\036\uffe2\001\002\000" +
    "\106\023\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\100\uff9b\101\uff9b\001\002\000\004\025\207\001\002\000" +
    "\006\030\uffeb\031\uffeb\001\002\000\106\023\uff92\025\uff92" +
    "\027\uff92\030\uff92\031\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\050\uff92\051\uff92\052\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\101\uff92\001" +
    "\002\000\106\023\uff93\025\uff93\027\uff93\030\uff93\031\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\050\uff93\051" +
    "\uff93\052\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93" +
    "\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070" +
    "\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93" +
    "\077\uff93\100\uff93\101\uff93\001\002\000\106\023\uff94\025" +
    "\uff94\027\uff94\030\uff94\031\uff94\034\uff94\035\uff94\036\uff94" +
    "\037\uff94\040\uff94\050\uff94\051\uff94\052\uff94\055\uff94\056" +
    "\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94" +
    "\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073" +
    "\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94" +
    "\001\002\000\050\005\011\006\016\007\004\010\010\011" +
    "\006\021\034\022\044\034\037\035\056\036\032\041\052" +
    "\042\055\052\033\053\041\054\042\102\047\103\046\104" +
    "\040\105\054\001\002\000\106\023\uff91\025\uff91\027\uff91" +
    "\030\uff91\031\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\050\uff91\051\uff91\052\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\101\uff91\001\002\000" +
    "\006\023\216\036\204\001\002\000\106\023\uff90\025\uff90" +
    "\027\uff90\030\uff90\031\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\040\uff90\050\uff90\051\uff90\052\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90" +
    "\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\101\uff90\001" +
    "\002\000\106\023\uff97\025\uff97\027\uff97\030\uff97\031\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\050\uff97\051" +
    "\uff97\052\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070" +
    "\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97" +
    "\077\uff97\100\uff97\101\uff97\001\002\000\106\023\uff96\025" +
    "\uff96\027\uff96\030\uff96\031\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\050\uff96\051\uff96\052\uff96\055\uff96\056" +
    "\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96" +
    "\001\002\000\016\005\011\006\016\007\004\010\010\011" +
    "\006\023\230\001\002\000\036\021\034\022\044\034\037" +
    "\035\056\036\032\041\052\042\055\052\033\053\041\054" +
    "\042\102\047\103\046\104\040\105\054\001\002\000\052" +
    "\027\224\034\074\035\105\036\066\037\102\040\070\050" +
    "\076\051\110\052\067\055\075\056\071\057\111\060\103" +
    "\061\107\062\073\063\077\064\072\065\104\066\100\067" +
    "\106\001\002\000\014\023\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\067\uffe6\001\002\000\006\036\027\103\020\001\002\000" +
    "\006\023\ufff7\031\333\001\002\000\006\023\ufff5\031\331" +
    "\001\002\000\012\024\233\030\uffea\031\uffea\067\uffea\001" +
    "\002\000\004\023\232\001\002\000\012\024\233\030\uffe9" +
    "\031\uffe9\067\uffe9\001\002\000\074\004\013\005\011\006" +
    "\016\007\004\010\010\011\006\012\247\014\255\015\241" +
    "\016\236\017\253\020\250\021\034\022\044\024\233\025" +
    "\256\030\243\034\037\035\056\036\032\041\052\042\055" +
    "\052\033\053\041\054\042\102\047\103\046\104\040\105" +
    "\054\001\002\000\020\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\001\002\000\062\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\024\uffd5\025\uffd5\030\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\041\uffd5\042\uffd5\052\uffd5\053\uffd5\054\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\105\uffd5\001\002\000\004\030\327\001" +
    "\002\000\004\025\326\001\002\000\062\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\024\uffd3\025\uffd3\030\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\041\uffd3\042\uffd3\052\uffd3\053\uffd3\054\uffd3\102\uffd3\103" +
    "\uffd3\104\uffd3\105\uffd3\001\002\000\004\022\315\001\002" +
    "\000\004\030\314\001\002\000\062\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\024\uffd0\025\uffd0\030\uffd0\034\uffd0\035\uffd0\036\uffd0\041" +
    "\uffd0\042\uffd0\052\uffd0\053\uffd0\054\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\001\002\000\062\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\024\uffd6\025\uffd6\030\uffd6\034\uffd6\035\uffd6\036\uffd6\041" +
    "\uffd6\042\uffd6\052\uffd6\053\uffd6\054\uffd6\102\uffd6\103\uffd6" +
    "\104\uffd6\105\uffd6\001\002\000\062\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\024\uffd1\025\uffd1\030\uffd1\034\uffd1\035\uffd1\036\uffd1\041" +
    "\uffd1\042\uffd1\052\uffd1\053\uffd1\054\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\001\002\000\074\004\013\005\011\006" +
    "\016\007\004\010\010\011\006\012\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\024\uffca\025" +
    "\uffca\030\uffca\034\uffca\035\uffca\036\uffca\041\uffca\042\uffca" +
    "\052\uffca\053\uffca\054\uffca\102\uffca\103\uffca\104\uffca\105" +
    "\uffca\001\002\000\004\022\303\001\002\000\040\021\034" +
    "\022\044\030\300\034\037\035\056\036\032\041\052\042" +
    "\055\052\033\053\041\054\042\102\047\103\046\104\040" +
    "\105\054\001\002\000\010\030\021\036\027\103\020\001" +
    "\002\000\062\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\030" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\041\uffd4\042\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\001" +
    "\002\000\004\030\272\001\002\000\062\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\024\uffbd\025\uffbd\030\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\041\uffbd\042\uffbd\052\uffbd\053\uffbd\054\uffbd\102\uffbd\103" +
    "\uffbd\104\uffbd\105\uffbd\001\002\000\004\022\266\001\002" +
    "\000\100\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\030" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd\042\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\001" +
    "\002\000\060\012\247\014\255\015\241\016\236\017\253" +
    "\020\250\021\034\022\044\024\233\025\264\030\243\034" +
    "\037\035\056\036\032\041\052\042\055\052\033\053\041" +
    "\054\042\102\047\103\046\104\040\105\054\001\002\000" +
    "\062\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\030\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\001\002\000" +
    "\060\012\247\014\255\015\241\016\236\017\253\020\250" +
    "\021\034\022\044\024\233\025\uffc8\030\243\034\037\035" +
    "\056\036\032\041\052\042\055\052\033\053\041\054\042" +
    "\102\047\103\046\104\040\105\054\001\002\000\004\025" +
    "\uffc7\001\002\000\004\025\265\001\002\000\100\002\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\024\uffcc\025\uffcc\030\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\041\uffcc\042\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\105\uffcc\001\002\000\100\002" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\030\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\041\uffcb\042\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\001\002\000\036" +
    "\021\034\022\044\034\037\035\056\036\032\041\052\042" +
    "\055\052\033\053\041\054\042\102\047\103\046\104\040" +
    "\105\054\001\002\000\004\023\270\001\002\000\056\012" +
    "\247\014\255\015\241\016\236\017\253\020\250\021\034" +
    "\022\044\024\233\030\243\034\037\035\056\036\032\041" +
    "\052\042\055\052\033\053\041\054\042\102\047\103\046" +
    "\104\040\105\054\001\002\000\062\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\024\uffc6\025\uffc6\030\uffc6\034\uffc6\035\uffc6\036\uffc6\041" +
    "\uffc6\042\uffc6\052\uffc6\053\uffc6\054\uffc6\102\uffc6\103\uffc6" +
    "\104\uffc6\105\uffc6\001\002\000\062\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\024\uffc1\025\uffc1\030\uffc1\034\uffc1\035\uffc1\036\uffc1\041" +
    "\uffc1\042\uffc1\052\uffc1\053\uffc1\054\uffc1\102\uffc1\103\uffc1" +
    "\104\uffc1\105\uffc1\001\002\000\016\022\274\023\uffe8\026" +
    "\222\030\uffe8\031\uffe8\067\uffe8\001\002\000\016\005\011" +
    "\006\016\007\004\010\010\011\006\023\275\001\002\000" +
    "\012\023\uffea\030\uffea\031\uffea\067\uffea\001\002\000\004" +
    "\023\277\001\002\000\012\023\uffe9\030\uffe9\031\uffe9\067" +
    "\uffe9\001\002\000\062\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025" +
    "\uffc0\030\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\102\uffc0\103\uffc0\104\uffc0\105" +
    "\uffc0\001\002\000\004\030\302\001\002\000\062\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\024\uffbf\025\uffbf\030\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\041\uffbf\042\uffbf\052\uffbf\053\uffbf\054\uffbf\102" +
    "\uffbf\103\uffbf\104\uffbf\105\uffbf\001\002\000\036\021\034" +
    "\022\044\034\037\035\056\036\032\041\052\042\055\052" +
    "\033\053\041\054\042\102\047\103\046\104\040\105\054" +
    "\001\002\000\052\023\305\034\074\035\105\036\066\037" +
    "\102\040\070\050\076\051\110\052\067\055\075\056\071" +
    "\057\111\060\103\061\107\062\073\063\077\064\072\065" +
    "\104\066\100\067\106\001\002\000\056\012\247\014\255" +
    "\015\241\016\236\017\253\020\250\021\034\022\044\024" +
    "\233\030\243\034\037\035\056\036\032\041\052\042\055" +
    "\052\033\053\041\054\042\102\047\103\046\104\040\105" +
    "\054\001\002\000\062\012\uffd6\013\310\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\030\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6\042\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\102\uffd6\103\uffd6\104\uffd6\105" +
    "\uffd6\001\002\000\062\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025" +
    "\uffbc\030\uffbc\034\uffbc\035\uffbc\036\uffbc\041\uffbc\042\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\001\002\000\056\012\247\014\255\015\241\016\236" +
    "\017\253\020\250\021\034\022\044\024\233\030\243\034" +
    "\037\035\056\036\032\041\052\042\055\052\033\053\041" +
    "\054\042\102\047\103\046\104\040\105\054\001\002\000" +
    "\062\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\030\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\001\002\000" +
    "\062\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe\030\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\041\uffbe\042\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\001\002\000" +
    "\060\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\024\uffc9\025\uffc9\030\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\041\uffc9\042\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\105\uffc9\001\002\000\062\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\024\uffcf\025\uffcf\030\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\041\uffcf\042\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\001\002\000\040\021" +
    "\034\022\044\030\uffc3\034\037\035\056\036\032\041\052" +
    "\042\055\052\033\053\041\054\042\102\047\103\046\104" +
    "\040\105\054\001\002\000\006\023\uffc4\030\uffc4\001\002" +
    "\000\004\030\320\001\002\000\040\021\034\022\044\030" +
    "\uffc3\034\037\035\056\036\032\041\052\042\055\052\033" +
    "\053\041\054\042\102\047\103\046\104\040\105\054\001" +
    "\002\000\004\030\322\001\002\000\040\021\034\022\044" +
    "\023\uffc3\034\037\035\056\036\032\041\052\042\055\052" +
    "\033\053\041\054\042\102\047\103\046\104\040\105\054" +
    "\001\002\000\004\023\324\001\002\000\056\012\247\014" +
    "\255\015\241\016\236\017\253\020\250\021\034\022\044" +
    "\024\233\030\243\034\037\035\056\036\032\041\052\042" +
    "\055\052\033\053\041\054\042\102\047\103\046\104\040" +
    "\105\054\001\002\000\062\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\030\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\102\uffc5\103\uffc5\104\uffc5" +
    "\105\uffc5\001\002\000\100\002\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024" +
    "\uffce\025\uffce\030\uffce\034\uffce\035\uffce\036\uffce\041\uffce" +
    "\042\uffce\052\uffce\053\uffce\054\uffce\102\uffce\103\uffce\104" +
    "\uffce\105\uffce\001\002\000\062\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024" +
    "\uffc2\025\uffc2\030\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2" +
    "\042\uffc2\052\uffc2\053\uffc2\054\uffc2\102\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\001\002\000\020\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\001\002\000\014\005" +
    "\011\006\016\007\004\010\010\011\006\001\002\000\006" +
    "\023\ufff4\031\ufff4\001\002\000\004\033\334\001\002\000" +
    "\004\023\ufff6\001\002\000\006\023\ufff3\031\ufff3\001\002" +
    "\000\006\036\027\103\020\001\002\000\004\030\uffef\001" +
    "\002\000\036\021\034\022\044\034\037\035\056\036\032" +
    "\041\052\042\055\052\033\053\041\054\042\102\047\103" +
    "\046\104\040\105\054\001\002\000\052\027\342\034\074" +
    "\035\105\036\066\037\102\040\070\050\076\051\110\052" +
    "\067\055\075\056\071\057\111\060\103\061\107\062\073" +
    "\063\077\064\072\065\104\066\100\067\106\001\002\000" +
    "\014\023\uffe5\026\uffe5\030\uffe5\031\uffe5\067\uffe5\001\002" +
    "\000\076\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\030\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\041\ufffa\042\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002\000" +
    "\006\036\027\103\020\001\002\000\004\030\351\001\002" +
    "\000\006\030\ufff2\031\347\001\002\000\006\036\027\103" +
    "\020\001\002\000\004\030\ufff1\001\002\000\076\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\024\ufffc\025\ufffc\030\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\041\ufffc\042\ufffc\052\ufffc\053\ufffc\054\ufffc\102\ufffc" +
    "\103\ufffc\104\ufffc\105\ufffc\001\002\000\004\002\001\001" +
    "\002\000\004\002\ufffe\001\002\000\014\023\uffdb\024\364" +
    "\030\uffdb\036\uffdb\103\uffdb\001\002\000\014\005\011\006" +
    "\016\007\004\010\010\011\006\001\002\000\004\025\363" +
    "\001\002\000\006\036\027\103\020\001\002\000\004\030" +
    "\361\001\002\000\016\005\011\006\016\007\004\010\010" +
    "\011\006\025\uffd8\001\002\000\004\025\uffd7\001\002\000" +
    "\012\023\uffdd\030\uffdd\036\uffdd\103\uffdd\001\002\000\014" +
    "\005\011\006\016\007\004\010\010\011\006\001\002\000" +
    "\004\025\366\001\002\000\012\023\uffdc\030\uffdc\036\uffdc" +
    "\103\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\014\011\013\015\011\016\006\017\014\043" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\013\015\352\016\006\017\014\043" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\343\043\004\001\001\000\014\024" +
    "\021\025\023\026\025\027\022\030\024\001\001\000\014" +
    "\011\013\015\016\016\006\017\014\043\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\027" +
    "\001\001\000\002\001\001\000\020\002\035\003\052\004" +
    "\034\005\056\006\047\007\044\013\050\001\001\000\014" +
    "\003\052\004\217\005\056\006\136\007\044\001\001\000" +
    "\014\003\052\004\216\005\056\006\136\007\044\001\001" +
    "\000\012\003\052\005\056\006\213\007\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\052\004\211" +
    "\005\056\006\136\007\044\001\001\000\002\001\001\000" +
    "\014\003\052\004\210\005\056\006\136\007\044\001\001" +
    "\000\014\003\052\004\207\005\056\006\136\007\044\001" +
    "\001\000\020\002\173\003\052\004\034\005\056\006\047" +
    "\007\044\012\205\001\001\000\024\002\141\003\052\004" +
    "\034\005\056\006\047\007\044\010\201\011\200\043\004" +
    "\001\001\000\020\002\173\003\052\004\034\005\056\006" +
    "\047\007\044\012\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\052\005\056\006\145\007\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\052\005\056\006\140\007" +
    "\044\001\001\000\014\003\052\004\135\005\056\006\136" +
    "\007\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\064\003\052\004\034\005\056" +
    "\006\047\007\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\133\003\052\004\034" +
    "\005\056\006\047\007\044\001\001\000\016\002\132\003" +
    "\052\004\034\005\056\006\047\007\044\001\001\000\016" +
    "\002\131\003\052\004\034\005\056\006\047\007\044\001" +
    "\001\000\016\002\130\003\052\004\034\005\056\006\047" +
    "\007\044\001\001\000\016\002\127\003\052\004\034\005" +
    "\056\006\047\007\044\001\001\000\016\002\126\003\052" +
    "\004\034\005\056\006\047\007\044\001\001\000\016\002" +
    "\125\003\052\004\034\005\056\006\047\007\044\001\001" +
    "\000\016\002\124\003\052\004\034\005\056\006\047\007" +
    "\044\001\001\000\016\002\123\003\052\004\034\005\056" +
    "\006\047\007\044\001\001\000\016\002\122\003\052\004" +
    "\034\005\056\006\047\007\044\001\001\000\016\002\121" +
    "\003\052\004\034\005\056\006\047\007\044\001\001\000" +
    "\002\001\001\000\016\002\120\003\052\004\034\005\056" +
    "\006\047\007\044\001\001\000\016\002\117\003\052\004" +
    "\034\005\056\006\047\007\044\001\001\000\016\002\116" +
    "\003\052\004\034\005\056\006\047\007\044\001\001\000" +
    "\016\002\115\003\052\004\034\005\056\006\047\007\044" +
    "\001\001\000\016\002\114\003\052\004\034\005\056\006" +
    "\047\007\044\001\001\000\016\002\113\003\052\004\034" +
    "\005\056\006\047\007\044\001\001\000\016\002\112\003" +
    "\052\004\034\005\056\006\047\007\044\001\001\000\016" +
    "\002\111\003\052\004\034\005\056\006\047\007\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\141\003\052\004\034\005\056\006\047\007\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\171\003\052\004\034\005\056\006\047\007\044" +
    "\001\001\000\016\002\170\003\052\004\034\005\056\006" +
    "\047\007\044\001\001\000\016\002\167\003\052\004\034" +
    "\005\056\006\047\007\044\001\001\000\016\002\166\003" +
    "\052\004\034\005\056\006\047\007\044\001\001\000\016" +
    "\002\165\003\052\004\034\005\056\006\047\007\044\001" +
    "\001\000\016\002\164\003\052\004\034\005\056\006\047" +
    "\007\044\001\001\000\016\002\163\003\052\004\034\005" +
    "\056\006\047\007\044\001\001\000\016\002\162\003\052" +
    "\004\034\005\056\006\047\007\044\001\001\000\016\002" +
    "\161\003\052\004\034\005\056\006\047\007\044\001\001" +
    "\000\016\002\160\003\052\004\034\005\056\006\047\007" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\173\003\052\004\034\005\056" +
    "\006\047\007\044\012\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\052\004\204\005\056\006\136\007\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\141\003\052\004\034\005\056\006\047" +
    "\007\044\010\214\011\200\043\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\224\020\230\021\225\022" +
    "\226\043\004\001\001\000\016\002\222\003\052\004\034" +
    "\005\056\006\047\007\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\334\027\022\030\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\327\001" +
    "\001\000\002\001\001\000\004\037\233\001\001\000\052" +
    "\002\173\003\052\004\034\005\056\006\047\007\044\011" +
    "\250\012\241\016\245\031\260\032\253\033\251\034\257" +
    "\035\244\036\243\037\237\040\256\041\236\042\234\043" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\250\016\245\040\312\043" +
    "\004\001\001\000\002\001\001\000\020\002\173\003\052" +
    "\004\034\005\056\006\047\007\044\012\300\001\001\000" +
    "\014\024\021\025\023\026\025\027\022\030\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\173\003\052" +
    "\004\034\005\056\006\047\007\044\012\241\031\260\032" +
    "\253\033\251\034\257\035\244\036\243\037\237\041\262" +
    "\042\234\001\001\000\002\001\001\000\042\002\173\003" +
    "\052\004\034\005\056\006\047\007\044\012\241\031\260" +
    "\032\253\033\251\034\257\035\244\036\243\037\237\041" +
    "\261\042\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\173\003" +
    "\052\004\034\005\056\006\047\007\044\012\266\001\001" +
    "\000\002\001\001\000\040\002\173\003\052\004\034\005" +
    "\056\006\047\007\044\012\241\031\270\032\253\033\251" +
    "\034\257\035\244\036\243\037\237\042\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\224\020\275\021\225\022\226\043\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\303\003\052\004\034\005\056\006\047\007\044\001\001" +
    "\000\002\001\001\000\040\002\173\003\052\004\034\005" +
    "\056\006\047\007\044\012\241\031\306\032\253\033\251" +
    "\034\257\035\244\036\305\037\237\042\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\002\173\003\052" +
    "\004\034\005\056\006\047\007\044\012\241\032\253\033" +
    "\251\034\257\035\244\036\311\037\237\042\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\173\003\052\004\034\005\056" +
    "\006\047\007\044\012\315\014\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\173\003\052\004\034" +
    "\005\056\006\047\007\044\012\315\014\320\001\001\000" +
    "\002\001\001\000\022\002\173\003\052\004\034\005\056" +
    "\006\047\007\044\012\315\014\322\001\001\000\002\001" +
    "\001\000\040\002\173\003\052\004\034\005\056\006\047" +
    "\007\044\012\241\031\324\032\253\033\251\034\257\035" +
    "\244\036\243\037\237\042\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\224\021\331\022\226\043\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\336\025\023\026\025\027\022\030\272" +
    "\001\001\000\002\001\001\000\016\002\340\003\052\004" +
    "\034\005\056\006\047\007\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\344\026" +
    "\345\027\022\030\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\347\026\345\027\022\030\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\356\043" +
    "\004\044\355\001\001\000\002\001\001\000\012\023\357" +
    "\026\345\027\022\030\272\001\001\000\002\001\001\000" +
    "\010\011\356\043\004\044\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\356\043\004\044\364\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private PrintWriter out;
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("\tParsing error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

			if (s.left >= 0) {
				m.append(" in line " + (s.left +1 ));
				if (s.right >= 0) {
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
		out.println(m);
	}

	public Parser(InputStream inp) throws FileNotFoundException {
		this(new Yylex(inp));
		out = new PrintWriter(new FileOutputStream("/D:/Java/compiler/bin/roxanne/main/exprtest.s"));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exprlist ::= expr COMMA exprlist 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(e, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // exprlist ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // primary_expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // primary_expr ::= STRINGTEXT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Str(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // primary_expr ::= NUM 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Num(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // primary_expr ::= CHARACTER 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char c = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Character(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // primary_expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // postfix_exprl ::= postfix_expr LPAREN 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_exprl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // postfix_expr ::= postfix_expr DOT ID 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.DOT, new Var(i2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // postfix_expr ::= postfix_expr PTR ID 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.PTR, new Var(i2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // postfix_expr ::= postfix_exprl RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Func((Var)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // postfix_expr ::= postfix_exprl exprlist RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Func((Var)i, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // postfix_expr ::= postfix_expr LBRACKET expr RBRACKET 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BExpr(l,Expr.OpType.ARRAY, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // postfix_expr ::= primary_expr DEC 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UExpr(Expr.OpType.RDEC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // postfix_expr ::= primary_expr INC 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UExpr(Expr.OpType.RINC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // postfix_expr ::= primary_expr 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unary_expr ::= SIZEOF LPAREN typename RPAREN 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UExpr(Expr.OpType.SIZEOFT, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unary_expr ::= SIZEOF unary_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.SIZEOFE, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unary_expr ::= NOT cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.NOT, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unary_expr ::= BITNOT cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.BITNOT, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unary_expr ::= PLUS cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.UPLUS, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unary_expr ::= MINUS cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.UMINUS, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unary_expr ::= TIMES cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.GET, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unary_expr ::= BITAND cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.POS, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unary_expr ::= DEC unary_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.LDEC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unary_expr ::= INC unary_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.LINC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unary_expr ::= postfix_expr 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cast_expr ::= LPAREN typename RPAREN cast_expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(t, Expr.OpType.CAST, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cast_expr ::= unary_expr 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= cast_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= unary_expr SHRASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHRASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= unary_expr SHLASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHLASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= unary_expr XORASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.XORASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= unary_expr ORASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ORASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= unary_expr ANDASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ANDASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= unary_expr SUBASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SUBASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= unary_expr ADDASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ADDASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= unary_expr MODASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MODASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= unary_expr DIVASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.DIVASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= unary_expr MULASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MULASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr ASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr SHR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr SHL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.LT, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.GT, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr LE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.LE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr GE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.GE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr NE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.NE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.EQ, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr BITXOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.BITXOR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr BITAND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.BITAND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr BITOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.BITOR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.AND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.OR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MOD, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.DIVIDE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.TIMES, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MINUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.PLUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // open_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE open_stmt 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt ms = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If os = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, ms, os); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // open_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // matched_stmt ::= other_stmt 
            {
              Stmt RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt os = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = os; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // matched_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE matched_stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ms1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ms1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt ms1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ms2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ms2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt ms2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, ms1, ms2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // jump_stmt ::= RETURN exprlist SEMICOLON 
            {
              Stmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // jump_stmt ::= RETURN SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new Return(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // jump_stmt ::= BREAK SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new Break(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // jump_stmt ::= CONTINUE SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new Continue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_element ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_element",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_element ::= exprlist 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_element",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // iter_stmt ::= FOR LPAREN expr_element SEMICOLON expr_element SEMICOLON expr_element RPAREN stmt 
            {
              Stmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ExprList e1 = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprList e3 = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new For(e1, e2, e3, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iter_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // iter_stmt ::= WHILE LPAREN exprlist RPAREN stmt 
            {
              Stmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(el, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iter_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtlist ::= stmt stmtlist 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtList(s, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtlist ::= stmt 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtList(s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // deflist ::= dec deflist 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefList dl = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deflist",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // deflist ::= dec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deflist",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // block ::= LBRACE deflist stmtlist RBRACE 
            {
              Block RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefList dl = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(dl, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block ::= LBRACE deflist RBRACE 
            {
              Block RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefList dl = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(dl, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // block ::= LBRACE RBRACE 
            {
              Block RESULT =null;
		 RESULT = new Block(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // block ::= LBRACE stmtlist RBRACE 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(null, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_stmt ::= exprlist SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_stmt ::= SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // other_stmt ::= jump_stmt 
            {
              Stmt RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt js = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = js; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // other_stmt ::= iter_stmt 
            {
              Stmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt is = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // other_stmt ::= block 
            {
              Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // other_stmt ::= expr_stmt 
            {
              Stmt RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt es = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= open_stmt 
            {
              Stmt RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If os = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = os; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= matched_stmt 
            {
              Stmt RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt ms = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ms; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // record_def ::= type_specifier declist SEMICOLON record_def 
            {
              DecList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList rd = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(new Dec(t, dl), rd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // record_def ::= type_specifier declist SEMICOLON 
            {
              DecList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DecList(new Dec(t, dl)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_or_union ::= UNION 
            {
              StructUnion RESULT =null;
		 RESULT = new Union(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // struct_or_union ::= STRUCT 
            {
              StructUnion RESULT =null;
		 RESULT = new Struct(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_specifier ::= struct_or_union ID 
            {
              Type RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 su.name = i; RESULT = su; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_specifier ::= struct_or_union ID LBRACE record_def RBRACE 
            {
              Type RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList r = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 su.name = i; su.record = r; RESULT = su; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_specifier ::= struct_or_union LBRACE record_def RBRACE 
            {
              Type RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList r = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 su.record = r; RESULT = su; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_specifier ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Int(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_specifier ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Char(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_specifier ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new Void(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // typename ::= type_specifier 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typename ::= typename TIMES 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Pointer(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // plain_dector ::= TIMES plain_dector 
            {
              PlainDector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecPtr(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_dector",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // plain_dector ::= ID 
            {
              PlainDector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecName(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_dector",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array_dector ::= array_dector LBRACKET expr RBRACKET 
            {
              Array RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Array ad = (Array)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array(ad, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dector",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // array_dector ::= plain_dector LBRACKET expr RBRACKET 
            {
              Array RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Array(pd, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dector",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dector ::= array_dector 
            {
              Dector RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Array ad = (Array)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dector ::= plain_dector 
            {
              Dector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dector ::= plain_dector LPAREN vara_paralist RPAREN 
            {
              Dector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParaList vpl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncDec(pd, vpl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dector ::= plain_dector LPAREN RPAREN 
            {
              Dector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncDec(pd, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initer ::= LBRACE exprlist RBRACE 
            {
              ExprList RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList is = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // initer ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // init_dector ::= dector ASSIGN initer 
            {
              InitDector RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList i = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDector(d, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_dector",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // init_dector ::= dector 
            {
              InitDector RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDector(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_dector",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_declist ::= init_dector COMMA init_declist 
            {
              InitDecList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDector id = (InitDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecList idl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(id, idl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // init_declist ::= init_dector 
            {
              InitDecList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDector id = (InitDector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declist ::= dector COMMA declist 
            {
              InitDecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(new InitDector(d,null), dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declist ::= dector 
            {
              InitDecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(new InitDector(d, null), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // plain_dec ::= type_specifier dector 
            {
              Para RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Para(t, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paralist ::= plain_dec COMMA paralist 
            {
              ParaList RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Para pd = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParaList(pd, pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paralist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paralist ::= plain_dec 
            {
              ParaList RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Para pd = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParaList(pd, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paralist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vara_paralist ::= paralist COMMA ELLIPSIS 
            {
              ParaList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ParaList(new Ellipsis(), pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vara_paralist",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vara_paralist ::= paralist 
            {
              ParaList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vara_paralist",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_def ::= type_specifier plain_dector LPAREN vara_paralist RPAREN block 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PlainDector p = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDef(p,t,pl,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_def ::= type_specifier plain_dector LPAREN RPAREN block 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDector p = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDef(p,t,null,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= type_specifier init_declist SEMICOLON 
            {
              Def RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int initdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecList initdl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dec(t,initdl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= type_specifier SEMICOLON 
            {
              Def RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dec(t,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= TYPEDEF type_specifier declist SEMICOLON 
            {
              Def RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeDef(t, dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= func_def program 
            {
              DefList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncDef f = (FuncDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefList p = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(f, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= dec program 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefList p = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= func_def 
            {
              DefList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncDef f = (FuncDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(f, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefList start_val = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

