package roxanne.types;
import java.util.Iterator;
import java.util.LinkedList;
import roxanne.symbol.*;

public class RECORD extends TYPE {
	 public class RECORDFIELD {
         public TYPE type;
         public Symbol name;
         RECORDFIELD(TYPE t, String s) {
        	 type = t;
        	 name = Symbol.symbol(s);
         }
         RECORDFIELD() { type = null; name = null; }
         RECORDFIELD(TYPE t, Symbol s) {
        	 type = t; name = s;
         }
         public String toString() {
        	 StringBuffer str = new StringBuffer();
        	 if (type instanceof STRUCT) str.append("struct "+((STRUCTUNION)type).name.toString());
        	 else if (type instanceof STRUCT) str.append("union "+((STRUCTUNION)type).name.toString());
        	 else str.append(type.toString());
        	 str.append(" "+name.toString());
        	 return str.toString();
         }
     }
    public LinkedList<RECORDFIELD> fields;
     
    
     public RECORD() { fields = new LinkedList<RECORDFIELD>(); }
     public RECORD(LinkedList<RECORDFIELD> l) { fields = l; }
     public TYPE actual() {
    	 Iterator<RECORDFIELD> iter = fields.iterator();
    	 while(iter.hasNext()) {
    		 RECORDFIELD f = iter.next();
    		 TYPE t = f.type;
    		 if (t.actual() instanceof WRONG) return new WRONG();
    	 }
    	 return this;
     }
     public boolean equals(RECORD r) {
    	 if (this == r) return true;
    	 Iterator<RECORDFIELD> iter1 = fields.iterator(), iter2 = r.fields.iterator();
    	 if (fields.size() != r.fields.size()) return false;
    	 while(iter1.hasNext()) {
    		 TYPE t1 = iter1.next().type, t2 = iter2.next().type;
    		 if (!t1.equals(t2)) return false;
    	 }
    	 return true;
     }
     public void append(TYPE t, Symbol s) {
    	 RECORDFIELD rf = new RECORDFIELD(t,s);
    	 fields.add(rf);
     }
     
     public String toString() {
    	 StringBuffer m = new StringBuffer("{ ");
    	 Iterator<RECORDFIELD> iter = fields.iterator();
    	 while(iter.hasNext()) {
    		 m.append(iter.next().toString()+"; ");
    	 }
    	 m.append("}");
    	 return m.toString();
     }
     
     public boolean isField(String str, TYPE t) {
    	 Symbol s = Symbol.symbol(str);
    	 Iterator<RECORDFIELD> iter = fields.iterator();
    	 while(iter.hasNext()) {
    		RECORDFIELD r = iter.next();
    		Symbol name = r.name;
    		if (name == s) { 
    			t = r.type;
    			return true;
    		}
    	 }
    	 return false;
     }
     public int size() {
    	 return fields.size();
     }
}
// inner class (private | public ...) operator