
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 30 07:44:31 CST 2013
//----------------------------------------------------

package roxanne.syntactic;

import java.io.*;
import roxanne.ast.*;
import roxanne.ast.Character;
import roxanne.ast.Void;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 30 07:44:31 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\023\004\000\002\054\002" +
    "\000\002\024\007\000\002\024\004\000\002\024\005\000" +
    "\002\025\007\000\002\025\010\000\002\003\003\000\002" +
    "\026\003\000\002\026\005\000\002\027\003\000\002\027" +
    "\005\000\002\030\004\000\002\031\003\000\002\031\005" +
    "\000\002\032\003\000\002\032\005\000\002\033\003\000" +
    "\002\033\005\000\002\012\003\000\002\012\005\000\002" +
    "\021\005\000\002\021\003\000\002\034\005\000\002\034" +
    "\006\000\002\034\003\000\002\034\003\000\002\035\004" +
    "\000\002\035\004\000\002\022\003\000\002\022\004\000" +
    "\002\013\005\000\002\036\003\000\002\036\004\000\002" +
    "\036\003\000\002\015\004\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\055\002" +
    "\000\002\056\002\000\002\016\010\000\002\057\002\000" +
    "\002\060\002\000\002\016\011\000\002\016\004\000\002" +
    "\016\003\000\002\037\003\000\002\037\003\000\002\052" +
    "\003\000\002\052\003\000\002\053\005\000\002\053\006" +
    "\000\002\040\003\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\004\000\002\046\005\000\002\046" +
    "\004\000\002\046\005\000\002\046\006\000\002\002\003" +
    "\000\002\047\003\000\002\047\004\000\002\050\003\000" +
    "\002\050\004\000\002\043\007\000\002\043\013\000\002" +
    "\020\003\000\002\020\002\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\005\000\002\045\011" +
    "\000\002\045\003\000\002\051\007\000\002\051\011\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\006\003\000\002\006\006\000\002\010" +
    "\003\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\006\000\002\007\003\000\002\007\004\000\002\007" +
    "\004\000\002\007\006\000\002\007\005\000\002\007\004" +
    "\000\002\007\005\000\002\007\005\000\002\011\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\006\000\002\014" +
    "\004\000\002\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\020\004\013\005\011\006\017\007\004\010" +
    "\010\011\006\103\016\001\002\000\014\023\uffd6\030\uffd6" +
    "\036\uffd6\103\uffd6\104\uffd6\001\002\000\010\024\373\103" +
    "\374\104\372\001\002\000\010\024\uffca\103\uffca\104\uffca" +
    "\001\002\000\022\002\000\004\013\005\011\006\017\007" +
    "\004\010\010\011\006\103\016\001\002\000\010\024\uffcb" +
    "\103\uffcb\104\uffcb\001\002\000\014\023\uffd8\030\uffd8\036" +
    "\uffd8\103\uffd8\104\uffd8\001\002\000\004\002\370\001\002" +
    "\000\016\005\011\006\017\007\004\010\010\011\006\103" +
    "\016\001\002\000\012\030\026\036\027\103\031\104\024" +
    "\001\002\000\022\002\uffff\004\013\005\011\006\017\007" +
    "\004\010\010\011\006\103\016\001\002\000\014\023\uffce" +
    "\030\uffce\036\uffce\103\uffce\104\uffce\001\002\000\014\023" +
    "\uffd7\030\uffd7\036\uffd7\103\uffd7\104\uffd7\001\002\000\004" +
    "\002\ufffd\001\002\000\014\023\uffe3\026\036\030\uffe3\031" +
    "\uffe3\067\uffe3\001\002\000\006\030\uffee\031\356\001\002" +
    "\000\004\030\355\001\002\000\016\022\uffdd\023\uffdd\026" +
    "\uffdd\030\uffdd\031\uffdd\067\uffdd\001\002\000\010\030\uffec" +
    "\031\uffec\067\344\001\002\000\100\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024" +
    "\ufffa\025\ufffa\030\ufffa\034\ufffa\035\ufffa\036\ufffa\041\ufffa" +
    "\042\ufffa\052\ufffa\053\ufffa\054\ufffa\102\ufffa\103\ufffa\104" +
    "\ufffa\105\ufffa\106\ufffa\001\002\000\010\036\027\103\031" +
    "\104\024\001\002\000\014\022\035\026\036\030\uffe4\031" +
    "\uffe4\067\uffe4\001\002\000\016\022\uffdb\023\uffdb\026\uffdb" +
    "\030\uffdb\031\uffdb\067\uffdb\001\002\000\014\023\uffe0\026" +
    "\036\030\uffe0\031\uffe0\067\uffe0\001\002\000\016\005\011" +
    "\006\017\007\004\010\010\011\006\103\016\001\002\000" +
    "\014\023\uffe2\026\uffe2\030\uffe2\031\uffe2\067\uffe2\001\002" +
    "\000\020\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\023" +
    "\227\103\ufff6\001\002\000\036\021\041\022\050\034\044" +
    "\035\061\036\037\041\055\042\057\052\040\053\046\054" +
    "\047\102\053\104\052\105\045\106\060\001\002\000\036" +
    "\021\041\022\050\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\104\052\105\045" +
    "\106\060\001\002\000\036\021\041\022\050\034\044\035" +
    "\061\036\037\041\055\042\057\052\040\053\046\054\047" +
    "\102\053\104\052\105\045\106\060\001\002\000\036\021" +
    "\041\022\221\034\044\035\061\036\037\041\055\042\057" +
    "\052\040\053\046\054\047\102\053\104\052\105\045\106" +
    "\060\001\002\000\062\023\uff8d\025\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\050" +
    "\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067" +
    "\uff8d\001\002\000\052\027\220\034\102\035\113\036\074" +
    "\037\110\040\076\050\104\051\116\052\075\055\103\056" +
    "\077\057\117\060\111\061\115\062\101\063\105\064\100" +
    "\065\112\066\106\067\114\001\002\000\036\021\041\022" +
    "\050\034\044\035\061\036\037\041\055\042\057\052\040" +
    "\053\046\054\047\102\053\104\052\105\045\106\060\001" +
    "\002\000\122\022\uff75\023\uff75\025\uff75\026\uff75\027\uff75" +
    "\030\uff75\031\uff75\032\uff75\034\uff75\035\uff75\036\uff75\037" +
    "\uff75\040\uff75\041\uff75\042\uff75\047\uff75\050\uff75\051\uff75" +
    "\052\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062" +
    "\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75" +
    "\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077" +
    "\uff75\100\uff75\101\uff75\001\002\000\036\021\041\022\050" +
    "\034\044\035\061\036\037\041\055\042\057\052\040\053" +
    "\046\054\047\102\053\104\052\105\045\106\060\001\002" +
    "\000\036\021\041\022\050\034\044\035\061\036\037\041" +
    "\055\042\057\052\040\053\046\054\047\102\053\104\052" +
    "\105\045\106\060\001\002\000\052\005\011\006\017\007" +
    "\004\010\010\011\006\021\041\022\050\034\044\035\061" +
    "\036\037\041\055\042\057\052\040\053\046\054\047\102" +
    "\053\103\016\104\052\105\045\106\060\001\002\000\040" +
    "\021\041\022\050\023\206\034\044\035\061\036\037\041" +
    "\055\042\057\052\040\053\046\054\047\102\053\104\052" +
    "\105\045\106\060\001\002\000\122\022\uff76\023\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\034\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\047" +
    "\uff76\050\uff76\051\uff76\052\uff76\055\uff76\056\uff76\057\uff76" +
    "\060\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76\066" +
    "\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76" +
    "\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76\001\002\000" +
    "\122\022\uff74\023\uff74\025\uff74\026\uff74\027\uff74\030\uff74" +
    "\031\uff74\032\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040" +
    "\uff74\041\uff74\042\uff74\047\uff74\050\uff74\051\uff74\052\uff74" +
    "\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062\uff74\063" +
    "\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74" +
    "\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100" +
    "\uff74\101\uff74\001\002\000\106\023\uff8c\025\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\050\uff8c\051\uff8c\052\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\067\uff8c\070\161\071\167\072\170\073\165\074\164" +
    "\075\166\076\172\077\162\100\171\101\163\001\002\000" +
    "\036\021\041\022\155\034\044\035\061\036\037\041\055" +
    "\042\057\052\040\053\046\054\047\102\053\104\052\105" +
    "\045\106\060\001\002\000\122\022\uff7f\023\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\055\uff7f\056\uff7f\057\uff7f\060" +
    "\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075" +
    "\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\001\002\000\036" +
    "\021\041\022\155\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\104\052\105\045" +
    "\106\060\001\002\000\122\022\uff73\023\uff73\025\uff73\026" +
    "\uff73\027\uff73\030\uff73\031\uff73\032\uff73\034\uff73\035\uff73" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\055\uff73\056\uff73\057\uff73\060\uff73" +
    "\061\uff73\062\uff73\063\uff73\064\uff73\065\uff73\066\uff73\067" +
    "\uff73\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73" +
    "\076\uff73\077\uff73\100\uff73\101\uff73\001\002\000\036\021" +
    "\041\022\050\034\044\035\061\036\037\041\055\042\057" +
    "\052\040\053\046\054\047\102\053\104\052\105\045\106" +
    "\060\001\002\000\006\023\145\031\144\001\002\000\122" +
    "\022\067\023\uff8a\025\uff8a\026\070\027\uff8a\030\uff8a\031" +
    "\uff8a\032\071\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\064\042\065\047\066\050\uff8a\051\uff8a\052\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072" +
    "\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a" +
    "\101\uff8a\001\002\000\122\022\uff7e\023\uff7e\025\uff7e\026" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\052\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e" +
    "\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e" +
    "\076\uff7e\077\uff7e\100\uff7e\101\uff7e\001\002\000\122\022" +
    "\uff7d\023\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\055\uff7d" +
    "\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101" +
    "\uff7d\001\002\000\004\104\143\001\002\000\040\021\uff77" +
    "\022\uff77\023\uff77\034\uff77\035\uff77\036\uff77\041\uff77\042" +
    "\uff77\052\uff77\053\uff77\054\uff77\102\uff77\104\uff77\105\uff77" +
    "\106\uff77\001\002\000\036\021\041\022\050\034\044\035" +
    "\061\036\037\041\055\042\057\052\040\053\046\054\047" +
    "\102\053\104\052\105\045\106\060\001\002\000\004\104" +
    "\072\001\002\000\122\022\uff78\023\uff78\025\uff78\026\uff78" +
    "\027\uff78\030\uff78\031\uff78\032\uff78\034\uff78\035\uff78\036" +
    "\uff78\037\uff78\040\uff78\041\uff78\042\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061" +
    "\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066\uff78\067\uff78" +
    "\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78\075\uff78\076" +
    "\uff78\077\uff78\100\uff78\101\uff78\001\002\000\052\027\107" +
    "\034\102\035\113\036\074\037\110\040\076\050\104\051" +
    "\116\052\075\055\103\056\077\057\117\060\111\061\115" +
    "\062\101\063\105\064\100\065\112\066\106\067\114\001" +
    "\002\000\036\021\041\022\050\034\044\035\061\036\037" +
    "\041\055\042\057\052\040\053\046\054\047\102\053\104" +
    "\052\105\045\106\060\001\002\000\036\021\041\022\050" +
    "\034\044\035\061\036\037\041\055\042\057\052\040\053" +
    "\046\054\047\102\053\104\052\105\045\106\060\001\002" +
    "\000\036\021\041\022\050\034\044\035\061\036\037\041" +
    "\055\042\057\052\040\053\046\054\047\102\053\104\052" +
    "\105\045\106\060\001\002\000\036\021\041\022\050\034" +
    "\044\035\061\036\037\041\055\042\057\052\040\053\046" +
    "\054\047\102\053\104\052\105\045\106\060\001\002\000" +
    "\036\021\041\022\050\034\044\035\061\036\037\041\055" +
    "\042\057\052\040\053\046\054\047\102\053\104\052\105" +
    "\045\106\060\001\002\000\036\021\041\022\050\034\044" +
    "\035\061\036\037\041\055\042\057\052\040\053\046\054" +
    "\047\102\053\104\052\105\045\106\060\001\002\000\036" +
    "\021\041\022\050\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\104\052\105\045" +
    "\106\060\001\002\000\036\021\041\022\050\034\044\035" +
    "\061\036\037\041\055\042\057\052\040\053\046\054\047" +
    "\102\053\104\052\105\045\106\060\001\002\000\036\021" +
    "\041\022\050\034\044\035\061\036\037\041\055\042\057" +
    "\052\040\053\046\054\047\102\053\104\052\105\045\106" +
    "\060\001\002\000\036\021\041\022\050\034\044\035\061" +
    "\036\037\041\055\042\057\052\040\053\046\054\047\102" +
    "\053\104\052\105\045\106\060\001\002\000\036\021\041" +
    "\022\050\034\044\035\061\036\037\041\055\042\057\052" +
    "\040\053\046\054\047\102\053\104\052\105\045\106\060" +
    "\001\002\000\122\022\uff7c\023\uff7c\025\uff7c\026\uff7c\027" +
    "\uff7c\030\uff7c\031\uff7c\032\uff7c\034\uff7c\035\uff7c\036\uff7c" +
    "\037\uff7c\040\uff7c\041\uff7c\042\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c" +
    "\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070" +
    "\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c" +
    "\077\uff7c\100\uff7c\101\uff7c\001\002\000\036\021\041\022" +
    "\050\034\044\035\061\036\037\041\055\042\057\052\040" +
    "\053\046\054\047\102\053\104\052\105\045\106\060\001" +
    "\002\000\036\021\041\022\050\034\044\035\061\036\037" +
    "\041\055\042\057\052\040\053\046\054\047\102\053\104" +
    "\052\105\045\106\060\001\002\000\036\021\041\022\050" +
    "\034\044\035\061\036\037\041\055\042\057\052\040\053" +
    "\046\054\047\102\053\104\052\105\045\106\060\001\002" +
    "\000\036\021\041\022\050\034\044\035\061\036\037\041" +
    "\055\042\057\052\040\053\046\054\047\102\053\104\052" +
    "\105\045\106\060\001\002\000\036\021\041\022\050\034" +
    "\044\035\061\036\037\041\055\042\057\052\040\053\046" +
    "\054\047\102\053\104\052\105\045\106\060\001\002\000" +
    "\036\021\041\022\050\034\044\035\061\036\037\041\055" +
    "\042\057\052\040\053\046\054\047\102\053\104\052\105" +
    "\045\106\060\001\002\000\036\021\041\022\050\034\044" +
    "\035\061\036\037\041\055\042\057\052\040\053\046\054" +
    "\047\102\053\104\052\105\045\106\060\001\002\000\036" +
    "\021\041\022\050\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\104\052\105\045" +
    "\106\060\001\002\000\062\023\uff9a\025\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\034\102\035\113\036\074\037\110\040\076" +
    "\050\uff9a\051\uff9a\052\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a" +
    "\067\uff9a\001\002\000\062\023\uffa1\025\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\034\102\035\113\036\074\037\110\040\076" +
    "\050\uffa1\051\uffa1\052\075\055\uffa1\056\uffa1\057\117\060" +
    "\111\061\115\062\101\063\105\064\100\065\112\066\106" +
    "\067\uffa1\001\002\000\062\023\uffa0\025\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\034\102\035\113\036\074\037\110\040\076" +
    "\050\uffa0\051\uffa0\052\uffa0\055\uffa0\056\uffa0\057\117\060" +
    "\111\061\uffa0\062\uffa0\063\105\064\100\065\112\066\106" +
    "\067\uffa0\001\002\000\062\023\uff98\025\uff98\027\uff98\030" +
    "\uff98\031\uff98\034\102\035\113\036\074\037\110\040\076" +
    "\050\104\051\116\052\075\055\103\056\077\057\117\060" +
    "\111\061\115\062\101\063\105\064\100\065\112\066\106" +
    "\067\114\001\002\000\062\023\uffa9\025\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\034\uffa9\035\uffa9\036\074\037\110\040\076" +
    "\050\uffa9\051\uffa9\052\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\001\002\000\062\023\uff9e\025\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\034\102\035\113\036\074\037\110\040\076" +
    "\050\uff9e\051\uff9e\052\uff9e\055\uff9e\056\uff9e\057\117\060" +
    "\111\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\067\uff9e\001\002\000\062\023\uff99\025\uff99\027\uff99\030" +
    "\uff99\031\uff99\034\102\035\113\036\074\037\110\040\076" +
    "\050\uff99\051\uff99\052\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\001\002\000\062\023\uffa7\025\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\001\002\000\062\023\uff9d\025\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\034\102\035\113\036\074\037\110\040\076" +
    "\050\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\057\117\060" +
    "\111\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\001\002\000\062\023\uff9c\025\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\034\102\035\113\036\074\037\110\040\076" +
    "\050\uff9c\051\uff9c\052\uff9c\055\uff9c\056\uff9c\057\117\060" +
    "\111\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\067\uff9c\001\002\000\062\023\uffa3\025\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\034\102\035\113\036\074\037\110\040\076" +
    "\050\uffa3\051\116\052\075\055\uffa3\056\uffa3\057\117\060" +
    "\111\061\115\062\101\063\105\064\100\065\112\066\106" +
    "\067\uffa3\001\002\000\062\023\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\034\102\035\113\036\074\037\110\040\076" +
    "\050\104\051\116\052\075\055\uffa5\056\077\057\117\060" +
    "\111\061\115\062\101\063\105\064\100\065\112\066\106" +
    "\067\uffa5\001\002\000\062\023\uffaa\025\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\034\uffaa\035\uffaa\036\074\037\110\040\076" +
    "\050\uffaa\051\uffaa\052\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\067\uffaa\001\002\000\062\023\uff9f\025\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\034\102\035\113\036\074\037\110\040\076" +
    "\050\uff9f\051\uff9f\052\uff9f\055\uff9f\056\uff9f\057\117\060" +
    "\111\061\uff9f\062\uff9f\063\105\064\100\065\112\066\106" +
    "\067\uff9f\001\002\000\062\023\uff9b\025\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\034\102\035\113\036\074\037\110\040\076" +
    "\050\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b\057\117\060" +
    "\111\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\001\002\000\062\023\uffa4\025\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\034\102\035\113\036\074\037\110\040\076" +
    "\050\104\051\116\052\075\055\uffa4\056\uffa4\057\117\060" +
    "\111\061\115\062\101\063\105\064\100\065\112\066\106" +
    "\067\uffa4\001\002\000\062\023\uffa6\025\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\055\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\067\uffa6\001\002\000\062\023\uffa2\025\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\034\102\035\113\036\074\037\110\040\076" +
    "\050\uffa2\051\uffa2\052\uffa2\055\uffa2\056\uffa2\057\117\060" +
    "\111\061\115\062\101\063\105\064\100\065\112\066\106" +
    "\067\uffa2\001\002\000\062\023\uffa8\025\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\067\uffa8\001\002\000\122\022\uff79\023\uff79\025\uff79\026" +
    "\uff79\027\uff79\030\uff79\031\uff79\032\uff79\034\uff79\035\uff79" +
    "\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\055\uff79\056\uff79\057\uff79\060\uff79" +
    "\061\uff79\062\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067" +
    "\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79" +
    "\076\uff79\077\uff79\100\uff79\101\uff79\001\002\000\036\021" +
    "\041\022\050\034\044\035\061\036\037\041\055\042\057" +
    "\052\040\053\046\054\047\102\053\104\052\105\045\106" +
    "\060\001\002\000\122\022\uff72\023\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\034\uff72\035\uff72\036" +
    "\uff72\037\uff72\040\uff72\041\uff72\042\uff72\047\uff72\050\uff72" +
    "\051\uff72\052\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061" +
    "\uff72\062\uff72\063\uff72\064\uff72\065\uff72\066\uff72\067\uff72" +
    "\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076" +
    "\uff72\077\uff72\100\uff72\101\uff72\001\002\000\004\023\152" +
    "\001\002\000\056\023\uff6f\030\uff6f\031\150\034\102\035" +
    "\113\036\074\037\110\040\076\050\104\051\116\052\075" +
    "\055\103\056\077\057\117\060\111\061\115\062\101\063" +
    "\105\064\100\065\112\066\106\067\114\001\002\000\036" +
    "\021\041\022\050\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\104\052\105\045" +
    "\106\060\001\002\000\006\023\uff6e\030\uff6e\001\002\000" +
    "\122\022\uff71\023\uff71\025\uff71\026\uff71\027\uff71\030\uff71" +
    "\031\uff71\032\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040" +
    "\uff71\041\uff71\042\uff71\047\uff71\050\uff71\051\uff71\052\uff71" +
    "\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063" +
    "\uff71\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71" +
    "\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100" +
    "\uff71\101\uff71\001\002\000\106\023\uff85\025\uff85\027\uff85" +
    "\030\uff85\031\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\050\uff85\051\uff85\052\uff85\055\uff85\056\uff85\057\uff85" +
    "\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066" +
    "\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85" +
    "\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\001\002\000" +
    "\106\023\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\001\002\000\036\021\041\022\050\034" +
    "\044\035\061\036\037\041\055\042\057\052\040\053\046" +
    "\054\047\102\053\104\052\105\045\106\060\001\002\000" +
    "\106\023\uff88\025\uff88\027\uff88\030\uff88\031\uff88\034\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\050\uff88\051\uff88\052" +
    "\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88" +
    "\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071" +
    "\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077\uff88" +
    "\100\uff88\101\uff88\001\002\000\054\023\uff70\031\uff70\034" +
    "\102\035\113\036\074\037\110\040\076\050\104\051\116" +
    "\052\075\055\103\056\077\057\117\060\111\061\115\062" +
    "\101\063\105\064\100\065\112\066\106\067\114\001\002" +
    "\000\106\023\uff89\025\uff89\027\uff89\030\uff89\031\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\050\uff89\051\uff89" +
    "\052\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\100\uff89\101\uff89\001\002\000\036\021\041\022\050" +
    "\034\044\035\061\036\037\041\055\042\057\052\040\053" +
    "\046\054\047\102\053\104\052\105\045\106\060\001\002" +
    "\000\036\021\041\022\050\034\044\035\061\036\037\041" +
    "\055\042\057\052\040\053\046\054\047\102\053\104\052" +
    "\105\045\106\060\001\002\000\036\021\041\022\050\034" +
    "\044\035\061\036\037\041\055\042\057\052\040\053\046" +
    "\054\047\102\053\104\052\105\045\106\060\001\002\000" +
    "\036\021\041\022\050\034\044\035\061\036\037\041\055" +
    "\042\057\052\040\053\046\054\047\102\053\104\052\105" +
    "\045\106\060\001\002\000\036\021\041\022\050\034\044" +
    "\035\061\036\037\041\055\042\057\052\040\053\046\054" +
    "\047\102\053\104\052\105\045\106\060\001\002\000\036" +
    "\021\041\022\050\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\104\052\105\045" +
    "\106\060\001\002\000\036\021\041\022\050\034\044\035" +
    "\061\036\037\041\055\042\057\052\040\053\046\054\047" +
    "\102\053\104\052\105\045\106\060\001\002\000\036\021" +
    "\041\022\050\034\044\035\061\036\037\041\055\042\057" +
    "\052\040\053\046\054\047\102\053\104\052\105\045\106" +
    "\060\001\002\000\036\021\041\022\050\034\044\035\061" +
    "\036\037\041\055\042\057\052\040\053\046\054\047\102" +
    "\053\104\052\105\045\106\060\001\002\000\036\021\041" +
    "\022\050\034\044\035\061\036\037\041\055\042\057\052" +
    "\040\053\046\054\047\102\053\104\052\105\045\106\060" +
    "\001\002\000\062\023\uff91\025\uff91\027\uff91\030\uff91\031" +
    "\uff91\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff8f\025\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff95\025\uff95\027\uff95\030\uff95\031" +
    "\uff95\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff96\025\uff96\027\uff96\030\uff96\031" +
    "\uff96\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff92\025\uff92\027\uff92\030\uff92\031" +
    "\uff92\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff94\025\uff94\027\uff94\030\uff94\031" +
    "\uff94\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff93\025\uff93\027\uff93\030\uff93\031" +
    "\uff93\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff8e\025\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff90\025\uff90\027\uff90\030\uff90\031" +
    "\uff90\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\062\023\uff97\025\uff97\027\uff97\030\uff97\031" +
    "\uff97\034\102\035\113\036\074\037\110\040\076\050\104" +
    "\051\116\052\075\055\103\056\077\057\117\060\111\061" +
    "\115\062\101\063\105\064\100\065\112\066\106\067\114" +
    "\001\002\000\004\023\207\001\002\000\122\022\uff7a\023" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042" +
    "\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\055\uff7a\056\uff7a" +
    "\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\065" +
    "\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a" +
    "\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\001" +
    "\002\000\122\022\uff7b\023\uff7b\025\uff7b\026\uff7b\027\uff7b" +
    "\030\uff7b\031\uff7b\032\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\042\uff7b\047\uff7b\050\uff7b\051\uff7b" +
    "\052\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077" +
    "\uff7b\100\uff7b\101\uff7b\001\002\000\006\023\uffd9\036\uffd9" +
    "\001\002\000\006\023\212\036\213\001\002\000\036\021" +
    "\041\022\050\034\044\035\061\036\037\041\055\042\057" +
    "\052\040\053\046\054\047\102\053\104\052\105\045\106" +
    "\060\001\002\000\006\023\uffda\036\uffda\001\002\000\106" +
    "\023\uff8b\025\uff8b\027\uff8b\030\uff8b\031\uff8b\034\uff8b\035" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100" +
    "\uff8b\101\uff8b\001\002\000\106\023\uff82\025\uff82\027\uff82" +
    "\030\uff82\031\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\050\uff82\051\uff82\052\uff82\055\uff82\056\uff82\057\uff82" +
    "\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066" +
    "\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82\001\002\000" +
    "\106\023\uff83\025\uff83\027\uff83\030\uff83\031\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\040\uff83\050\uff83\051\uff83\052" +
    "\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071" +
    "\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83" +
    "\100\uff83\101\uff83\001\002\000\106\023\uff84\025\uff84\027" +
    "\uff84\030\uff84\031\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\050\uff84\051\uff84\052\uff84\055\uff84\056\uff84\057" +
    "\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84" +
    "\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074" +
    "\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\001\002" +
    "\000\014\023\uffde\026\uffde\030\uffde\031\uffde\067\uffde\001" +
    "\002\000\052\005\011\006\017\007\004\010\010\011\006" +
    "\021\041\022\050\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\103\016\104\052" +
    "\105\045\106\060\001\002\000\106\023\uff81\025\uff81\027" +
    "\uff81\030\uff81\031\uff81\034\uff81\035\uff81\036\uff81\037\uff81" +
    "\040\uff81\050\uff81\051\uff81\052\uff81\055\uff81\056\uff81\057" +
    "\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81" +
    "\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074" +
    "\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101\uff81\001\002" +
    "\000\006\023\224\036\213\001\002\000\106\023\uff80\025" +
    "\uff80\027\uff80\030\uff80\031\uff80\034\uff80\035\uff80\036\uff80" +
    "\037\uff80\040\uff80\050\uff80\051\uff80\052\uff80\055\uff80\056" +
    "\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80" +
    "\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101\uff80" +
    "\001\002\000\106\023\uff87\025\uff87\027\uff87\030\uff87\031" +
    "\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\050\uff87" +
    "\051\uff87\052\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061" +
    "\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87" +
    "\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076" +
    "\uff87\077\uff87\100\uff87\101\uff87\001\002\000\106\023\uff86" +
    "\025\uff86\027\uff86\030\uff86\031\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\050\uff86\051\uff86\052\uff86\055\uff86" +
    "\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86" +
    "\073\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101" +
    "\uff86\001\002\000\012\024\230\030\uffe6\031\uffe6\067\uffe6" +
    "\001\002\000\076\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\030\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\001" +
    "\002\000\076\004\013\005\011\006\017\007\004\010\010" +
    "\011\006\012\245\014\253\015\237\016\234\017\251\020" +
    "\246\021\041\022\050\024\230\025\254\030\241\034\044" +
    "\035\061\036\037\041\055\042\057\052\040\053\046\054" +
    "\047\102\053\103\016\104\052\105\045\106\060\001\002" +
    "\000\022\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\103\ufff8\001\002\000\062\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\024\uffc6\025\uffc6\030\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\041\uffc6\042\uffc6\052\uffc6\053\uffc6\054\uffc6\102\uffc6\104" +
    "\uffc6\105\uffc6\106\uffc6\001\002\000\004\030\336\001\002" +
    "\000\004\025\335\001\002\000\062\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\025\uffc4\030\uffc4\034\uffc4\035\uffc4\036\uffc4\041" +
    "\uffc4\042\uffc4\052\uffc4\053\uffc4\054\uffc4\102\uffc4\104\uffc4" +
    "\105\uffc4\106\uffc4\001\002\000\004\022\324\001\002\000" +
    "\004\030\323\001\002\000\062\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\024" +
    "\uffc1\025\uffc1\030\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1" +
    "\042\uffc1\052\uffc1\053\uffc1\054\uffc1\102\uffc1\104\uffc1\105" +
    "\uffc1\106\uffc1\001\002\000\062\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024" +
    "\uffc7\025\uffc7\030\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7" +
    "\042\uffc7\052\uffc7\053\uffc7\054\uffc7\102\uffc7\104\uffc7\105" +
    "\uffc7\106\uffc7\001\002\000\062\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024" +
    "\uffc2\025\uffc2\030\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2" +
    "\042\uffc2\052\uffc2\053\uffc2\054\uffc2\102\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\001\002\000\076\004\013\005\011\006\017" +
    "\007\004\010\010\011\006\012\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024\uffba\025\uffba" +
    "\030\uffba\034\uffba\035\uffba\036\uffba\041\uffba\042\uffba\052" +
    "\uffba\053\uffba\054\uffba\102\uffba\103\016\104\uffba\105\uffba" +
    "\106\uffba\001\002\000\004\022\312\001\002\000\040\021" +
    "\041\022\050\030\307\034\044\035\061\036\037\041\055" +
    "\042\057\052\040\053\046\054\047\102\053\104\052\105" +
    "\045\106\060\001\002\000\012\030\026\036\027\103\031" +
    "\104\024\001\002\000\062\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\030\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\102\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\001\002\000\004\030\270\001\002\000\062\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\024\uffad\025\uffad\030\uffad\034\uffad\035" +
    "\uffad\036\uffad\041\uffad\042\uffad\052\uffad\053\uffad\054\uffad" +
    "\102\uffad\104\uffad\105\uffad\106\uffad\001\002\000\004\022" +
    "\264\001\002\000\102\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe" +
    "\025\uffbe\030\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\042" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\102\uffbe\103\uffbe\104\uffbe" +
    "\105\uffbe\106\uffbe\001\002\000\060\012\245\014\253\015" +
    "\237\016\234\017\251\020\246\021\041\022\050\024\230" +
    "\025\262\030\241\034\044\035\061\036\037\041\055\042" +
    "\057\052\040\053\046\054\047\102\053\104\052\105\045" +
    "\106\060\001\002\000\062\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3" +
    "\025\uffc3\030\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\042" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\102\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\001\002\000\060\012\245\014\253\015\237\016" +
    "\234\017\251\020\246\021\041\022\050\024\230\025\uffb8" +
    "\030\241\034\044\035\061\036\037\041\055\042\057\052" +
    "\040\053\046\054\047\102\053\104\052\105\045\106\060" +
    "\001\002\000\004\025\uffb7\001\002\000\004\025\263\001" +
    "\002\000\102\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd" +
    "\030\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd\042\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\001\002\000\102\002\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024" +
    "\uffbc\025\uffbc\030\uffbc\034\uffbc\035\uffbc\036\uffbc\041\uffbc" +
    "\042\uffbc\052\uffbc\053\uffbc\054\uffbc\102\uffbc\103\uffbc\104" +
    "\uffbc\105\uffbc\106\uffbc\001\002\000\036\021\041\022\050" +
    "\034\044\035\061\036\037\041\055\042\057\052\040\053" +
    "\046\054\047\102\053\104\052\105\045\106\060\001\002" +
    "\000\004\023\266\001\002\000\056\012\245\014\253\015" +
    "\237\016\234\017\251\020\246\021\041\022\050\024\230" +
    "\030\241\034\044\035\061\036\037\041\055\042\057\052" +
    "\040\053\046\054\047\102\053\104\052\105\045\106\060" +
    "\001\002\000\062\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6" +
    "\030\uffb6\034\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\102\uffb6\104\uffb6\105\uffb6\106\uffb6" +
    "\001\002\000\062\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1" +
    "\030\uffb1\034\uffb1\035\uffb1\036\uffb1\041\uffb1\042\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\102\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\001\002\000\016\022\273\023\uffe4\026\036\030\uffe4\031" +
    "\uffe4\067\uffe4\001\002\000\016\005\011\006\017\007\004" +
    "\010\010\011\006\103\016\001\002\000\020\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\023\274\103\ufff6\001\002" +
    "\000\012\023\uffe6\030\uffe6\031\uffe6\067\uffe6\001\002\000" +
    "\010\036\027\103\031\104\024\001\002\000\006\023\ufff5" +
    "\031\304\001\002\000\006\023\ufff3\031\302\001\002\000" +
    "\004\023\301\001\002\000\012\023\uffe5\030\uffe5\031\uffe5" +
    "\067\uffe5\001\002\000\016\005\011\006\017\007\004\010" +
    "\010\011\006\103\016\001\002\000\006\023\ufff2\031\ufff2" +
    "\001\002\000\004\033\305\001\002\000\004\023\ufff4\001" +
    "\002\000\006\023\ufff1\031\ufff1\001\002\000\062\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\024\uffb0\025\uffb0\030\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\041\uffb0\042\uffb0\052\uffb0\053\uffb0\054\uffb0\102" +
    "\uffb0\104\uffb0\105\uffb0\106\uffb0\001\002\000\004\030\311" +
    "\001\002\000\062\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf\025\uffaf" +
    "\030\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\042\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\102\uffaf\104\uffaf\105\uffaf\106\uffaf" +
    "\001\002\000\036\021\041\022\050\034\044\035\061\036" +
    "\037\041\055\042\057\052\040\053\046\054\047\102\053" +
    "\104\052\105\045\106\060\001\002\000\052\023\314\034" +
    "\102\035\113\036\074\037\110\040\076\050\104\051\116" +
    "\052\075\055\103\056\077\057\117\060\111\061\115\062" +
    "\101\063\105\064\100\065\112\066\106\067\114\001\002" +
    "\000\056\012\245\014\253\015\237\016\234\017\251\020" +
    "\246\021\041\022\050\024\230\030\241\034\044\035\061" +
    "\036\037\041\055\042\057\052\040\053\046\054\047\102" +
    "\053\104\052\105\045\106\060\001\002\000\062\012\uffc7" +
    "\013\317\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\030\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\041\uffc7\042\uffc7\052\uffc7\053\uffc7\054\uffc7\102" +
    "\uffc7\104\uffc7\105\uffc7\106\uffc7\001\002\000\062\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\024\uffac\025\uffac\030\uffac\034\uffac\035\uffac" +
    "\036\uffac\041\uffac\042\uffac\052\uffac\053\uffac\054\uffac\102" +
    "\uffac\104\uffac\105\uffac\106\uffac\001\002\000\056\012\245" +
    "\014\253\015\237\016\234\017\251\020\246\021\041\022" +
    "\050\024\230\030\241\034\044\035\061\036\037\041\055" +
    "\042\057\052\040\053\046\054\047\102\053\104\052\105" +
    "\045\106\060\001\002\000\062\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\024" +
    "\uffab\025\uffab\030\uffab\034\uffab\035\uffab\036\uffab\041\uffab" +
    "\042\uffab\052\uffab\053\uffab\054\uffab\102\uffab\104\uffab\105" +
    "\uffab\106\uffab\001\002\000\062\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\024" +
    "\uffae\025\uffae\030\uffae\034\uffae\035\uffae\036\uffae\041\uffae" +
    "\042\uffae\052\uffae\053\uffae\054\uffae\102\uffae\104\uffae\105" +
    "\uffae\106\uffae\001\002\000\060\012\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\025" +
    "\uffb9\030\uffb9\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\102\uffb9\104\uffb9\105\uffb9\106" +
    "\uffb9\001\002\000\062\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025" +
    "\uffc0\030\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\102\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\001\002\000\040\021\041\022\050\030\uffb3\034\044" +
    "\035\061\036\037\041\055\042\057\052\040\053\046\054" +
    "\047\102\053\104\052\105\045\106\060\001\002\000\006" +
    "\023\uffb4\030\uffb4\001\002\000\004\030\327\001\002\000" +
    "\040\021\041\022\050\030\uffb3\034\044\035\061\036\037" +
    "\041\055\042\057\052\040\053\046\054\047\102\053\104" +
    "\052\105\045\106\060\001\002\000\004\030\331\001\002" +
    "\000\040\021\041\022\050\023\uffb3\034\044\035\061\036" +
    "\037\041\055\042\057\052\040\053\046\054\047\102\053" +
    "\104\052\105\045\106\060\001\002\000\004\023\333\001" +
    "\002\000\056\012\245\014\253\015\237\016\234\017\251" +
    "\020\246\021\041\022\050\024\230\030\241\034\044\035" +
    "\061\036\037\041\055\042\057\052\040\053\046\054\047" +
    "\102\053\104\052\105\045\106\060\001\002\000\062\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\024\uffb5\025\uffb5\030\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\041\uffb5\042\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\102\uffb5\104\uffb5\105\uffb5\106\uffb5\001\002\000\102\002" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf\030\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\041\uffbf\042\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\001\002" +
    "\000\062\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\030\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\041\uffb2\042\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\102\uffb2\104\uffb2\105\uffb2\106\uffb2\001\002" +
    "\000\004\023\340\001\002\000\012\024\230\030\uffe5\031" +
    "\uffe5\067\uffe5\001\002\000\022\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\103\ufff7\001\002\000" +
    "\014\023\uffdf\026\uffdf\030\uffdf\031\uffdf\067\uffdf\001\002" +
    "\000\016\022\uffdc\023\uffdc\026\uffdc\030\uffdc\031\uffdc\067" +
    "\uffdc\001\002\000\040\021\041\022\050\024\346\034\044" +
    "\035\061\036\037\041\055\042\057\052\040\053\046\054" +
    "\047\102\053\104\052\105\045\106\060\001\002\000\056" +
    "\025\uffea\030\uffea\031\uffea\034\102\035\113\036\074\037" +
    "\110\040\076\050\104\051\116\052\075\055\103\056\077" +
    "\057\117\060\111\061\115\062\101\063\105\064\100\065" +
    "\112\066\106\067\114\001\002\000\040\021\041\022\050" +
    "\024\346\034\044\035\061\036\037\041\055\042\057\052" +
    "\040\053\046\054\047\102\053\104\052\105\045\106\060" +
    "\001\002\000\006\030\uffeb\031\uffeb\001\002\000\006\025" +
    "\uffe7\031\353\001\002\000\004\025\352\001\002\000\010" +
    "\025\uffe9\030\uffe9\031\uffe9\001\002\000\040\021\041\022" +
    "\050\024\346\034\044\035\061\036\037\041\055\042\057" +
    "\052\040\053\046\054\047\102\053\104\052\105\045\106" +
    "\060\001\002\000\004\025\uffe8\001\002\000\100\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\024\ufff9\025\ufff9\030\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\041\ufff9\042\ufff9\052\ufff9\053\ufff9\054\ufff9\102\ufff9" +
    "\103\ufff9\104\ufff9\105\ufff9\106\ufff9\001\002\000\010\036" +
    "\027\103\031\104\024\001\002\000\004\030\uffed\001\002" +
    "\000\014\023\uffe1\026\uffe1\030\uffe1\031\uffe1\067\uffe1\001" +
    "\002\000\010\036\ufffc\103\ufffc\104\ufffc\001\002\000\010" +
    "\036\027\103\031\104\024\001\002\000\004\030\367\001" +
    "\002\000\006\030\ufff0\031\365\001\002\000\010\036\027" +
    "\103\031\104\024\001\002\000\004\030\uffef\001\002\000" +
    "\100\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\024\ufffb\025\ufffb\030\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\041\ufffb\042\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\001\002" +
    "\000\004\002\001\001\002\000\004\002\ufffe\001\002\000" +
    "\016\023\uffcd\024\uffcd\030\uffcd\036\uffcd\103\uffcd\104\uffcd" +
    "\001\002\000\016\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\103\uffd5\001\002\000\016\023\uffcc\024\uffcc\030\uffcc" +
    "\036\uffcc\103\uffcc\104\uffcc\001\002\000\016\023\uffcf\024" +
    "\376\030\uffcf\036\uffcf\103\uffcf\104\uffcf\001\002\000\016" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\103\uffd2\001" +
    "\002\000\016\005\011\006\017\007\004\010\010\011\006" +
    "\103\016\001\002\000\010\036\027\103\031\104\024\001" +
    "\002\000\004\025\uffd1\001\002\000\004\025\u0103\001\002" +
    "\000\014\023\uffd0\030\uffd0\036\uffd0\103\uffd0\104\uffd0\001" +
    "\002\000\004\030\u0105\001\002\000\020\005\011\006\017" +
    "\007\004\010\010\011\006\025\uffc9\103\016\001\002\000" +
    "\004\025\uffc8\001\002\000\016\005\011\006\017\007\004" +
    "\010\010\011\006\103\016\001\002\000\004\025\uffd4\001" +
    "\002\000\004\025\u010a\001\002\000\014\023\uffd3\030\uffd3" +
    "\036\uffd3\103\uffd3\104\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\014\016\013\023\011\024\006\025\014\052" +
    "\004\001\001\000\002\001\001\000\004\037\374\001\001" +
    "\000\002\001\001\000\014\016\013\023\370\024\006\025" +
    "\014\052\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\360\052\004\001\001\000" +
    "\014\032\022\033\021\034\024\035\020\036\027\001\001" +
    "\000\014\016\013\023\017\024\006\025\014\052\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\031\022\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\342\001\001\000\010\003\032\013" +
    "\031\022\033\001\001\000\002\001\001\000\006\013\031" +
    "\022\341\001\001\000\014\016\274\026\336\027\275\030" +
    "\276\052\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\042\005\055\006\041\007\062\010\053\011" +
    "\050\014\061\001\001\000\016\005\055\006\225\007\062" +
    "\010\153\011\050\014\061\001\001\000\016\005\055\006" +
    "\224\007\062\010\153\011\050\014\061\001\001\000\014" +
    "\005\055\007\062\010\221\011\050\014\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\055\006\216" +
    "\007\062\010\153\011\050\014\061\001\001\000\002\001" +
    "\001\000\016\005\055\006\215\007\062\010\153\011\050" +
    "\014\061\001\001\000\016\005\055\006\214\007\062\010" +
    "\153\011\050\014\061\001\001\000\026\004\156\005\055" +
    "\006\041\007\062\010\053\011\050\014\061\015\210\016" +
    "\207\052\004\001\001\000\022\004\146\005\055\006\041" +
    "\007\062\010\053\011\050\014\061\017\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\055\007\062\010\157\011\050\014\061\001\001\000" +
    "\002\001\001\000\014\005\055\007\062\010\155\011\050" +
    "\014\061\001\001\000\002\001\001\000\016\005\055\006" +
    "\152\007\062\010\153\011\050\014\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\072" +
    "\005\055\006\041\007\062\010\053\011\050\014\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\141\005\055\006\041\007\062\010\053\011" +
    "\050\014\061\001\001\000\020\004\140\005\055\006\041" +
    "\007\062\010\053\011\050\014\061\001\001\000\020\004" +
    "\137\005\055\006\041\007\062\010\053\011\050\014\061" +
    "\001\001\000\020\004\136\005\055\006\041\007\062\010" +
    "\053\011\050\014\061\001\001\000\020\004\135\005\055" +
    "\006\041\007\062\010\053\011\050\014\061\001\001\000" +
    "\020\004\134\005\055\006\041\007\062\010\053\011\050" +
    "\014\061\001\001\000\020\004\133\005\055\006\041\007" +
    "\062\010\053\011\050\014\061\001\001\000\020\004\132" +
    "\005\055\006\041\007\062\010\053\011\050\014\061\001" +
    "\001\000\020\004\131\005\055\006\041\007\062\010\053" +
    "\011\050\014\061\001\001\000\020\004\130\005\055\006" +
    "\041\007\062\010\053\011\050\014\061\001\001\000\020" +
    "\004\127\005\055\006\041\007\062\010\053\011\050\014" +
    "\061\001\001\000\002\001\001\000\020\004\126\005\055" +
    "\006\041\007\062\010\053\011\050\014\061\001\001\000" +
    "\020\004\125\005\055\006\041\007\062\010\053\011\050" +
    "\014\061\001\001\000\020\004\124\005\055\006\041\007" +
    "\062\010\053\011\050\014\061\001\001\000\020\004\123" +
    "\005\055\006\041\007\062\010\053\011\050\014\061\001" +
    "\001\000\020\004\122\005\055\006\041\007\062\010\053" +
    "\011\050\014\061\001\001\000\020\004\121\005\055\006" +
    "\041\007\062\010\053\011\050\014\061\001\001\000\020" +
    "\004\120\005\055\006\041\007\062\010\053\011\050\014" +
    "\061\001\001\000\020\004\117\005\055\006\041\007\062" +
    "\010\053\011\050\014\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\146\005\055\006\041\007\062\010\053\011\050\014\061" +
    "\017\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\146\005\055\006\041\007\062" +
    "\010\053\011\050\014\061\017\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\156\005\055\006\041\007\062\010\053\011" +
    "\050\014\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\203\005\055\006\041\007" +
    "\062\010\053\011\050\014\061\001\001\000\020\004\202" +
    "\005\055\006\041\007\062\010\053\011\050\014\061\001" +
    "\001\000\020\004\201\005\055\006\041\007\062\010\053" +
    "\011\050\014\061\001\001\000\020\004\200\005\055\006" +
    "\041\007\062\010\053\011\050\014\061\001\001\000\020" +
    "\004\177\005\055\006\041\007\062\010\053\011\050\014" +
    "\061\001\001\000\020\004\176\005\055\006\041\007\062" +
    "\010\053\011\050\014\061\001\001\000\020\004\175\005" +
    "\055\006\041\007\062\010\053\011\050\014\061\001\001" +
    "\000\020\004\174\005\055\006\041\007\062\010\053\011" +
    "\050\014\061\001\001\000\020\004\173\005\055\006\041" +
    "\007\062\010\053\011\050\014\061\001\001\000\020\004" +
    "\172\005\055\006\041\007\062\010\053\011\050\014\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\055\006\213\007\062\010\153\011\050\014\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\156\005\055\006\041\007\062\010\053\011\050\014" +
    "\061\015\222\016\207\052\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\230\046\231\001\001\000\002" +
    "\001\001\000\056\002\230\004\146\005\055\006\041\007" +
    "\062\010\053\011\050\014\061\016\246\017\237\024\243" +
    "\040\256\041\251\042\247\043\255\044\242\045\241\046" +
    "\235\047\254\050\234\051\232\052\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\246\024\243\047\321\052\004\001\001\000\002" +
    "\001\001\000\022\004\146\005\055\006\041\007\062\010" +
    "\053\011\050\014\061\017\307\001\001\000\014\032\022" +
    "\033\021\034\024\035\020\036\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\230\004\146\005\055\006" +
    "\041\007\062\010\053\011\050\014\061\017\237\040\256" +
    "\041\251\042\247\043\255\044\242\045\241\046\235\050" +
    "\260\051\232\001\001\000\002\001\001\000\046\002\230" +
    "\004\146\005\055\006\041\007\062\010\053\011\050\014" +
    "\061\017\237\040\256\041\251\042\247\043\255\044\242" +
    "\045\241\046\235\050\257\051\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\146\005\055\006\041\007\062\010\053\011" +
    "\050\014\061\017\264\001\001\000\002\001\001\000\044" +
    "\002\230\004\146\005\055\006\041\007\062\010\053\011" +
    "\050\014\061\017\237\040\266\041\251\042\247\043\255" +
    "\044\242\045\241\046\235\051\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\271\013\031\022\033" +
    "\001\001\000\014\016\274\026\277\027\275\030\276\052" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\305\035\020\036\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\274\027\302\030\276\052\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\312\005\055\006\041\007\062\010\053\011\050" +
    "\014\061\001\001\000\002\001\001\000\044\002\230\004" +
    "\146\005\055\006\041\007\062\010\053\011\050\014\061" +
    "\017\237\040\315\041\251\042\247\043\255\044\242\045" +
    "\314\046\235\051\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\230\004\146\005\055\006\041\007" +
    "\062\010\053\011\050\014\061\017\237\041\251\042\247" +
    "\043\255\044\242\045\320\046\235\051\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\146\005\055\006\041\007\062\010" +
    "\053\011\050\014\061\017\324\020\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\146\005\055\006" +
    "\041\007\062\010\053\011\050\014\061\017\324\020\327" +
    "\001\001\000\002\001\001\000\024\004\146\005\055\006" +
    "\041\007\062\010\053\011\050\014\061\017\324\020\331" +
    "\001\001\000\002\001\001\000\044\002\230\004\146\005" +
    "\055\006\041\007\062\010\053\011\050\014\061\017\237" +
    "\040\333\041\251\042\247\043\255\044\242\045\241\046" +
    "\235\051\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\230\046" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\344\005\055\006\041\007\062\010" +
    "\053\011\050\012\346\014\061\001\001\000\002\001\001" +
    "\000\024\004\344\005\055\006\041\007\062\010\053\011" +
    "\050\012\347\014\061\021\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\344\005\055\006\041\007\062\010\053\011\050" +
    "\012\347\014\061\021\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\032\356\033\021\034\024\035\020" +
    "\036\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\361\001\001\000\012\031\362\034\363\035\020" +
    "\036\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\365\034\363\035\020\036\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\376\001\001\000" +
    "\010\016\377\052\004\053\u0100\001\001\000\012\031\u0103" +
    "\034\363\035\020\036\270\001\001\000\004\060\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\377\052\004\053\u0105\001\001\000\002\001" +
    "\001\000\010\016\377\052\004\053\u0107\001\001\000\004" +
    "\056\u0108\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private PrintWriter out;
	public static IdControl idcontrol;
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("\tParsing error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

			if (s.left >= 0) {
				m.append(" in line " + (s.left +1 ));
				if (s.right >= 0) {
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
		out.println(m);
	}
	
	public Parser(InputStream inp) throws FileNotFoundException {
		this(new Yylex(inp));
		idcontrol = new IdControl();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // exprlist ::= expr COMMA exprlist 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(e, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // exprlist ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LPARENexpr ::= LPAREN expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LPARENexpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primary_expr ::= LPARENexpr COMMA exprlist RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExprList(e, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // primary_expr ::= LPARENexpr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // primary_expr ::= STRINGTEXT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Str(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // primary_expr ::= NUM 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Num(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // primary_expr ::= CHARACTER 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Character c = (java.lang.Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Character(c.charValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // primary_expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // postfix_exprl ::= postfix_expr LPAREN 
            {
              Expr RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_exprl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // postfix_expr ::= postfix_expr DOT ID 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.DOT, new Var(i2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // postfix_expr ::= postfix_expr PTR ID 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.PTR, new Var(i2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // postfix_expr ::= postfix_exprl RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Func((Var)i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // postfix_expr ::= postfix_exprl exprlist RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Func((Var)i, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // postfix_expr ::= postfix_expr LBRACKET expr RBRACKET 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BExpr(l,Expr.OpType.ARRAY, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // postfix_expr ::= postfix_expr DEC 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UExpr(Expr.OpType.RDEC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // postfix_expr ::= postfix_expr INC 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UExpr(Expr.OpType.RINC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // postfix_expr ::= primary_expr 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unary_expr ::= SIZEOF LPAREN typename RPAREN 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UExpr(Expr.OpType.SIZEOFT, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unary_expr ::= SIZEOF unary_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.SIZEOFE, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unary_expr ::= NOT cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.NOT, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unary_expr ::= BITNOT cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.BITNOT, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unary_expr ::= PLUS cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.UPLUS, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unary_expr ::= MINUS cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.UMINUS, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unary_expr ::= TIMES cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.GET, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // unary_expr ::= BITAND cast_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.POS, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unary_expr ::= DEC unary_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.LDEC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unary_expr ::= INC unary_expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UExpr(Expr.OpType.LINC, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unary_expr ::= postfix_expr 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cast_expr ::= LPAREN typename RPAREN cast_expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(t, Expr.OpType.CAST, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cast_expr ::= unary_expr 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= cast_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= unary_expr SHRASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHRASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= unary_expr SHLASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHLASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr ::= unary_expr XORASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.XORASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= unary_expr ORASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ORASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= unary_expr ANDASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ANDASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= unary_expr SUBASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SUBASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= unary_expr ADDASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ADDASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= unary_expr MODASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MODASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= unary_expr DIVASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.DIVASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= unary_expr MULASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MULASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= expr ASSIGN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.ASSIGN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= expr SHR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= expr SHL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.SHL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.LT, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.GT, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr LE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.LE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr GE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.GE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= expr NE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.NE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.EQ, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= expr BITXOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.BITXOR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= expr BITAND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.BITAND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr BITOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.BITOR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.AND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.OR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MOD, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.DIVIDE, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.TIMES, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.MINUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BExpr(l, Expr.OpType.PLUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // open_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE open_stmt 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt ms = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If os = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, ms, os); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // open_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("open_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // matched_stmt ::= other_stmt 
            {
              Stmt RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt os = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = os; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // matched_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE matched_stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ms1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ms1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt ms1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ms2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ms2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt ms2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, ms1, ms2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // jump_stmt ::= RETURN exprlist SEMICOLON 
            {
              Stmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // jump_stmt ::= RETURN SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new Return(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // jump_stmt ::= BREAK SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new Break(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // jump_stmt ::= CONTINUE SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new Continue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_element ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_element",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_element ::= exprlist 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_element",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // iter_stmt ::= FOR LPAREN expr_element SEMICOLON expr_element SEMICOLON expr_element RPAREN stmt 
            {
              Stmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ExprList e1 = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprList e3 = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new For(e1, e2, e3, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iter_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // iter_stmt ::= WHILE LPAREN exprlist RPAREN stmt 
            {
              Stmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(el, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iter_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtlist ::= stmt stmtlist 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtList(s, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtlist ::= stmt 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtList(s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // deflist ::= dec deflist 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefList dl = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deflist",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // deflist ::= dec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deflist",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // blockl ::= LBRACE 
            {
              Object RESULT =null;
		 if (!Parser.idcontrol.infunc)
											Parser.idcontrol.beginScope(); 
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockl",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // block ::= blockl deflist stmtlist RBRACE 
            {
              Block RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DefList dl = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	if (!Parser.idcontrol.infunc) Parser.idcontrol.endScope();
										RESULT = new Block(dl, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // block ::= blockl deflist RBRACE 
            {
              Block RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefList dl = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (!Parser.idcontrol.infunc) Parser.idcontrol.endScope();
										RESULT = new Block(dl, null); 
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // block ::= blockl RBRACE 
            {
              Block RESULT =null;
		 RESULT = new Block(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // block ::= blockl stmtlist RBRACE 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	if (!Parser.idcontrol.infunc) Parser.idcontrol.endScope();
										RESULT = new Block(null, sl); 
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_stmt ::= exprlist SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_stmt ::= SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // other_stmt ::= jump_stmt 
            {
              Stmt RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt js = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = js; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // other_stmt ::= iter_stmt 
            {
              Stmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt is = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // other_stmt ::= block 
            {
              Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // other_stmt ::= expr_stmt 
            {
              Stmt RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt es = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= open_stmt 
            {
              Stmt RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If os = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = os; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= matched_stmt 
            {
              Stmt RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt ms = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ms; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // record_def ::= type_specifier declist SEMICOLON record_def 
            {
              DecList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList rd = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecList(new Dec(t, dl), rd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // record_def ::= type_specifier declist SEMICOLON 
            {
              DecList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DecList(new Dec(t, dl)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_or_union ::= UNION 
            {
              StructUnion RESULT =null;
		 RESULT = new Union(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struct_or_union ::= STRUCT 
            {
              StructUnion RESULT =null;
		 RESULT = new Struct(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_or_union",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // id_typeid ::= TYPEID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_typeid",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // id_typeid ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_typeid",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_specifier ::= TYPEID 
            {
              Type RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Name(tid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_specifier ::= struct_or_union id_typeid 
            {
              Type RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 su.name = i; RESULT = su; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_specifier ::= struct_or_union id_typeid LBRACE NT$3 record_def NT$4 RBRACE 
            {
              Type RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DecList r = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 su.name = i; su.record = r; RESULT = su; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$4 ::= 
            {
              Type RESULT =(Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList r = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Parser.idcontrol.endScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$3 ::= 
            {
              Type RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
Parser.idcontrol.beginScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_specifier ::= struct_or_union LBRACE NT$1 record_def NT$2 RBRACE 
            {
              Type RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DecList r = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 su.record = r; RESULT = su; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$2 ::= 
            {
              Type RESULT =(Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList r = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.idcontrol.endScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$1 ::= 
            {
              Type RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructUnion su = (StructUnion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
Parser.idcontrol.beginScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_specifier ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Int(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_specifier ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Char(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_specifier ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new Void(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typename ::= type_specifier 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typename ::= typename TIMES 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Pointer(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // plain_dector ::= TYPEID 
            {
              PlainDector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (Parser.idcontrol.typedef == false) {
											Parser.idcontrol.addVar(i);
											RESULT = new DecName(i);
										}
									   else {
									   		Parser.idcontrol.addType(i);
									   		RESULT = new TypeDefName(i);
									   	}
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_dector",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // plain_dector ::= TIMES plain_dector 
            {
              PlainDector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DecPtr(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_dector",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // plain_dector ::= ID 
            {
              PlainDector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (Parser.idcontrol.typedef == false) {
											Parser.idcontrol.addVar(i);
											RESULT = new DecName(i);
										}
									   else {
									   		Parser.idcontrol.addType(i);
									   		RESULT = new TypeDefName(i);
									   	}
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_dector",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // index ::= LBRACKET expr RBRACKET 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // indexlist ::= index indexlist 
            {
              ExprList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList il = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(i, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // indexlist ::= index 
            {
              ExprList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_dector ::= array_dector indexlist 
            {
              Array RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Array ad = (Array)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Array(ad, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dector",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_dector ::= plain_dector indexlist 
            {
              Array RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList i = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Array(pd, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dector",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dector ::= array_dector 
            {
              Dector RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Array ad = (Array)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dector ::= plain_dector 
            {
              Dector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dector ::= plain_dector lpareninfunc vara_paralist RPAREN 
            {
              Dector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParaList vpl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Parser.idcontrol.infunc = false; 
										Parser.idcontrol.endScope();
										RESULT = new FuncDec(pd, vpl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dector ::= plain_dector LPAREN RPAREN 
            {
              Dector RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PlainDector pd = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncDec(pd, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dector",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // initlist ::= initer 
            {
              ExprList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(i, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initlist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // initlist ::= initer COMMA initlist 
            {
              ExprList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList il = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(i, il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initlist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initer ::= LBRACE initlist RBRACE 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList i = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	RESULT = new InitList(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initer ::= expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // init_dector ::= dector ASSIGN initer 
            {
              InitDector RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDector(d, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_dector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // init_dector ::= dector 
            {
              InitDector RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDector(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_dector",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // init_declist ::= init_dector COMMA init_declist 
            {
              InitDecList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDector id = (InitDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecList idl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(id, idl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declist",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // init_declist ::= init_dector 
            {
              InitDecList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDector id = (InitDector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declist",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declist ::= dector COMMA declist 
            {
              InitDecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(new InitDector(d,null), dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declist",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declist ::= dector 
            {
              InitDecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecList(new InitDector(d, null), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declist",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plain_dec ::= type_specifier dector 
            {
              Para RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dector d = (Dector)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Para(t, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plain_dec",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paralist ::= plain_dec COMMA paralist 
            {
              ParaList RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Para pd = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParaList(pd, pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paralist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paralist ::= plain_dec 
            {
              ParaList RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Para pd = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParaList(pd, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paralist",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vara_paralist ::= paralist COMMA ELLIPSIS 
            {
              ParaList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ParaList(new Ellipsis(), pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vara_paralist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vara_paralist ::= paralist 
            {
              ParaList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vara_paralist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lpareninfunc ::= LPAREN 
            {
              Object RESULT =null;
		 	Parser.idcontrol.infunc = true; 
										Parser.idcontrol.beginScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lpareninfunc",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_def ::= type_specifier plain_dector lpareninfunc vara_paralist RPAREN block 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PlainDector p = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParaList pl = (ParaList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.idcontrol.infunc = false; RESULT = new FuncDef(p,t,pl,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_def ::= type_specifier plain_dector LPAREN RPAREN block 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDector p = (PlainDector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDef(p,t,null,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec ::= type_specifier init_declist SEMICOLON 
            {
              Def RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int initdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecList initdl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dec(t,initdl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= type_specifier SEMICOLON 
            {
              Def RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dec(t,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= TYPEDEF type_specifier NT$0 declist SEMICOLON 
            {
              Def RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Def) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecList dl = (InitDecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Parser.idcontrol.typedef = false; 
										RESULT = new TypeDef(t, dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Def RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Parser.idcontrol.typedef = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= func_def program 
            {
              DefList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncDef f = (FuncDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefList p = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(f, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= dec program 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefList p = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= func_def 
            {
              DefList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncDef f = (FuncDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(f, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec 
            {
              DefList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefList(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefList start_val = (DefList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

